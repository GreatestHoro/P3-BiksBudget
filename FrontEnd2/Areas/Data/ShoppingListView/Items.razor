@using BBCollection.BBObjects
@using BBCollection.DBHandling
@using Newtonsoft.Json
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@if (user != null)
{
<Row>
    <Column>
        <Card Margin="Margin.Is4.FromTop">
            <CardHeader Padding="Padding.Is1.FromBottom" Style="position:fixed">
                <Heading Size="HeadingSize.Is4">My Shoppinglist</Heading>
            </CardHeader>
        </Card>
        <CardBody Padding="Padding.Is0.FromBottom">
            <Fields>
                <Column ColumnSize="ColumnSize.Is1">
                    <CheckEdit Checked="@user.shoppinglist.Products.All(x=>x._completed)" CheckedChanged="user.shoppinglist.CheckAll">All</CheckEdit>
                </Column>
            </Fields>
        </CardBody>
        <CardBody Padding="Padding.Is0.OnY">

            <ListGroup IsFlush="true" Class="text-center">
                @foreach (string storename in ProductStoreDict.Keys)
                {
                    foreach (Product p in ProductStoreDict[storename])
                    {
                        if (ProductStoreDict.Count != 0)
                        {
                            if (!StoreLogoFlag)
                            {
                                <FigureImage Source="@StorePathFinder(storename)" />
                                StoreLogoFlag = true;
                            }

                            <Item Product="@p" StatusChanged="@OnStatusChanged"></Item>
                        }
                        
                    }
                    StoreLogoFlag = false;
                }
            </ListGroup>
        </CardBody>
        <CardFooter Class="card-footerShoppinglist" Padding="Padding.Is3.FromBottom">
            <Field IsHorizontal="true">
                <FieldBody ColumnSize="ColumnSize.Is10">
                    <Buttons Role="ButtonsRole.Addons">
                        <Button Color="Color.Info" Clicked="@(()=>SaveShoppinglist())" IsActive="@(!changeHasHappen)"><Icon Name="@(FontAwesomeIcons.Save)"/></Button>
                        <Button Color="Color.Info" Clicked="@(() => DeleteList())" IsActive="@(!productSelected)"><Icon Name="@(FontAwesomeIcons.Trash)"/></Button>
                        <Button Color="Color.Info" Clicked="@(() => user.shoppinglist.SetFilter(UserShoppinglist.Filter.Completed))" IsActive="@(user.shoppinglist.filter == UserShoppinglist.Filter.Completed)"> ??</Button>
                    </Buttons>
                    <Text Class="shoppinglist-Price-Text"> Total  @String.Format("{0:0.0}", user.shoppinglist.CompletePrice()) DKK</Text>
                </FieldBody>
                <FieldBody ColumnSize="ColumnSize.Is2">
                    <Button Color="Color.Warning" Float="Float.Right" Clicked="AddListToStorage" Visibility="@(productSelected ? Visibility.Always : Visibility.Never)"><Icon Name="@(FontAwesomeIcons.Archive)"/></Button>
                </FieldBody>
            </Field>
        </CardFooter>
    </Column>
</Row>
}
@code {

    #region Fields
    //ShoppinlistFunctionality ListFunc = new ShoppinlistFunctionality("api/Shoppinglist");
    HttpResponseMessage responseMessage = new HttpResponseMessage();
    UserData user;

    Dictionary<string, List<Product>> ProductStoreDict = new Dictionary<string, List<Product>>();
    List<Product> ToShoppinglist = new List<Product>();
    List<Product> ToStorageList = new List<Product>();
    List<Product> TempProducts = new List<Product>();
    private Modal remindModal;

    bool remindToSave = false;
    bool isLoggedIn = false;
    bool StoreLogoFlag = false;
    bool productSelected = false;
    bool changeHasHappen = false;

    int value = 1;

    string email;
    string shopString;
    string productString;

    List<string> ImagePaths = new List<string>() { "../Pictures/salling-store-logos/bilka.png", "../Pictures/coop-store-logos/fakta.png", "../Pictures/coop-store-logos/superbrugsen.png" };
    #endregion

    #region Modal

    private void ShowModal()
    {
        remindModal.Show();
    }

    private void HideModal()
    {
        remindModal.Hide();
    }

    #endregion

    #region EditShoppintlistProducts
    protected void IncrementAmount(Product item)
    {
        remindToSave = true;
        item._amountleft++;
    }

    protected void DecrementAmount(Product item)
    {
        remindToSave = true;

        if (item._amountleft > 1)
        {
            item._amountleft--;
        }
    }

    public void OnCheckedChanged() { }

    public void DeleteProduct(Product p)
    {
        remindToSave = true;

        user.shoppinglist.DeleteItem(p);
    }

    public void DecrementProduct(Product p)
    {
        remindToSave = true;
        if (p._amountleft > 1)
        {
            user.shoppinglist.DecrementProduct(p);
        }
        else
        {
            user.shoppinglist.DeleteItem(p);
        }

        StateHasChanged();
    }

    #endregion

    #region LocalStorage

    /// <summary>
    /// This method will check if the user is logged in.
    /// If he is, his data will be called from the api.
    /// If not the local storage will be used.
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetLocalSession();

            // If emain is found, the user is logged in
            if (!String.IsNullOrEmpty(email))
            {
                isLoggedIn = true;

                user = new UserData(email);

                // THis means he has a shoppinglist, and this will be called throuhg the api
                await user.shoppinglist.GetWhenLoggedIn();
                UpdateShoppinglist();

                /*BilkaProducts = user.shoppinglist.shoppinglist.Where(x => x._storeName.StartsWith('B')).ToList();
                SuperBrugsenProducts = user.shoppinglist.shoppinglist.Where(x => x._storeName.StartsWith('S')).ToList();
                FaktaProducts = user.shoppinglist.shoppinglist.Where(x => x._storeName.StartsWith('F')).ToList();*/

            }
            else
            {
                user = new UserData();
            }

            if (!String.IsNullOrEmpty(shopString))
            {
                user.shoppinglist.GetWhenNotLoggedIn(shopString);
            }

            StateHasChanged();
        }
    }

    public string StorePathFinder(string storeName)
    {
        return $"../Pictures/salling-store-logos/{storeName.ToLower()}.png";
    }

    /// <summary>
    /// If the user is logged in, the user email is found.
    /// The email is used for storage and shoppinglist
    /// If the user is not logged in the local storage will be used to
    /// get a list of products instead. This list is the shoppinglist
    /// </summary>
    /// <returns></returns>
    async Task GetLocalSession()
    {
        email = await localStorage.GetItemAsync<string>("Email");

        if (String.IsNullOrEmpty(email))
        {
            shopString = await localStorage.GetItemAsync<string>("ProductString");
        }
    }
    #endregion

    #region Shoppinglist
    /// <summary>
    /// This method saves the shoppinglist.
    /// This is done differently if the user is or is not logged in.
    /// If he is logged in, the shoppinglist will be saved with the api
    /// If not logged in the shoppinglist will be saved in local storage
    /// </summary>
    public async void SaveShoppinglist()
    {
        remindToSave = false;

        if (String.IsNullOrEmpty(email))
        {
            await SaveLocalStorage();
        }
        else
        {
            await user.shoppinglist.Save();
        }
    }

    public async Task SaveLocalStorage()
    {
        productString = JsonConvert.SerializeObject(user.shoppinglist.shoppinglist);

        await localStorage.RemoveItemAsync("ProductString");

        await localStorage.SetItemAsync("ProductString", productString);
    }

    #endregion

    #region Storage

    /// <summary>
    /// This method can only be called if logged in.
    /// It reminds the user to save the shoppinglist before moving on.
    /// Deletes the shoppinglist, and adds it to storage.
    /// </summary>
    public async Task AddListToStorage()
    {
        responseMessage = await user.ShoppinglistToStrage();
        StateHasChanged();
    }

    public void DeleteShoppinglist()
    {
        remindToSave = true;
        user.shoppinglist.DeleteList();

        StateHasChanged();
    }

    public async void AddItemToStorage(Product p)
    {
        remindToSave = true;

        await user.ProductSLToStrage(p);

        StateHasChanged();
    }

    public async void AddOneItemToStorage(Product p)
    {
        remindToSave = true;

        await user.ProductSLToStrage(p, 1);

        StateHasChanged();
    }

    #endregion

    #region Imagese
    // Function to get salling products in high resolution
    private string ProductImage(string prod_image)
    {
        if (prod_image.Contains("&imgSize=1080x1080"))
        {
            return prod_image;
        }
        else
        {
            return prod_image + "&imgSize=1080x1080";
        }
    }
    #endregion

    public void OnStatusChanged(bool isChecked)
    {
        foreach (Product p in user.shoppinglist.Products)
        {

        }
        changeHasHappen = true;
        anySelected();
        StateHasChanged();
    }

    public void SetCheckMarks(bool isChecked)
    {
        user.shoppinglist.CheckAll(isChecked);
    }

    public void anySelected()
    {
        productSelected = user.shoppinglist.Products.Any(x => x._completed);
    }

    public void DeleteList()
    {
        user.shoppinglist.DeleteList(user.shoppinglist.shoppinglist.Where(x=>x._completed == true).ToList());
        UpdateShoppinglist();
        StateHasChanged();
    }

    public void UpdateShoppinglist()
    {
        ProductStoreDict.Clear();
        user.shoppinglist.shoppinglist = user.shoppinglist.shoppinglist.OrderBy(x => x._storeName).ThenBy(x => x._price).ToList();
        foreach (Product p in user.shoppinglist.shoppinglist)
        {
            if (ProductStoreDict.ContainsKey(p._storeName.ToLower()))
            {
                ProductStoreDict[p._storeName.ToLower()].Add(p);
            }
            else
            {
                ProductStoreDict.Add((p._storeName.ToLower()),new List<Product>());
                ProductStoreDict[p._storeName.ToLower()].Add(p);
            }

        }
    }
}

@using BBCollection.BBObjects
@using BBCollection.DBHandling
@using Newtonsoft.Json
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@if (user != null)
{
<Row>
    <Column>
        <Card Margin="Margin.Is4.FromTop">
            <CardHeader Padding="Padding.Is1.FromBottom" Style="position:fixed">
                <Heading Size="HeadingSize.Is4">My Shoppinglist</Heading>
            </CardHeader>
        </Card>
        <CardBody Padding="Padding.Is0.FromBottom">
            <Fields>
                <Column ColumnSize="ColumnSize.Is1">
                    <CheckEdit Checked="@IsAllSelected()" CheckedChanged="CheckAll">All</CheckEdit>
                </Column>
            </Fields>
        </CardBody>
        <CardBody Padding="Padding.Is0.OnY">

            <ListGroup IsFlush="true" Class="text-center">
                @foreach (string storename in ProductStoreDict.Keys)
                {
                    foreach (Product p in ProductStoreDict[storename])
                    {
                        if (ProductStoreDict.Count != 0)
                        {
                            if (!StoreLogoFlag)
                            {
                                <FigureImage Source="@StorePathFinder(storename)" />
                                StoreLogoFlag = true;
                            }

                            <Item Product="@p" StatusChanged="@OnStatusChanged"></Item>
                        }

                    }
                    StoreLogoFlag = false;
                }
            </ListGroup>
        </CardBody>

        <Snackbar @ref="UndoChange">
            <SnackbarBody>
                @snacbarMessage
            </SnackbarBody>
            <SnackbarAction Clicked="@(async ()=> await UndoDelete())">UNDO</SnackbarAction>
        </Snackbar>

        <Snackbar @ref="UndoStorage">
            <SnackbarBody>
                @snacbarMessage
            </SnackbarBody>
            <SnackbarAction Clicked="@(async ()=> await UndoToStorage())">UNDO</SnackbarAction>
        </Snackbar>

        <Snackbar @ref="Save">
            <SnackbarBody>
                @snacbarMessage
            </SnackbarBody>
        </Snackbar>

        <CardFooter Class="card-footerShoppinglist" Padding="Padding.Is3.FromBottom">
            <Field IsHorizontal="true">
                <FieldBody ColumnSize="ColumnSize.Is9">
                    <Buttons Role="ButtonsRole.Addons">
                        <Tooltip IsAlwaysActive="@(changeHasHappen)" Text="Dont forget to save">
                            <Button Color="Color.Success" Clicked="@(()=>SaveShoppinglist())" IsActive="@(!changeHasHappen)"><Icon Name="@(FontAwesomeIcons.Save)" /> Save Shoppinglist</Button>
                        </Tooltip>
                        <Button Color="Color.Danger" Clicked="@(() => DeleteList())" IsDisabled="selectedProductCount == 0" IsActive="@(!productSelected)"><Icon Name="@(FontAwesomeIcons.Trash)" /> Delete Items (@selectedProductCount)</Button>
                    </Buttons>
                    <Text Class="shoppinglist-Price-Text"> Total  @String.Format("{0:0.0}", user.shoppinglist.CompletePrice()) DKK</Text>
                </FieldBody>
                <FieldBody ColumnSize="ColumnSize.Is3">
                    <Button Color="Color.Warning" Clicked="@(() => AddListToStorage())" IsDisabled="selectedProductCount == 0 && String.IsNullOrEmpty(email)" IsActive="@(user.shoppinglist.filter == UserShoppinglist.Filter.Completed && !String.IsNullOrEmpty(email))"><Icon Name="@(FontAwesomeIcons.Box)" /> Add To Storage (@selectedProductCount)</Button>
                </FieldBody>
            </Field>
        </CardFooter>
    </Column>
</Row>



}
@code {

    #region Fields
    HttpResponseMessage responseMessage = new HttpResponseMessage();
    UserData user;
    Snackbar UndoChange;
    Snackbar UndoStorage;
    Snackbar Save;

    Dictionary<string, List<Product>> ProductStoreDict = new Dictionary<string, List<Product>>();
    List<Product> ToShoppinglist = new List<Product>();
    List<Product> SnackbarTempList = new List<Product>();
    List<Product> StorageList = new List<Product>();
    List<Product> ToStorageList = new List<Product>();
    List<Product> TempProducts = new List<Product>();
    private Modal remindModal;

    bool remindToSave = false;
    bool isLoggedIn = false;
    bool StoreLogoFlag = false;
    bool productSelected = false;
    bool changeHasHappen = false;
    bool allEnabled = false;

    int selectedProductCount = 0;
    int value = 1;

    string email;
    string shopString;
    string productString;
    string snacbarMessage;

    List<string> ImagePaths = new List<string>() { "../Pictures/salling-store-logos/bilka.png", "../Pictures/coop-store-logos/fakta.png", "../Pictures/coop-store-logos/superbrugsen.png" };
    #endregion

    #region Modal

    private void ShowModal()
    {
        remindModal.Show();
    }

    private void HideModal()
    {
        remindModal.Hide();
    }

    #endregion

    #region EditShoppintlistProducts
    protected void IncrementAmount(Product item)
    {
        remindToSave = true;
        item._amountleft++;
    }


    protected void DecrementAmount(Product item)
    {
        remindToSave = true;

        if (item._amountleft > 1)
        {
            item._amountleft--;
        }
    }

    public bool IsAllSelected()
    {
        if (user.shoppinglist.Products.All(x => x._completed))
        {
            allEnabled = true;
        }
        else
        {
            allEnabled = false;
        }

        return allEnabled;
    }

    public void CheckAll()
    {
        allEnabled = !allEnabled;

        user.shoppinglist.SelectAllProducs(allEnabled);
        CountSelectedProducts();
        anySelected();
        StateHasChanged();
    }

    public void OnCheckedChanged() { }

    public void DeleteProduct(Product p)
    {
        remindToSave = true;

        user.shoppinglist.DeleteItem(p);
    }

    public void DecrementProduct(Product p)
    {
        remindToSave = true;
        if (p._amountleft > 1)
        {
            user.shoppinglist.DecrementProduct(p);
        }
        else
        {
            user.shoppinglist.DeleteItem(p);
        }

        StateHasChanged();
    }

    #endregion

    #region LocalStorage

    /// <summary>
    /// This method will check if the user is logged in.
    /// If he is, his data will be called from the api.
    /// If not the local storage will be used.
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetLocalSession();

            // If emain is found, the user is logged in
            if (!String.IsNullOrEmpty(email))
            {
                isLoggedIn = true;

                user = new UserData(email);

                // THis means he has a shoppinglist, and this will be called throuhg the api
                await user.shoppinglist.GetWhenLoggedIn();
                await user.storage.Get();
            }
            else
            {
                user = new UserData();
            }

            if (!String.IsNullOrEmpty(shopString))
            {
                user.shoppinglist.GetWhenNotLoggedIn(shopString);
            }

            UpdateShoppinglist();
            StateHasChanged();
        }
    }

    public string StorePathFinder(string storeName)
    {
        return $"../Pictures/salling-store-logos/{storeName.ToLower()}.png";
    }

    /// <summary>
    /// If the user is logged in, the user email is found.
    /// The email is used for storage and shoppinglist
    /// If the user is not logged in the local storage will be used to
    /// get a list of products instead. This list is the shoppinglist
    /// </summary>
    /// <returns></returns>
    async Task GetLocalSession()
    {
        email = await localStorage.GetItemAsync<string>("Email");

        if (String.IsNullOrEmpty(email))
        {
            shopString = await localStorage.GetItemAsync<string>("ProductString");
        }
    }
    #endregion

    #region Shoppinglist
    /// <summary>
    /// This method saves the shoppinglist.
    /// This is done differently if the user is or is not logged in.
    /// If he is logged in, the shoppinglist will be saved with the api
    /// If not logged in the shoppinglist will be saved in local storage
    /// </summary>
    public async void SaveShoppinglist()
    {
        changeHasHappen = false;

        if (String.IsNullOrEmpty(email))
        {
            await SaveLocalStorage();
        }
        else
        {
            responseMessage =  await user.shoppinglist.Save();
            snacbarMessage =  SetSaveMessage(responseMessage);
            Save.Show();
        }
    }

    public async Task SaveLocalStorage()
    {
        productString = JsonConvert.SerializeObject(user.shoppinglist.shoppinglist);

        await localStorage.RemoveItemAsync("ProductString");

        await localStorage.SetItemAsync("ProductString", productString);
    }

    #endregion

    #region Storage

    /// <summary>
    /// This method can only be called if logged in.
    /// It reminds the user to save the shoppinglist before moving on.
    /// Deletes the shoppinglist, and adds it to storage.
    /// </summary>
    public async Task AddListToStorage()
    {
        remindToSave = true;

        StorageList = await GetCurrentStorage();
        SnackbarTempList = user.shoppinglist.FindActiveList();
        snacbarMessage =  SetEditSnackbarMessage(SnackbarTempList.Count());

        responseMessage = await user.ShoppinglistToStrage();
        selectedProductCount = 0;
        UpdateShoppinglist();
        CountSelectedProducts();

        UndoStorage.Show();

        StateHasChanged();
    }

    public async void AddItemToStorage(Product p)
    {
        remindToSave = true;
        await user.ProductSLToStrage(p);

        StateHasChanged();
    }

    public async Task<List<Product>> GetCurrentStorage()
    {
        await user.storage.Get();

        return user.storage.storageList;
    }

    #endregion

    #region Imagese
    // Function to get salling products in high resolution
    private string ProductImage(string prod_image)
    {
        if (prod_image.Contains("&imgSize=1080x1080"))
        {
            return prod_image;
        }
        else
        {
            return prod_image + "&imgSize=1080x1080";
        }
    }
    #endregion

    public void OnStatusChanged(bool isChecked)
    {
        foreach (Product p in user.shoppinglist.Products)
        {

        }
        changeHasHappen = true;
        CountSelectedProducts();
        anySelected();
        StateHasChanged();
    }

    public void CountSelectedProducts()
    {
        selectedProductCount = user.shoppinglist.shoppinglist.Count(x=> x._completed);
    }

    public void SetCheckMarks(bool isChecked)
    {
        user.shoppinglist.CheckAll(isChecked);
        CountSelectedProducts();
    }

    public void anySelected()
    {
        productSelected = user.shoppinglist.Products.Any(x => x._completed);
    }

    public void DeleteList()
    {
        SnackbarTempList = user.shoppinglist.FindActiveList();

        snacbarMessage = SetDeleteSnackbarMessage(SnackbarTempList.Count());
        UndoChange.Show();

        user.shoppinglist.DeleteList();
        remindToSave = true;
        UpdateShoppinglist();
        CountSelectedProducts();
        this.StateHasChanged();
    }

    public void UpdateShoppinglist()
    {
        ProductStoreDict.Clear();
        user.shoppinglist.shoppinglist = user.shoppinglist.shoppinglist.OrderBy(x => x._storeName).ThenBy(x => x._price).ToList();
        foreach (Product p in user.shoppinglist.shoppinglist)
        {
            if (ProductStoreDict.ContainsKey(p._storeName.ToLower()))
            {
                ProductStoreDict[p._storeName.ToLower()].Add(p);
            }
            else
            {
                ProductStoreDict.Add((p._storeName.ToLower()),new List<Product>());
                ProductStoreDict[p._storeName.ToLower()].Add(p);
            }

        }
    }

    void DeleteProducts()
    {
        selectedProductCount = 0;
        DeleteList();
    }
    #region Snackbar

    public async Task UndoDelete()
    {
        changeHasHappen = false;
        await user.shoppinglist.AddListLocal(SnackbarTempList);
        UpdateShoppinglist();

        UndoChange.Hide();

        CountSelectedProducts();
        StateHasChanged();
    }

    public async Task UndoToStorage()
    {
        changeHasHappen = false;
        await user.shoppinglist.AddListLocal(SnackbarTempList);
        //await user.storage.ReplaceStorage(StorageList);
        UpdateShoppinglist();

        UndoStorage.Hide();

        CountSelectedProducts();
        StateHasChanged();
    }

    public string SetDeleteSnackbarMessage(int amout)
    {
        return $"You just deleted {amout} item(s) from your shopping list";
    }

    public string SetEditSnackbarMessage(int amount)
    {
        return $"You just added {amount} item(s) to storage";
    }

    public string SetSaveMessage(HttpResponseMessage response)
    {
        return response.IsSuccessStatusCode ? "Save successfull" : "Save failed, try againg";
    }

    #endregion
}

@using BBCollection.BBObjects
@using BBCollection.DBHandling
@using FrontEnd2.Areas.Data
<ListGroupItem>
    <Field IsHorizontal="true" Padding="Padding.IsAuto.OnAll">

        <FieldBody ColumnSize="ColumnSize.IsFull">
                <Table IsBorderless="true" IsFullWidth="true" IsHoverable="true">
                    <TableBody>
                        <TableRow Color="Color.Info" Class="align-items-start">
                            <TableRowCell Style="width:50px">
                                <Label>Select</Label>
                                <FieldBody>
                                    <CheckEdit Checked="@Product._completed" CheckedChanged="@OnCheckedChanged" />
                                </FieldBody>
                            </TableRowCell>
                            <TableRowCell Style="width:60px">
                                <Label>Quantity</Label>
                                <SelectEdit TValue="int" SelectedValue="selectedValue" SelectedValueChanged="OnSelectedValueChanged" Style="width:60px;">
                                    @{
                                        int numb = 0;
                                        @for (int i = 0; i < 100; i++)
                                        {
                                            <SelectItem Value="TempScalar">@(numb++)</SelectItem>
                                        }
                                    }
                                </SelectEdit>
                            </TableRowCell>
                            <TableRowCell Style="width:200px">
                                <Label >Product name</Label>
                                <Text Style="width:200px" Float="Float.Left"> @Product._productName  @Product._amount</Text>
                            </TableRowCell>
                            <TableRowCell Style="width:200px">
                                <Label>Amount Remaining</Label>
                                <SelectList Data="@data"
                                            TextField="@((item)=>item.textField)"
                                            ValueField="@((item)=>item.valueField)"
                                            SelectedValue="@selectedAmount"
                                            SelectedValueChanged="@AmountChanged" />
                            </TableRowCell>
                            <TableRowCell Style="width:110px">
                                <Label>Expiration date</Label>
                                <DateEdit Placeholder="Change the date" Date="Convert.ToDateTime(Product._timeAdded)" DateChanged="OnDateChanged" />
                            </TableRowCell>
                        </TableRow>
                    </TableBody>
                </Table>
        </FieldBody>
    </Field>
</ListGroupItem>

@code {
    public int selectedValue = 0;
    public int scalar;
    public string TempScalar;
    static string[] Amount = { "Full", "Almost Full", "Almost Empty"  };
    IEnumerable<AmountRemaining> data = Enumerable.Range( 1, Amount.Length ).Select( x => new AmountRemaining { textField = Amount[x - 1], valueField = x } );

    object selectedAmount { get; set; } = 1;
    
    [Parameter] public Product Product { get; set; }

    [Parameter] public Action<bool> StatusChanged { get; set; }

    DateTime? selectedDate;

    void OnDateChanged( DateTime? date)
    {
        Product._timeAdded = date.ToString(); 
    }

    void AmountChanged( object newValue )
    {
        selectedAmount = newValue;
        StateHasChanged();
    }

    List<string> ItemState = new List<string>() { "Full", "Almost Full", "Half Full", "Almost Empty" };

    public void OnCheckedChanged(bool isChecked)
    {
        Product._completed = isChecked;

        StatusChanged?.Invoke(isChecked);
    }

    public void OnSelectedValueChanged(int value)
    {
        selectedValue = value;
        Product._amountleft = selectedValue;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            selectedValue = Product._amountleft;
            StateHasChanged();
        }

    }

}

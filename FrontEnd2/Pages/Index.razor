@page "/"
@using BBCollection.BBObjects;
@using Newtonsoft.Json;
@using FrontEnd2.Data;
@inject IJSRuntime JsRuntime;

@inject HttpClient  Http

<p>Location:</p>
<p>
    Latitude: @userGeoLocation._latitude <br />
    Longitude: @userGeoLocation._longitude <br />
</p>

<input placeholder="A new Product" @bind="@newRadius" />
<button type="button" class="btn btn-warning" @onclick="ApplyFilters">Apply Filters</button>

@if (viewMap == true)
{
    <div class="mapouter">
        <div class="gmap_canvas"><iframe width="400" height="300" id="gmap_canvas" src="@GoogleMapsIframeUserLocation()" frameborder="0" scrolling="no" marginheight="0" marginwidth="0"></iframe></div>
    </div>
}

<p>The Following Stores Are in a Distance of : @radius</p>
@if (coopStore.Data != null)
{

    @foreach (var item in coopStore.Data)
    {
        <p>
            Retail Group Name: @item.RetailGroupName <br />
            Zipcode: @item.Zipcode <br />
            Adress: @item.Address <br />
        </p>
    }

}
else
{
    <p>There are no stores with the current filters.</p>
}



@code{
    GetIP getIP = new GetIP();
    IpItem ipItem = new IpItem();
    FindCloseStores closeStore;
    CoopStoreApi coopStore = new CoopStoreApi();
    static GeoCoordinate userGeoLocation = new GeoCoordinate(0, 0);

    public int radius = 1000;
    public string url;
    public int newRadius;
    static bool viewMap = false;

    public void UpdateRadius()
    {
        radius = newRadius;
    }

    public async void ApplyFilters()
    {
        await GetUserLocation();

        radius = newRadius;

        FindStoreFunc();
    }


    protected override async Task OnInitializedAsync()
    {
        ipItem = getIP.GetIpData();
        newRadius = radius;
    }

    public void FindStoreFunc()
    {
        closeStore = new FindCloseStores(userGeoLocation, radius);
        coopStore = closeStore.GetStore();
    }

    async Task GetUserLocation()
    {
        await JsRuntime.InvokeVoidAsync(identifier: "getCoordinates");
    }

    [JSInvokable]
    public static void UpdateUserLocation(double latitude, double longitude)
    {
        viewMap = true;
        userGeoLocation._latitude = latitude;
        userGeoLocation._longitude = longitude;
    }

    private string GoogleMapsIframeUserLocation()
    {
        return "https://maps.google.com/maps?q=" + userGeoLocation._latitude + "," + userGeoLocation._longitude + "&t=&z=15&ie=UTF8&iwloc=&output=embed";
    }
}

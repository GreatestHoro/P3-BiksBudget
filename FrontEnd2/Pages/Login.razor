@page "/Login"
@using BBCollection.BBObjects;
@using BBCollection.DBConncetion;
@using Newtonsoft.Json;
@using  System.Text;
@using FrontEnd2.Data;
@using System;
@using System.Collections;
@using System.Diagnostics;
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager


<h1>Login</h1>
@*<input class="SearchField SearchBar" placeholder="Email" @bind="@email" />
<input class="SearchField SearchBar" type="password" placeholder="Password" @bind="@password" />
<button class="btn btn-rounded btn-outline-success" @onclick="AutorizeLogin">Login</button>*@

<div class="d-flex flex-column bd-highlight mb-3">
    <div class="p-2">
        <input class="SearchField SearchBar" placeholder="Email" @onkeyup="@OnKeyPress" @bind="@email" />
    </div>
    <div class="p-2">
        <input class="SearchField SearchBar" type="password" placeholder="Password" @onkeyup="@OnKeyPress" @bind="@password" />
    </div>
    <div class="p-2">
        @*<button class="btn btn-rounded btn-outline-success" @onclick="AutorizeLogin">Login</button>*@
        @if (isLogginIn)
        {
            <button class="btn btn-rounded btn-outline-success search disabled" disabled><span class='fa-left fas fa-sync-alt spinning'></span>Logging in...</button>
        }
        else
        {
            <button class="btn btn-rounded btn-outline-success search" @onclick="(() => AutorizeLogin())">Login</button>
        }
    </div>
</div>


@code{
    string email;
    string password;
    string userString;
    bool isLogginIn = false;
    ConnectionSettings connectionSettings = new ConnectionSettings();
    HttpResponseMessage response = new HttpResponseMessage();


    private async Task OnKeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await AutorizeLogin();
        }
    }

    protected async Task AutorizeLogin()
    {
        isLogginIn = true;
        StateHasChanged();

        User user = new User(email, password);

        userString = JsonConvert.SerializeObject(user);

        var content = new StringContent(userString, Encoding.UTF8, "application/json");

        response = await Http.PostAsync(connectionSettings.GetApiLink() + "api/Login", content);

        if (response.IsSuccessStatusCode)
        {
            await localStorage.SetItemAsync("Email", email);
            await localStorage.RemoveItemAsync("ProductString");
            NavigationManager.NavigateTo("shoppinglist");
        }

        isLogginIn = false;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetLocalSession();

            if (email != null)
            {
                 NavigationManager.NavigateTo("shoppinglist");
            }

            StateHasChanged();
        }
    }

    async Task GetLocalSession()
    {
        email = await localStorage.GetItemAsync<string>("Email");
    }
}

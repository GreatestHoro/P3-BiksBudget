@*@page "/oldsh"
@using Newtonsoft.Json;
@inject HttpClient Http
@using FrontEnd2.Data;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthenticationFunctionallity uf
@using BBCollection.BBObjects;



<h1>Shopping List</h1>

@if (ListFunc.itemList == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="container">
        <div class="row col-md-12">
            <table class="ShoppinglistTable table-bordered">
                <colgroup>
                    <col style="width: 100px" />
                    <col style="width: 180px" />
                    <col style="width: 100px" />
                    <col style="width: 80px" />
                    <col style="width: 80px" />
                    <col style="width: 80px" />
                </colgroup>
                <thead>
                    <tr class="text-center">
                        <th>Name</th>
                        <th>Amount</th>
                        <th>Price For Each</th>
                        <th>Ammount</th>
                        <th>Combined price</th>
                        <th>Remove / To Storage</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var items in ListFunc.itemList)
                    {
                        <tr class="text-center">
                            <td>@items._id - @items._productName</td>
                            <td>@items._amount</td>
                            <td>@items._storeName - @items._price.ToString() kr</td>
                            <td>
                                <div class="text-center">
                                    <button @onclick="(() => DecrementAmount(items._id))"><i class="oi oi-minus"></i></button>
                                    @items._amountleft
                                    <button @onclick="(() => IncrementAmount(items._id))"><i class="oi oi-plus"></i></button>
                                </div>
                            </td>
                            <td>@(items._price * items._amountleft)</td>
                            <td>
                                <div class="text-center">
                                    <button @onclick="(() => AddProductToStorage(items._id))"><i class="oi oi-basket"></i></button>
                                    <button @onclick="(() => ListFunc.DeleteItem(items._id, email))"><i class="oi oi-trash"></i></button>
                                </div>
                            </td>
                        </tr>
                    }

                </tbody>
            </table>
            @if (ListFunc.itemList != null)
            {
                <input placeholder="A new Product" @bind="@newProduct" />
                <button @onclick="AddProduct">Create</button>
            }
        </div>
        <div class="buttom-list">
            <button @onclick="AddAlltoStorage"><i class="oi oi-basket">Add All To Storage</i></button>
            <i>(@ListFunc.CompletePrice() kr)</i>
        </div>
        <div>
            <button @onclick="DeleteAll"><i class="oi oi-trash">Empty Shoppinglist</i></button>
            <button @onclick="SaveList"><i class="oi oi-transfer">Save Shoppinglist</i></button>
        </div>
    </div>
}


@code{
    string productString;
    string newProduct;
    ShoppinlistFunctionality ListFunc = new ShoppinlistFunctionality("api/Shoppinglist");
    HttpResponseMessage responseMessage = new HttpResponseMessage();
    int ammount;
    string email = "Test";

    protected void IncrementAmount(string id)
    {
        foreach (var item in ListFunc.itemList)
        {
            if (item._id == id)
            {
                item._amountleft++;
            }
        }
    }

    protected void DecrementAmount(string id)
    {
        foreach (var item in ListFunc.itemList)
        {

            if (item._id == id && item._amountleft > 1)
            {
                item._amountleft--;
            }
        }
    }

    //protected async override Task OnInitializedAsync()
    //{
    //    responseMessage = await ListFunc.GetProductsOnStart(email);
    //}

    private void AddAlltoStorage()
    {
        ListFunc.AddShoppinlistToStorage("api/Storage", email);
        ListFunc.itemList.Clear();
    }

    private void DeleteAll()
    {
        //ListFunc.DeleteList("Test");
        ListFunc.itemList.Clear();
    }

    private async void AddProduct()
    {
        if (newProduct != null)
        {
            //CoopProduct newItem = new CoopProduct() { Navn = newProduct, Navn2 = "", Pris = 0.00 };
            Product newItem = new Product()
            {
                _productName = newProduct,
                _amount = "",
                _price = 0.00,
                _id = "11123828382392",
                _amountleft = 1
            };

            newProduct = string.Empty;

            ListFunc.itemList.Add(newItem);
            //responseMessage = await ListFunc.AddProductItem(newItem, email);
        }


    }

    private async void DeleteProduct(string id)
    {
        ListFunc.itemList.Remove(ListFunc.itemList.First(x => x._id == id));

        //int i = 1;
        //foreach (var product in ListFunc.itemList)
        //{
        //    product._id = i;
        //    i++;
        //}

        //responseMessage = await ListFunc.DeleteItem(id, "Test");
    }

    private async void AddProductToStorage(string id)
    {
        ListFunc.AddItemToStorage(id, "api/Storage", email);
        responseMessage = await ListFunc.DeleteItem(id, email);
    }

    private void SaveList()
    {
        ListFunc.AddShoppinlistToStorage("api/Storage", email);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetLocalSession();
            localStorage.Changed += (sender, e) =>
            {
                Console.WriteLine($"Value for key {e.Key} changed from {e.OldValue} to {e.NewValue}");
            };

            //if (email != null)
            //{
            //    gottenData = await Http.GetStringAsync("https://localhost:44325/api/Login/" + email + "S");
            //}
            responseMessage = await ListFunc.GetProductsOnStart(email);

            StateHasChanged();
        }

    }

    async Task GetLocalSession()
    {
        email = await localStorage.GetItemAsync<string>("Email");
    }
}*@

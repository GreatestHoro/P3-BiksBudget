@page "/oldRegister"
@using BBCollection.BBObjects;
@using BBCollection.DBConncetion;
@using BBCollection.DBHandling;
@using Newtonsoft.Json;
@using  System.Text;
@using FrontEnd2.Data;
@using System.Diagnostics;
@using FrontEnd2.Authentication;
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage


@if (email == null)
{
    //sæt dem under hinanden
    <h1>Register</h1>
<div class="d-flex flex-column justify-content-end mb-3">
    <div class="p-2 columnWidth">
        <Tooltip IsMultiline="true" Text="Please use 6 or more characters. 
                                          Please refrain from using a 'space'.
                                          Please refrain from using symbols (æ,ø,å is also considered a symbol)" 
                 Placement="Placement.Bottom">
            <Validation Validator="@ValidateEmail">
                <TextEdit Placeholder="Enter email">
                    <Feedback>
                        <ValidationNone>Please enter the email.</ValidationNone>
                        <ValidationSuccess>Email is good.</ValidationSuccess>
                        <ValidationError>Enter valid email!</ValidationError>
                    </Feedback>
                </TextEdit>
            </Validation>
        </Tooltip>
    </div>
    @*<div class="d-sm-flex flex-row mb-3">*@
        <div class="p-2 columnWidth">
            <Tooltip IsMultiline="true" Text="Please use 6 or more characters.
                                              Please include atleast one upper and lower case letter.
                                              Please refrain from using a 'space'.
                                              Please use at least one symbol (æ,ø,å is also considered a symbol)"
                     Placement="Placement.Bottom">
                <input class="SearchField SearchBar" type="password" placeholder="Password" @bind="@password" />
                </Tooltip>
        </div>
    <div class="p-2 columnWidth">
        <input class="SearchField SearchBar" type="password" placeholder="Confirm password" @bind="@repPassword" @onkeyup="OnKeyPress" />
    @*</div>*@
</div>
    <div class="p-2">
        @if (isRegistering)
        {
            <button class="btn btn-rounded btn-outline-success search disabled" disabled><span class='fa-left fas fa-sync-alt spinning'></span>Logging in...</button>
        }
        else
        {
            <button class="btn btn-rounded btn-success" @onclick="CheckInputs"><i class="oi oi-person"></i>&nbsp; Register</button>
        }
    </div>
</div>
    <label>@verificationText</label>
}
else
{
}

@code {
    private string email;
    private string tempEmail;
    private string password;
    private string repPassword;
    private string userString;
    private string verificationText = "";
    ConnectionSettings connectionSettings = new ConnectionSettings();
    LoginRegister acount = new LoginRegister();


    bool isRegistering = false;

    protected void CheckInputs()
    {
        //Verification verify = new Verification();

        //Tuple<bool, string> usernameCheck = verify.VerifyUsername(tempEmail);
        //Tuple<bool, string> passwordCheck = verify.VerifyPassword(password, repPassword);

        //if (!usernameCheck.Item1)
        //{
        //    verificationText = usernameCheck.Item2;
        //}
        //else if (!passwordCheck.Item1)
        //{
        //    verificationText = passwordCheck.Item2;
        //}

        //if (usernameCheck.Item1 && passwordCheck.Item1)
        //{
        //    RegisterUser(tempEmail);
        //}
    }

    protected async void RegisterUser(string addEmail)
    {
        isRegistering = true;
        var response = new HttpResponseMessage();

        User user = new User(addEmail, password);

        List<Product> shoppingList = new List<Product>();

        response = await acount.Register(user);

        if (response.IsSuccessStatusCode)
        {
            await SetupWhenRegistered(addEmail);
            NavigationManager.NavigateTo("shoppinglist");
        }
    }

    public async Task SetupWhenRegistered(string email)
    {
        await localStorage.RemoveItemAsync("Email");
        await localStorage.RemoveItemAsync("ProductString");
        await localStorage.SetItemAsync("Email", email);
        isRegistering = false;
        StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetLocalSession();

            if (email != null)
            {
                NavigationManager.NavigateTo("");

            }

            StateHasChanged();
        }

    }



    async Task GetLocalSession()
    {
        email = await localStorage.GetItemAsync<string>("Email");
    }

    private void OnKeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            CheckInputs();
        }
    }

    void ValidateEmail( ValidatorEventArgs e )
    {
        var email = Convert.ToString( e.Value );

        e.Status = string.IsNullOrEmpty( email ) ? ValidationStatus.None :
            email.Contains( "@" ) ? ValidationStatus.Success : ValidationStatus.Error;
    }

}
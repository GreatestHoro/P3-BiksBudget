@page "/storage"

@using BBCollection.BBObjects;
@using BBCollection.DBConncetion;
@using BBCollection.DBHandling;
@using Newtonsoft.Json;
@using FrontEnd2.Data;
@using BBCollection.Queries;


@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage


<h1>Storage</h1>

@if (email != null)
{
    @* Storage table *@

    @if (viewTitle == false)
    {
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <table class="table table-hover table-condensed">
                        <thead>
                            <tr>
                                <th style="width:35%">Product</th>
                                <th style="width:10%" class="textForTable">Quantity</th>
                                <th style="width:15%" class="textForTable">Amount remaining</th>
                                <th style="width:10%" class="textForTable">Date added</th>
                                <th style="width:10%" class="textForTable">Delete</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (Product p in user.storage.storageList)
                            {
                                
                            <tr>
                                <Button @onclick="()=>updateSelectedProducts(p)"></Button>
                                <td data-th="Product">@p._productName</td>
                                <td data-th="Amount" class="textForTable">
                                    <input type="number" id="number" value="@p._amountleft" />
                                </td>
                                <td data-th="Amount remaining" class="textForTable">
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                        </div>
                                        <select class="custom-select" @onchange="((e) => AssignScalar(e, p))">
                                            <option value="@p._state">@p._state</option>
                                            @foreach (string state in ItemState)
                                            {
                                                <option value="@state"> @state </option>
                                            }
                                        </select>
                                    </div>
                                </td>
                                <td data-th="Date added" class="textForTable">@p._timeAdded</td>
                                <td data-th="Delete" class="textForTable">
                                    <div>
                                        <button class="btn btn-rounded btn-danger btn-sm" title="Delete one @p._productName from storage" @onclick="(() => ChangeItemAmout(p))"><i class="oi oi-trash"></i></button>
                                        @if (p._amountleft > 1)
                                        {
                                            <button class="btn btn-rounded btn-danger btn-sm" title="Delete all @p._amountleft @p._productName from storage" @onclick="(() => DeleteProduct(p))"><i class="oi oi-trash"></i>(All)</button>
                                        }
                                        else
                                        {
                                            <button disabled class="btn btn-rounded btn-danger btn-sm invisibleBtn"><i class="oi oi-trash"></i>(All)</button>
                                        }
                                    </div>
                                </td>
                            </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }

    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-4">
                <button class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() => user.storage.DeleteStorage())">Delete storage</button>
            </div>
            <div class="col-sm-4">
                @if (StorageExists())
                {
                <Field IsHorizontal="true" JustifyContent="JustifyContent.Start">
                    <Tooltip Text="Find a recipe that utilizes your products">
                        <Button IsDisabled="@(!_FoodBiskEnabled)"  Class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() => FindRecipies())">BiksFood</Button>
                    </Tooltip>
                    @if (!_showFilters)
                    {
                <div style="margin-left:10px">
                    <Button Color="Color.Success" IsOutline="true" @onclick="() =>toggelFilters()"> Sort options <Icon Name="FontAwesomeIcons.ArrowCircleDown"></Icon> </Button>
                </div>
                        
                    @*<button class="btn btn-outline-success" @onclick="() =>toggelFilters()">
                        Sort options <i class="fa fa-long-arrow-alt-down"></i>
                    </button>*@
                    }
                    else
                    {
                    <Field>
                        <Field ColumnSize="ColumnSize.IsAuto.OnDesktop">
                            <CheckEdit ColumnSize="ColumnSize.IsAuto" IsInline="false" RadioGroup="sortOptions" @onchange="()=>SortPmatch()" Checked="@pmatch"> Percentage match</CheckEdit>
                            <CheckEdit ColumnSize="ColumnSize.IsAuto" IsInline="false" RadioGroup="sortOptions" @onchange="()=>SortOverallMatch()" Checked="@OverallMatch"> Overall match</CheckEdit>
                        </Field>
                    </Field>
                    <button class="btn btn-outline-success" @onclick="() =>toggelFilters()">
                        Hide<i class="fa fa-long-arrow-alt-up"></i>
                    </button>
                    }
                </Field>
                }
                else
                {
                    <Tooltip Text="Add products to storage to use BiksFood">
                        <button disabled class="btn btn-block btn-light recipeDivDisplay rounded-0 invisibleBtn">BiksFood</button>
                    </Tooltip>
                }
            </div>
            <div class="col-sm-4">
                @if (viewTitle == true)
                {
                    <button class="btn btn-block btn-light rounded-0" @onclick="(() => closeRecipies())">Back to storage</button>
                }
            </div>
        </div>
    </div>

    @*@if (_viewEmptyFridgeLoadSpinner)
        {
            <div class="center_div lds-roller">
                <div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
            </div>
        }*@

    @if (loadingbar)
    {

        <div class="progress mb-3">
            <!--!-->
            <!--!-->
            <!--!-->    <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="@(LoadingBarProggres) " aria-valuemin="0" aria-valuemax="100" style="width: @(LoadingBarProggres.ToString()+"%");">
                <!--!-->
                <!--!-->
            </div><!--!-->
            <!--!-->
            <!--!-->
        </div>
    }
    @*</div>*@

    <!-- #region Old recipe view -->
    @*<div class="container-fluid top-margin">
        @if (recpies == null)
        {
            <p>Sorry, you dont have enough products</p>
        }
        <div class="row">
            <div class="col-3">
                @if (viewTitle == true)
                {
                    <h3> You can make the following </h3>
                    <button class="close float-left" @onclick="(() => closeRecipies())"><i class="oi oi-x"></i> </button>
                    <ul class="recipeListDisplay">
                        @foreach (WeightedRecipies rep in recpies)
                        {
                            <li class="no-bullets"> <button type="button" class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() => retriveInfo(rep._recipie))"> @rep._recipie._Name </button> </li>
                        }

                    </ul>
                }
            </div>

            @if (viewIngredients == true)
            {
                Found();
                <div class="col-2 offset-2">

                    <table class="table-bordered ingredientsTable">
                        <colgroup>
                            <col style="width: 100px" />
                            <col style="width: 150px" />
                        </colgroup>
                        <thead>
                            <tr>
                                <th> Amount </th>
                                <th> Name </th>
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (WeightedRecipies w in recpies)
                            {
                                @if (selectedRecepie._Name.Equals(w._recipie._Name))
                                {
                                    @if (found == true)
                                    {
                                        @foreach (Ingredient I in w._recipie._ingredientList)
                                        {
                                            matchFound();
                                            <tr>
                                                <td>
                                                    @I._amount @I._unit
                                                </td>

                                                @if (w.ingrdients.ContainsKey(I))
                                                {
                                                    <td style="background-color:green">@I._ingredientName</td>
                                                }

                                                else
                                                {
                                                    <td style="background-color:red"> @I._ingredientName</td>

                                                }
                                            </tr>
                                        }
                                    }
                                }

                            }
                            <tr>
                                <td colspan="2" class="text-sm-center">
                                    <div class="valueClass text-center">
                                        <div class="value-button" id="increase" @onclick="(() => decrementRecipeAmount())" value="Increase @value"> - </div>
                                        <input type="number" id="number" value="@recipePerPerson" />
                                        <div class="value-button" id="decrease" @onclick="(() => incrementRecipeAmount())" value="Decrease @value"> + </div>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="col-4">
                    <h3> @recipeName </h3>
                    <p> @recipeDescription </p>
                </div>
            }
        </div>*@
    <!--Scroll to top button   -->
    @*</div>*@
    <!-- #endregion -->

    <!-- #region Recipe card lists -->
    @if (viewTitle == true)
    {
        <div class="row d-flex justify-content-center top-margin">
            <div class="col-sm-10 col-md-8 col-lg-7 col-xl-5">
                @foreach (WeightedRecipies rep in recpies)
                {
                    <div class="center_div card w-100" id="recipeCard">
                        <a @onclick="(() => retriveInfo(rep))" class="stretched-link"></a>
                        <div class="card-header" style="padding-bottom: 0.25rem;">
                            <div class="card-title w-100">
                                <h6 style="font-weight:bold;">
                                    @rep._recipie._Name
                                </h6>
                            </div>
                        </div>
                        <div class="card-body" style="padding-bottom: 0.25rem; padding-top: 0.60rem;">
                            <div class="justify-content-between">
                                <button class="rounded btn-success">
                                    @for (int i = 0; i < rep._recipie._PerPerson; i++)
                                    {
                                        if (i < 4)
                                        {
                                            <i class="oi oi-person"> </i>
                                        }
                                    }
                                    @if (rep._recipie._PerPerson >= 4)
                                    {
                                        <i class="oi oi-plus"> </i>
                                    }
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    <!-- #endregion -->
    <!-- #region Recipe view -->
    <Accordion>
        <Modal @ref="recipeRef">
            <ModalBackdrop />
            <ModalContent IsCentered="true" Size="ModalSize.Large">
                <ModalHeader>
                    <ModalTitle Size="1"> @recipeName </ModalTitle>
                    <CloseButton Clicked="hideModal" />
                </ModalHeader>
                <Card>
                    <CardHeader>
                        <Heading Size="HeadingSize.Is5" Class="text-center">
                            <Button Clicked="@(()=>isOpen1 = !isOpen1)">Description</Button>
                        </Heading>
                    </CardHeader>
                    <Collapse IsOpen="@isOpen1">
                        <CardBody>
                            <p style="text-align:center; padding: 4px 7px 2px 4px;"> @recipeDescription </p>
                        </CardBody>
                    </Collapse>
                </Card>
                <Card>
                    <CardHeader>
                        <Heading Size="HeadingSize.Is5" Class="text-center">
                            <Button Clicked="@(()=>isOpen2 = !isOpen2)" Style="font-weight:bold">Ingrediens</Button>
                        </Heading>
                    </CardHeader>
                    <Collapse IsOpen="@isOpen2">
                        <CardBody>
                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                    <label class="input-group-text" for="inputGroupSelect01"> For:</label>
                                </div>
                                <SelectEdit TValue="int" SelectedValue="selectedValue" SelectedValueChanged="@OnSelectedValueChanged" Style="max-width:100px;">
                                    @{
                                        int numb = 0;
                                        @for (int i = 0; i < 99; i++)
                                        {
                                            <SelectItem Value="TempScalar">@(++numb)</SelectItem>
                                        }
                                    }
                                </SelectEdit>
                            </div>
                            <Table Theme="Theme.Light" IsStriped="false" IsHoverable="true" IsFullWidth="true" IsBorderless="true">
                                <TableHeader>
                                    <TableRow>
                                        <TableHeaderCell></TableHeaderCell>
                                        <Tooltip IsAlwaysActive="true" Text="Click on an ingredient to find a product">
                                            <TableHeaderCell></TableHeaderCell>
                                        </Tooltip>
                                    </TableRow>
                                </TableHeader>
                                <TableBody>
                                    @foreach (Ingredient ing in ingredients)
                                    {
                                    <TableRow>
                                        @if (runCounter <= ingredients.Count) //comback and fix
                                        {
                                            runCounter++;
                                            scalar = recipePerPerson;
                                        }
                                        <TableRowCell Style="width:50px">@(String.Format("{0:0.0}", (ing._amount / recipePerPerson) * scalar)) @ing._unit</TableRowCell>
                                        @if (ingrdientDict.ContainsKey(ing))
                                        {
                                            <TableRowCell Style="width:150px">
                                                <Button Class="btn btn-block btn-success" @onclick="(() => retriveIngredient(ing))"><Icon Padding="Padding.Is1.FromTop" Float="Float.Left" Name="@(FontAwesomeIcons.CheckCircle)"></Icon> @ing._ingredientName</Button>
                                            </TableRowCell>
                                        }
                                        else if (InshoppingList.Contains(ing))
                                        {
                                            <TableRowCell Style="width:150px">
                                                <Button Color="Color.Success" IsOutline="true" Class="btn btn-block btn-light" @onclick="(() => retriveIngredient(ing))"><Icon Padding="Padding.Is1.FromTop" Float="Float.Left" Name="@(FontAwesomeIcons.ShoppingCart)"></Icon>@ing._ingredientName</Button>
                                            </TableRowCell>
                                        }
                                        else
                                        {
                                            <TableRowCell Style="width:150px">
                                                <Button Class="btn btn-block btn-light" @onclick="(() => retriveIngredient(ing))"><Icon Padding="Padding.Is1.FromTop" Float="Float.Left" Name="@(FontAwesomeIcons.CartPlus)"></Icon>@ing._ingredientName</Button>
                                            </TableRowCell>
                                        }

                                    </TableRow>
                                    }
                                </TableBody>
                            </Table>
                        </CardBody>
                    </Collapse>
                </Card>
                <Card>
                    <CardHeader>
                        <Heading Size="HeadingSize.Is5" Class="text-center">
                            <Button Clicked="@(()=>isOpen3 = !isOpen3)" Style="font-weight:bold">Products</Button>
                        </Heading>
                    </CardHeader>
                    <Collapse IsOpen="@isOpen3">
                        <CardBody>
                            @if (products.Count == 0)
                            {
                                <p> Choose an ingredient</p>
                            }
                            else
                            {
                                @foreach (Product p in products)
                                {
                                    <Table Theme="Theme.Light" IsBordered="true">
                                        <TableBody>
                                            <TableRowHeader Style="width:5%"><Button Class="btn btn-block btn-outline-success" Clicked="()=>AddProductToSL(p)"> <Icon Name="@(FontAwesomeIcons.ShoppingCart)"></Icon></Button> </TableRowHeader>
                                            <TableRowCell Style="width:25%">@p._price Kr.</TableRowCell>
                                            <TableRowCell Style="width:70%">@p._productName</TableRowCell>
                                        </TableBody>
                                    </Table>
                                }
                            }
                        </CardBody>
                    </Collapse>
                </Card>
            </ModalContent>
        </Modal>
    </Accordion>

    @if (_viewLoadMore)
    {
        <div class="row mt-4 d-flex justify-content-center">
            <button class="btn btn-warning mb-5 mx-auto" @onclick="()=>LoadMoreRecepies()">Load More</button>
        </div>
    }

    <!-- #endregion -->
}
else
{
    <p>You need to be logged in to see your storage</p>
}


@code{
    ConnectionSettings connectionSettings = new ConnectionSettings();
    private Modal recipeRef;

    #region Fields
    string email, userId, recipeDescription, recipeName;
    string tempState;
    string TempScalar;
    string tempIngredientName;
    string shopString;
    string replacementUlr = "https://cdn.discordapp.com/attachments/519096261408718908/649685312083197973/coopdicoop.jpg";
    List<List<string>> AllProductRefs;
    int ID;

    int recipePerPerson;
    int LoadingBarProggres;
    int selectedValue;
    int value;
    int x;
    int scalar;
    int runCounter = 0;
    int Timesload = 0;
    int defualtAmountLoad = 10;
    int NewAmount;

    bool found = true;
    bool viewTitle = false;
    bool viewIngredients = false;
    bool viewProducts = false;
    bool FlagYeet = true;
    bool isOpen1 = true;
    bool isOpen2 = true;
    bool isOpen3 = true;
    bool disableButton = false;
    bool changeState = false;
    bool _viewLoadMore = false;
    bool IngrdientIsCurrentlySelected = false;
    bool _viewEmptyFridgeLoadSpinner = false;
    bool loadingbar = false;
    bool _showFilters = false;
    bool pmatch = true;
    bool OverallMatch = false;
    bool _FoodBiskEnabled = false;

    //ShoppinlistFunctionality ListFunc = new ShoppinlistFunctionality("api/Storage");
    UserData user;
    HttpResponseMessage responseMessage = new HttpResponseMessage();
    Product tempProduct = new Product();
    Ingredient currentlySelectedIngredient;
    List<Ingredient> InshoppingList = new List<Ingredient>();

    List<float> recipeAmount = new List<float>();
    List<Ingredient> ingredients = new List<Ingredient>();
    List<WeightedRecipies> recpies = new List<WeightedRecipies>();
    List<WeightedRecipies> Allrecpies = new List<WeightedRecipies>();
    List<Recipe> _recpies = new List<Recipe>();
    List<Product> products = new List<Product>();
    List<Product> ToShoppinglist = new List<Product>();
    Recipe selectedRecepie = new Recipe();
    List<string> ItemState = new List<string>() { "Full", "Almost Full", "Half Full", "Almost Empty" };
    ControllerFuncionality features = new ControllerFuncionality();
    Dictionary<Ingredient, List<string>> ingrdientDict = new Dictionary<Ingredient, List<string>>();
    Dictionary<Product, bool> SelectedProducts = new Dictionary<Product, bool>();
    //ShoppinlistFunctionality ShopList = new ShoppinlistFunctionality("api/Shoppinglist");

    private delegate bool compareWR(WeightedRecipies r1, WeightedRecipies r2);
    #endregion

    #region StorageMethods

    public bool StorageExists()
    {
        return user.storage.storageList.Count > 0;
    }

    /// <summary>
    /// The state of an item is changed.
    /// </summary>
    /// <param name="item">The item of which the state shouold be changes</param>
    /// <param name="state">The state to chaneg to</param>
    public async Task ChangeProductState(Product p, string state)
    {
        // Finds the index of the input item
        p._state = state;

        // Change the state in the storage list
        //await ListFunc.ChangeItemInStorage(ListFunc.CombinedList[index]);
        await user.storage.EditProduct(p);
    }

    public async Task DeleteProduct(Product p)
    {
        await user.storage.DeleteProduct(p);
        StateHasChanged();
    }


    /// <summary>
    /// This method changes the amount of an item.
    /// If there is only one left, it is deleted.
    /// Else the amount left is decremented.
    /// </summary>
    /// <param name="item"></param>
    public async Task ChangeItemAmout(Product p)
    {
        await user.storage.DeleteProduct(p, 1);
        StateHasChanged();
    }
    #endregion

    #region OnInit_async_Method

    /// <summary>
    /// If it is the first render, the email is requested form the local storage.
    /// From this email, the storage from the user will be requested from the api.
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetLocalSession();

            if (email != null)
            {
                user = new UserData(email);
                await user.storage.Get();
            }
            intailizeAllProducts(user.storage.storageList);
            StateHasChanged();
        }

    }

    async Task GetLocalSession()
    {
        // The email is requested fomr localstorage
        email = await localStorage.GetItemAsync<string>("Email");
    }
    #endregion

    #region Recipe_Display_Methods
    void matchNotFound()
    {
        found = true;
    }

    void matchFound()
    {
        found = false;
    }
    void Found()
    {
        found = true;
    }

    void clear()
    {
        ingredients.Clear();
        recipeAmount.Clear();
    }

    void closeRecipies()
    {
        _viewLoadMore = false;
        viewTitle = !viewTitle;
    }

    void retriveInfo(WeightedRecipies rep)
    {
        //Recipe show = _recpies.First(x => x._recipeID == ID);
        ingrdientDict = rep.ingrdients;
        selectedRecepie = rep._recipie;
        recipeName = rep._recipie._Name;
        recipeDescription = rep._recipie._description;
        ingredients = rep._recipie._ingredientList;
        recipePerPerson = (int)rep._recipie._PerPerson;
        selectedValue = recipePerPerson;
        found = true;
        showModal();
        viewIngredients = true;
        //viewAddToshoppinglist = true;
    }

    void incrementRecipeAmount()
    {
        for (int i = 0; i < recipeAmount.Count; i++)
        {
            found = true;
            if (recipeAmount[i] != 0)
            {
                recipeAmount[i] = (recipeAmount[i] / recipePerPerson) * (recipePerPerson + 1F);
                value++;
            }
        }
        recipePerPerson += 1;
    }


    void decrementRecipeAmount()
    {
        if (recipePerPerson >= 2)
        {
            for (int i = 0; i < recipeAmount.Count; i++)
            {
                found = true;
                if (recipeAmount[i] != 0)
                {
                    recipeAmount[i] = (recipeAmount[i] / recipePerPerson) * (recipePerPerson - 1F);
                    value--;
                }
            }
            recipePerPerson -= 1;
        }
    }
    #endregion

    #region empty fridge

    private async Task FindRecipies()
    {
        _viewEmptyFridgeLoadSpinner = true;
        int HasBeenLoaded = 0;
        this.StateHasChanged();
        EmptyFridgeFuntionality emptyFridgeFuntionality = new EmptyFridgeFuntionality(CreateCurrentSelctedList());
        Allrecpies = await emptyFridgeFuntionality.GetWeightedRecipies();
        LoadMoreRecepies();
        loadingbar = true;
        LoadingManager(++HasBeenLoaded, user.storage.storageList.Count);
        this.StateHasChanged();

        viewTitle = true;
        _viewEmptyFridgeLoadSpinner = false;
        _viewLoadMore = true;
        await disableLoad();
    }
    private void LoadingManager(int currentLoad, int TotalToLoad)
    {
        LoadingBarProggres = currentLoad == TotalToLoad ? 100 : ((int)(100 * ((float)currentLoad / (float)TotalToLoad)));
    }
    private async Task disableLoad()
    {
        await Task.Delay(3000);
        loadingbar = false;
    }

    private async Task<List<Recipe>> getRecepies()
    {
        _recpies = JsonConvert.DeserializeObject<List<Recipe>>(await Http.GetStringAsync("https://localhost:44325/api/recipe?recipeTitle=" + " "));
        List<Recipe> recepies = _recpies;
        return recepies;
    }

    #endregion

    private async Task AssignScalar(ChangeEventArgs e, Product p)
    {
        await ChangeProductState(p, e.Value.ToString());
    }

    private void showModal()
    {
        recipeRef.Show();
    }

    private void hideModal()
    {
        recipeRef.Hide();
    }

    private void OnSelectedValueChanged(int value)
    {
        selectedValue = value;
        scalar = selectedValue;
    }

    private void retriveIngredient(Ingredient ID)
    {
        currentlySelectedIngredient = ID;
        viewProducts = true;
        Ingredient ing = ingredients.First(x => x._ingredientName == ID._ingredientName);
        tempIngredientName = ing._ingredientName;
        retriveProduct();
    }

    private async void retriveProduct()
    {
        if (products != null)
        {
            products.Clear();
        }
        products.AddRange(await Products(tempIngredientName));
        this.StateHasChanged();
    }

    private async Task<List<Product>> Products(string ingredient)
    {
        List<Product> resProducts = new List<Product>();
        ProductHandling productHandling = new ProductHandling();
        resProducts = await productHandling.GetListAsync(ingredient);
        if (resProducts.Count == 0)
        {
            resProducts = await SlowExsperimentalSearch(ingredient);
        }
        resProducts.Sort((a, b) => a._price.CompareTo(b._price));

        return resProducts;
    }

    private async Task<List<Product>> SlowExsperimentalSearch(string searchterm)
    {
        string[] InduviduelTerms = searchterm.Split(" ");
        ProductHandling pTest = new ProductHandling();
        List<List<Product>> TempListList = new List<List<Product>>();
        List<Product> ProductList = new List<Product>();

        foreach (string s in InduviduelTerms)
        {
            TempListList.Add(await pTest.ReferencesAsync(s));
        }
        TempListList = TempListList.OrderByDescending(x => -x.Count).ToList();
        if (ProductList.Count == 0)
        {
            foreach (List<Product> Plist in TempListList)
            {
                if (Plist.Count != 0)
                {
                    ProductList = Plist;
                    break;
                }
            }
        }
        foreach (Product p in ProductList)
        {
            p._CustomReferenceField = "*";
        }
        return ProductList;
    }

    public async void AddProductToSL(Product AddedItem)
    {
        disableButton = true;
        StateHasChanged();
        InshoppingList.Add(currentlySelectedIngredient);
        AddedItem._amountleft++;

        int actualAmout = AddedItem._amountleft;

        AddedItem._amountleft = 1;

        AddedItem._image = features.SetOnePicture(AddedItem._image);

        if (String.IsNullOrEmpty(email))
        {
            await GetAndSetLocalStorage(AddedItem);
        }
        else
        {
            await user.shoppinglist.AddProduct(AddedItem);
        }

        AddedItem._amountleft = actualAmout;

        disableButton = await AwaitButton();
        StateHasChanged();
    }

    public async Task GetAndSetLocalStorage(Product product)
    {
        ToShoppinglist = await GetLocalStorage();

        ToShoppinglist.Add(product);

        ToShoppinglist = features.HandleDublicats(ToShoppinglist);

        await localStorage.RemoveItemAsync("ProductString");

        shopString = JsonConvert.SerializeObject(ToShoppinglist);

        await localStorage.SetItemAsync("ProductString", shopString);
    }

    public async Task<bool> AwaitButton()
    {
        await Task.Delay(40);
        return false;
    }

    public async Task<List<Product>> GetLocalStorage()
    {
        shopString = await localStorage.GetItemAsync<string>("ProductString");

        if (!String.IsNullOrEmpty(shopString))
        {
            return JsonConvert.DeserializeObject<List<Product>>(shopString);
        }

        return new List<Product>();
    }

    public void LoadMoreRecepies()
    {
        Timesload++;
        NewAmount = defualtAmountLoad * Timesload;
        if (!(Allrecpies.Count >= NewAmount))
        {
            NewAmount = Allrecpies.Count % NewAmount;
            _viewLoadMore = false;
        }

        recpies = Allrecpies.GetRange(0, NewAmount);
    }

    public void toggelFilters()
    {
        _showFilters = !_showFilters;
    }

    //public void SortRecepies()
    //{
    //    if (pmatch)
    //    {
    //        recpies = Allrecpies.OrderByDescending(x => -x.pMatch).ToList().GetRange(0,defualtAmountLoad * Timesload);

    //    }
    //    else if (OverallMatch)
    //    {
    //        recpies = Allrecpies.OrderByDescending(x => -x.matchingIngrdientsNum).ToList().GetRange(0,defualtAmountLoad * Timesload);
    //    }
    //    StateHasChanged();
    //}

    public void SortPmatch()
    {
        recpies = Allrecpies.OrderByDescending(x => x.pMatch).ToList().GetRange(0,NewAmount);
        StateHasChanged();
    }

    public void SortOverallMatch()
    {
        recpies = Allrecpies.OrderByDescending(x => x.matchingIngrdientsNum).ToList().GetRange(0,NewAmount);
        StateHasChanged();
    }
    public void CheckIfAnySelected()
    {
        List<Product> returnList = new List<Product>();
        foreach (Product key in SelectedProducts.Keys)
        {
            if (SelectedProducts[key])
            {
                returnList.Add(key);
            }
        }

        _FoodBiskEnabled = returnList.Count != 0 ? true : false;
    }

    public void intailizeAllProducts(List<Product> products)
    {
        foreach (Product product in products)
        {
            SelectedProducts.Add(product, false);
        }
    }

    public List<Product> CreateCurrentSelctedList()
    {
        List<Product> returnList = new List<Product>();
        foreach (Product key in SelectedProducts.Keys)
        {
            if (SelectedProducts[key])
            {
                returnList.Add(key);
            }
        }

        return returnList;
    }

    public void updateSelectedProducts(Product product)
    {
        SelectedProducts[product] = Toggelbool(SelectedProducts[product]);
        CheckIfAnySelected();
    }

    public bool Toggelbool(bool _bool)
    {
        return !_bool;
    }
}

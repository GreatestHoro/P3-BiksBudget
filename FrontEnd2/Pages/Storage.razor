@page "/storage"
@using Newtonsoft.Json;
@inject HttpClient Http
@using FrontEnd2.Data;
@using System.Text;
@using System.Globalization;

<h1>Storage</h1>

@if (ListFunc.itemList == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
<div class="container">
    <div class="row col-md-12">
        <table class="ShoppinglistTable table-bordered">
            <colgroup>
                <col style="width: 150px" />
                <col style="width: 130px" />
                <col style="width: 80px" />
                <col style="width: 120px" />
                <col style="width: 75px" />
            </colgroup>
            <thead>
                <tr class="text-center">
                    <th>Name</th>
                    <th>Full Amount</th>
                    <th>Amount Remaining</th>
                    <th>Added Date</th>
                    <th>Item is Empty</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var items in ListFunc.itemList)
                {
                    <tr class="text-center">
                        <td>@items.Id - @items.Name</td>
                        <td>@items.AmountOfItem * @items.Amount</td>
                        <td>
                            <p class="lead"></p>
                            <div class="btn-group show-on-hover">
                                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                                    @items.State <span class="caret"></span>
                                </button>
                                <ul class="dropdown-menu" role="menu">
                                    @foreach (var State in ItemState)
                                    {
                                        <li><button class="btn btn-block bg-light dropdownListStrorage rounded-0" @onclick="(() => ChangeState(items.Id, State))">@State</button></li>
                                    }
                                </ul>
                            </div>
                        </td>
                        <td>@items.TimeAdded</td>
                        <td>
                            <div class="text-center">
                                <button @onclick="(() => DeleteProduct(items.Id))"><i class="oi oi-trash"></i></button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        @if (ListFunc.itemList != null)
        {
            <input placeholder="A new Product" @bind="@newProduct" />
            <button @onclick="AddProduct">Create</button>
        }
    </div>
    <div>
        <button @onclick="DeleteAll"><i class="oi oi-trash">Empty Shoppinglist</i></button>
        <button @onclick="SaveList"><i class="oi oi-transfer">Save Shoppinglist</i></button>
    </div>
</div>
}


@code{
    string productString;
    string newProduct;
    ShoppinlistFunctionality ListFunc = new ShoppinlistFunctionality("api/Storage");
    HttpResponseMessage responseMessage = new HttpResponseMessage();
    string email = "Test";
    List<string> ItemState = new List<string>() { "Full", "Almost Full", "Half Full", "Almost Empty" };

    private void DeleteAll()
    {
        ListFunc.itemList.Clear();
        //ListFunc.DeleteList(email);
    }

    protected async void ChangeState(int id, string state)
    {
        //ListFunc.itemList[ListFunc.itemList.Find(x => x.Id.Equals(id))].State = state;
        AddedProduct ChangedItem = new AddedProduct();

        foreach (var item in ListFunc.itemList)
        {
            if (item.Id == id)
            {
                item.State = state;
                productString = JsonConvert.SerializeObject(item);

                //await ListFunc.ChangeItem(item.Id, productString, email);

                break;
            }
        }
    }

    protected async override Task OnInitializedAsync()
    {
        responseMessage = await ListFunc.GetProductsOnStart();
    }


    private async void AddProduct()
    {
        if (newProduct != null)
        {
            AddedProduct newItem = new AddedProduct()
            {
                Name = newProduct,
                Amount = "",
                State = "Full",
                Id = ListFunc.itemList.Count + 1,
                AmountOfItem = 1,
                TimeAdded = DateTime.Now.ToString()
            };

            newProduct = string.Empty;

            ListFunc.itemList.Add(newItem);
            //responseMessage = await ListFunc.AddProductItem(newItem, email);
        }

    }

    private async void DeleteProduct(int id)
    {
        bool isFound = false;
        foreach (var item in ListFunc.itemList)
        {
            if (item.Id == id && item.AmountOfItem > 1)
            {
                item.AmountOfItem--;

                productString = JsonConvert.SerializeObject(item);

                //await ListFunc.ChangeItem(item.Id, productString, email);

                isFound = true;

                break;
            }
        }

        if (isFound == false)
        {
            //responseMessage = await ListFunc.DeleteItem(id, email);
            ListFunc.itemList.Remove(ListFunc.itemList.First(x => x.Id == id));

            int i = 1;
            foreach (var product in ListFunc.itemList)
            {

                product.Id = i;
                i++;
            }

        }
    }

    private void SaveList()
    {
        ListFunc.AddList(email);
    }
}

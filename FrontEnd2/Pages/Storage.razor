@page "/storage"
@using Newtonsoft.Json;
@inject HttpClient Http
@using FrontEnd2.Data;
@using System.Text;
@using System.Globalization;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthenticationFunctionallity uf
@using BBCollection.BBObjects;

<h1>My Fridge</h1>

@if (email != null)
{
    @if (ListFunc.itemList == null)
    {
        <p>
            <em>Your Fridge is Empty</em>
        </p>
    }
    else
    {
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-12">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th style="width:10%">ID</th>
                            <th style="width:30%">Product</th>
                            <th style="width:20%">Amount</th>
                            <th style="width:20%">Amount Remaining</th>
                            <th style="width:10%">Date Added</th>
                            <th style="width:10%">Delete</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var items in ListFunc.itemList)
                        {
                            <tr>
                                <td data-th="ID">@items._id</td>
                                <td data-th="Product">@items._productName</td>
                                <td data-th="Amount">
                                    <input type="number" id="number" value="@items._amountleft" />
                                    @items._amount
                                </td>
                                <td data-th="Amount Remaining">
                                    <div class="btn-group show-on-hover">
                                        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                                            @items._state <span class="caret"></span>
                                        </button>
                                        <ul class="dropdown-menu" role="menu">
                                            @foreach (var State in ItemState)
                                            {
                                                <li><button class="btn btn-block bg-light dropdownListStrorage rounded-0" @onclick="(() => ChangeState(items._id, State))">@State</button></li>
                                            }
                                        </ul>
                                    </div>
                                </td>
                                <td data-th="Date added">@items._timeAdded</td>
                                <td data-th="Delete">
                                    <div>
                                        <button class="btn btn-danger btn-sm" @onclick="(() => DeleteProduct(items._id))"><i class="oi oi-trash"></i></button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-4 of">
                <button class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() =>ListFunc.AddFuncList())">Save Storage</button>
            </div>
            <div class="col-sm-4">
                <button class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() =>ListFunc.DeleteFuncList())">Delete Storage</button>
            </div>
        </div>
    </div>
    }
}
else
{
    <p>You Need To Be Logged In To See Your Storage</p>
}



@code{
    string productString;
    string newProduct;
    ShoppinlistFunctionality ListFunc = new ShoppinlistFunctionality("api/Storage");
    HttpResponseMessage responseMessage = new HttpResponseMessage();

    string _headingText;
    string email;
    string userId;

    List<string> ItemState = new List<string>() { "Full", "Almost Full", "Half Full", "Almost Empty" };

    private void DeleteAll()
    {
        ListFunc.itemList.Clear();
        //ListFunc.DeleteList(userId);
    }

    protected async void ChangeState(string id, string state)
    {
        //ListFunc.itemList[ListFunc.itemList.Find(x => x.Id.Equals(id))].State = state;
        AddedProduct ChangedItem = new AddedProduct();

        foreach (var item in ListFunc.itemList)
        {
            if (item._id == id)
            {
                item._state = state;
                //productString = JsonConvert.SerializeObject(item);

                //await ListFunc.ChangeItem(item.Id, productString, userId);

                break;
            }
        }
    }

    private async void AddProduct()
    {
        if (newProduct != null)
        {
            Product newItem = new Product()
            {
                _productName = newProduct,
                _amount = "",
                _state = "Full",
                _id = "2000000000045000",
                _amountleft = 1,
                _timeAdded = DateTime.Now.ToString()
            };

            newProduct = string.Empty;

            ListFunc.itemList.Add(newItem);
            //responseMessage = await ListFunc.AddProductItem(newItem, userId);
        }

    }

    private async void DeleteProduct(string id)
    {
        bool isFound = false;
        foreach (var item in ListFunc.itemList)
        {
            if (item._id == id && item._amountleft != 1)
            {
                item._amountleft--;

                isFound = true;

                break;
            }
        }

        if (isFound == false)
        {
            ListFunc.DeleteItem(id);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetLocalSession();
            localStorage.Changed += (sender, e) =>
            {
                Console.WriteLine($"Value for key {e.Key} changed from {e.OldValue} to {e.NewValue}");
            };

            //if (email != null)
            //{
            //    gottenData = await Http.GetStringAsync("https://localhost:44325/api/Login/" + email + "S");
            //}
            userId = email;
            responseMessage = await ListFunc.GetStorageOnStart(email);

            StateHasChanged();
        }

    }

    async Task GetLocalSession()
    {
        email = await localStorage.GetItemAsync<string>("Email");
    }
}

@page "/storage"

@using BBCollection.BBObjects;
@using BBCollection.DBConncetion;
@using Newtonsoft.Json;
@using FrontEnd2.Data;


@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage


<h1>My fridge</h1>

@if (email != null)
{
    @if (ListFunc.CombinedList == null)
    {
        <p>
            <em>Your fridge is empty</em>
        </p>
    }
    else
    {
    @* Storage table *@
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-12">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th style="width:30%">Product</th>
                            <th style="width:20%">Amount</th>
                            <th style="width:20%">Amount remaining</th>
                            <th style="width:10%">Date added</th>
                            <th style="width:10%">Delete</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var items in ListFunc.CombinedList)
                        {
                            <tr>
                                <td data-th="Product">@items._productName</td>
                                <td data-th="Amount">
                                    <input type="number" id="number" value="@items._amountleft" />
                                    @items._amount
                                </td>
                                <td data-th="Amount remaining">
                                    <div class="btn-group show-on-hover">
                                        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                                            @items._state <span class="caret"></span>
                                        </button>
                                        <ul class="dropdown-menu" role="menu">
                                            @foreach (var State in ItemState)
                                            {
                                                <li><button class="btn btn-block bg-light dropdownListStrorage rounded-0" @onclick="(() => ChangeItemState(items, State))">@State</button></li>
                                            }
                                        </ul>
                                    </div>
                                </td>
                                <td data-th="Date added">@items._timeAdded</td>
                                <td data-th="Delete">
                                    <div>
                                        <button class="btn btn-danger btn-sm" title="Delete one @items._productName from storage" @onclick="(() => ChangeItemAmout(items))"><i class="oi oi-trash"></i></button>
                                        @if (items._amountleft > 1)
                                        {
                                            <button class="btn btn-danger btn-sm" title="Delete all @items._amountleft @items._productName from storage" @onclick="(() => DeleteItem(items))"><i class="oi oi-trash"></i>(All)</button>
                                        }
                                        else
                                        {
                                            <button disabled class="btn btn-danger btn-sm invisibleBtn" ><i class="oi oi-trash"></i>(All)</button>

                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        @* Buttons *@
        <div class="row">

            @*<div class="col-sm-4 of">
                <button class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() =>ListFunc.AddFuncList())">Save storage</button>
            </div>*@
            <div class="col-sm-4">
                <button class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() => ListFunc.DeleteStorage())">Delete storage</button>
            </div>
            <div class="col-sm-4">
                <button class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() => FindRecipies())">Empty my Fridge</button>
            </div>
        </div>
    </div>

    @* Recipe display *@
    <div class="container-fluid top-margin">
        @if (recpies == null)
        {
            <p>Sorry, you dont have enough products</p>
        }
    <div class="row">
        <div class="col-3">
            @if (viewTitle == true)
            {
                <h3> You can make the following </h3>
                <button class="close float-left" @onclick="(() => closeRecipies())"><i class="oi oi-x"></i> </button>
                <ul class="recipeListDisplay">
                    @foreach (var rep in recpies)
                    {
                        <li class="no-bullets"> <button type="button" class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() => retriveInfo(rep._recipie._recipeID))"> @rep._recipie._Name </button> </li>
                    }
                </ul>
            }
        </div>
        @if (viewIngredients == true)
        {
            <div class="col-2 offset-2">

                <table class="table-bordered ingredientsTable">
                    <colgroup>
                        <col style="width: 100px" />
                        <col style="width: 150px" />
                    </colgroup>
                    <thead>
                        <tr>
                            <th> Amount </th>
                            <th> Name </th>
                        </tr>
                    </thead>
                    <tbody>
                        @(found = true)
                        @foreach (WeightedRecipies w in recpies)
                        {
                            if (w._recipie._recipeID == ID)
                            {

                                @if (found == true)
                                {
                                    @foreach (Ingredient I in w._recipie._ingredientList)
                                    {
                                        matchFound();
                                        <tr>
                                            <td>
                                                @I._amount @I._unit
                                            </td>

                                            @if (compareIngredientsWtihRefs(I, w.custmomRef))
                                            {
                                                <td style="background-color:green">@I._ingredientName</td>
                                            }

                                            else
                                            {
                                                <td style="background-color:red"> @I._ingredientName</td>

                                            }
                                        </tr>
                                    }
                                }
                            }


                        }
                        <tr>
                            <td colspan="2" class="text-sm-center">
                                <div class="valueClass text-center">
                                    <div class="value-button" id="increase" @onclick="(() => decrementRecipeAmount())" value="Increase @value"> - </div>
                                    <input type="number" id="number" value="@recipePerPerson" />
                                    <div class="value-button" id="decrease" @onclick="(() => incrementRecipeAmount())" value="Decrease @value"> + </div>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="col-4">
                <h3> @recipeName </h3>
                <p> @recipeDescription </p>
            </div>
        }
        </div>
    </div>
    }
}
else
{
        <p>You need to be logged in to see your storage</p>
}

@code{
    ConnectionSettings connectionSettings = new ConnectionSettings();

    #region Fields
    string email, userId, recipeDescription, recipeName;
    int ID;

    float recipePerPerson;

    int value;
    int x;


    bool found = true;
    bool viewTitle = false;
    bool viewIngredients = false;

    ShoppinlistFunctionality ListFunc = new ShoppinlistFunctionality("api/Storage");
    HttpResponseMessage responseMessage = new HttpResponseMessage();


    List<float> recipeAmount = new List<float>();
    List<Ingredient> ingredients = new List<Ingredient>();
    List<WeightedRecipies> recpies = new List<WeightedRecipies>();
    List<Recipe> _recpies = new List<Recipe>();
    List<string> ItemState = new List<string>() { "Full", "Almost Full", "Half Full", "Almost Empty" };

    private delegate bool compareWR(WeightedRecipies r1, WeightedRecipies r2);
    #endregion

    #region StorageMethods


    /// <summary>
    /// The state of an item is changed.
    /// </summary>
    /// <param name="item">The item of which the state shouold be changes</param>
    /// <param name="state">The state to chaneg to</param>
    public async void ChangeItemState(Product item, string state)
    {
        // Finds the index of the input item
        int index = FindIdex(item);
        item._state = state;

        // Change the state in the storage list
        await ListFunc.ChangeItemInStorage(ListFunc.CombinedList[index]);
    }

    public int FindIdex(Product item)
    {
        // Returns the index of the input item
        return ListFunc.CombinedList.FindIndex(ind => ind.Equals(item));
    }

    public void DeleteItem(Product item)
    {
        // The amountleft is set to 1, and ChangeItemAmout is called, removing items where only 1 remains.
        item._amountleft = 1;
        ChangeItemAmout(item);
    }


    /// <summary>
    /// This method changes the amount of an item.
    /// If there is only one left, it is deleted.
    /// Else the amount left is decremented.
    /// </summary>
    /// <param name="item"></param>
    public async void ChangeItemAmout(Product item)
    {
        int index = FindIdex(item);
        int left = ListFunc.CombinedList[index]._amountleft;

        if (left == 1)
        {
            ListFunc.CombinedList.RemoveAt(index);

        }
        item._amountleft--;

        await ListFunc.ChangeItemInStorage(item);
    }
    #endregion

    #region OnInit_async_Method

    /// <summary>
    /// If it is the first render, the email is requested form the local storage.
    /// From this email, the storage from the user will be requested from the api.
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetLocalSession();

            if (email != null)
            {
                responseMessage = await ListFunc.GetStorageOnStart(email);
            }

            StateHasChanged();
        }

    }

    async Task GetLocalSession()
    {
        // The email is requested fomr localstorage
        email = await localStorage.GetItemAsync<string>("Email");
    }
    #endregion

    #region Recipe_Display_Methods
    void matchNotFound()
    {
        found = true;
    }

    void matchFound()
    {
        found = false;
    }

    void clear()
    {
        ingredients.Clear();
        recipeAmount.Clear();
    }

    void closeRecipies()
    {
        viewTitle = false;
        viewIngredients = false;
    }

    void retriveInfo(int ID)
    {
        Recipe show = _recpies.First(x => x._recipeID == ID);
        this.ID = ID;
        recipeDescription = show._description;
        recipeName = show._Name;
        recipePerPerson = show._PerPerson;

        found = true;
        if (show._ingredientList == null)
        {
            foreach (var item in show._ingredientList)
            {
                ingredients.Add(item);
                recipeAmount.Add(item._amount);
            }
        }
        else
        {
            clear();
            foreach (var item in show._ingredientList)
            {
                x++;
                ingredients.Add(item);
                recipeAmount.Add(item._amount);
            }
        }
        viewIngredients = true;
        //viewAddToshoppinglist = true;
    }

    void incrementRecipeAmount()
    {
        for (int i = 0; i < recipeAmount.Count; i++)
        {
            found = true;
            if (recipeAmount[i] != 0)
            {
                recipeAmount[i] = (recipeAmount[i] / recipePerPerson) * (recipePerPerson + 1F);
                value++;
            }
        }
        recipePerPerson += 1;
    }


    void decrementRecipeAmount()
    {
        if (recipePerPerson >= 2)
        {
            for (int i = 0; i < recipeAmount.Count; i++)
            {
                found = true;
                if (recipeAmount[i] != 0)
                {
                    recipeAmount[i] = (recipeAmount[i] / recipePerPerson) * (recipePerPerson - 1F);
                    value--;
                }
            }
            recipePerPerson -= 1;
        }
    }
    #endregion

    #region empty fridge

    private async Task FindRecipies()
    {
        List<Recipe> allRecepies = await getRecepies();
        List<Product> productsInStorage = ListFunc.CombinedList;
        List<Recipe> relevantRecepies = GetRelevantRecpies(allRecepies,productsInStorage);
        List<WeightedRecipies> weightedRecipies = GeneratWeighted(relevantRecepies, productsInStorage);

        recpies = weightedRecipies;

        recpies = recpies.OrderByDescending(x => x.pMatch).ToList();

        viewTitle = true;
    }

    private async Task<List<Recipe>> getRecepies()
    {
        _recpies = JsonConvert.DeserializeObject<List<Recipe>>(await Http.GetStringAsync("https://localhost:44325/api/recipe?recipeTitle=" + " "));
        List<Recipe> recepies = _recpies;
        return recepies;
    }

    private List<Recipe> GetRelevantRecpies(List<Recipe> allRecepies, List<Product> productsInStorage)
    {
        List<List<string>> productRefs = GetAllProductRefs(productsInStorage);
        List<Recipe> recipes = new List<Recipe>();
        foreach (Recipe r in allRecepies)
        {
            foreach (Ingredient I in r._ingredientList)
            {
                foreach (List<string> sList in productRefs)
                {
                    foreach (string s in sList)
                    {
                        if (I._ingredientName.Contains(s))
                        {
                            recipes.Add(r);
                            goto end;
                        }
                    }
                }
            }
        end:;
        }
        return recipes;
    }

    private List<WeightedRecipies> GeneratWeighted(List<Recipe> relevantRecepies, List<Product> productsInStorage)
    {
        List<List<string>> allRefs = GetAllProductRefs(productsInStorage);
        List<WeightedRecipies> weightedRecipies = new List<WeightedRecipies>();

        foreach (Recipe r in relevantRecepies)
        {
            weightedRecipies.Add(new WeightedRecipies(r));
        }

        foreach(WeightedRecipies w in weightedRecipies)
        {
            foreach (Ingredient I in w._recipie._ingredientList)
            {
                foreach (List<string> sList in allRefs)
                {
                    foreach (string s in sList)
                    {
                        if (I._ingredientName.Contains(s))
                        {
                            w.MatchFound(I,s);
                        }
                    }
                }
            }
            w.calculateP();
        }
        //weightedRecipies.ForEach(x => x.uniqeIngrdients(x.matchingIngrdient));

        return weightedRecipies;
    }

    private List<List<string>> GetAllProductRefs(List<Product> products)
    {
        List<List<string>> allRefs = new List<List<string>>();
        foreach (Product p in products)
        {
            allRefs.Add(GetCustomRefrences(p));
        }
        return allRefs;
    }

    private List<string> GetCustomRefrences(Product product)
    {
        List<string> ProductRefrence = product._CustomReferenceField.Split(",").ToList();
        List<string> returnList = new List<string>();

        foreach (string s in ProductRefrence)
        {
            if (!(s.Length < 2) && !string.IsNullOrWhiteSpace(s))
            {
                returnList.Add(s);
            }
        }
        return returnList;
    }

    private bool compareIngredientsWtihRefs(Ingredient ingredient,List<string> refs)
    {
        foreach (string _ref in refs)
        {
            if (ingredient._ingredientName.Contains(_ref))
            {
                return true;
            }
        }
        return false;
    }
    #endregion
}

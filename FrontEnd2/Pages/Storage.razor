@page "/storage"

@using BBCollection.BBObjects;
@using BBCollection.DBConncetion;
@using Newtonsoft.Json;
@using FrontEnd2.Data;


@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage


<h1>My fridge</h1>

@if (email != null)
{
    @if (ListFunc.CombinedList == null)
    {
        <p>
            <em>Your fridge is empty</em>
        </p>
    }
    else
    {
    @* Storage table *@
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-12">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th style="width:30%">Product</th>
                            <th style="width:20%">Amount</th>
                            <th style="width:20%">Amount remaining</th>
                            <th style="width:10%">Date added</th>
                            <th style="width:10%">Delete</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var items in ListFunc.CombinedList)
                        {
                            <tr>
                                <td data-th="Product">@items._productName</td>
                                <td data-th="Amount">
                                    <input type="number" id="number" value="@items._amountleft" />
                                    @items._amount
                                </td>
                                <td data-th="Amount remaining">
                                    <div class="btn-group show-on-hover">
                                        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                                            @items._state <span class="caret"></span>
                                        </button>
                                        <ul class="dropdown-menu" role="menu">
                                            @foreach (var State in ItemState)
                                            {
                                                <li><button class="btn btn-block bg-light dropdownListStrorage rounded-0" @onclick="(() => ChangeItemState(items, State))">@State</button></li>
                                            }
                                        </ul>
                                    </div>
                                </td>
                                <td data-th="Date added">@items._timeAdded</td>
                                <td data-th="Delete">
                                    <div>
                                        <button class="btn btn-danger btn-sm" title="Delete one @items._productName from storage" @onclick="(() => ChangeItemAmout(items))"><i class="oi oi-trash"></i></button>
                                        @if (items._amountleft > 1)
                                        {
                                            <button class="btn btn-danger btn-sm" title="Delete all @items._amountleft @items._productName from storage" @onclick="(() => DeleteItem(items))"><i class="oi oi-trash"></i>(All)</button>
                                        }
                                        else
                                        {
                                            <button disabled class="btn btn-danger btn-sm invisibleBtn" ><i class="oi oi-trash"></i>(All)</button>

                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        @* Buttons *@
        <div class="row">

            @*<div class="col-sm-4 of">
                <button class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() =>ListFunc.AddFuncList())">Save storage</button>
            </div>*@
            <div class="col-sm-4">
                <button class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() =>ListFunc.DeleteFuncList())">Delete storage</button>
            </div>
            <div class="col-sm-4">
                <button class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() => Search())">Empty my Fridge</button>
            </div>
        </div>
    </div>

    @* Recipe display *@
    <div class="container-fluid top-margin">
        @if (recpies == null)
        {
            <p>Sorry, you dont have enough products</p>
        }
    <div class="row">
        <div class="col-3">
            @if (viewTitle == true)
            {
                <h3> You can make the following </h3>
                <button class="close float-left" @onclick="(() => closeRecipies())"><i class="oi oi-x"></i> </button>
                <ul class="recipeListDisplay">
                    @foreach (var rep in recpies)
                    {
                        <li class="no-bullets"> <button type="button" class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() => retriveInfo(rep._recipie._recipeID))"> @rep._recipie._Name </button> </li>
                    }
                </ul>
            }
        </div>
        @if (viewIngredients == true)
        {
            <div class="col-2 offset-2">

                <table class="table-bordered ingredientsTable">
                    <colgroup>
                        <col style="width: 100px" />
                        <col style="width: 150px" />
                    </colgroup>
                    <thead>
                        <tr>
                            <th> Amount </th>
                            <th> Name </th>
                        </tr>
                    </thead>
                    <tbody>
                        @(found = true)
                        @foreach (WeightedRecipies rep in recpies)
                        {
                            @if (found == true)
                            {
                                @foreach (Product match in rep.products)
                                {
                                    @for (int i = 0; i < ingredients.Count; i++)
                                    {
                                        matchFound();
                                        <tr>
                                            <td>
                                                @recipeAmount[i] @ingredients[i]._unit
                                            </td>

                                            @if (ingredients[i]._ingredientName.Contains(match._productName))
                                            {
                                                <td style="background-color:green">@ingredients[i]._ingredientName</td>
                                            }

                                            else
                                            {
                                                <td style="background-color:red"> @ingredients[i]._ingredientName</td>
                                            }
                                        </tr>
                                    }
                                }
                            }

                        }
                        <tr>
                            <td colspan="2" class="text-sm-center">
                                <div class="valueClass text-center">
                                    <div class="value-button" id="increase" @onclick="(() => decrementRecipeAmount())" value="Increase @value"> - </div>
                                    <input type="number" id="number" value="@recipePerPerson" />
                                    <div class="value-button" id="decrease" @onclick="(() => incrementRecipeAmount())" value="Decrease @value"> + </div>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="col-4">
                <h3> @recipeName </h3>
                <p> @recipeDescription </p>
            </div>
          }
        </div>
    </div>
    }
 }
    else
    {
        <p>You need to be logged in to see your storage</p>
    }


@code{
    ConnectionSettings connectionSettings = new ConnectionSettings();
    #region Fields
    string productString, newProduct, _headingText, email, userId, testvalue, recipeDescription, recipeName;

    float recipePerPerson;

    int value;
    int x;

    bool found = true;
    bool viewTitle = false;
    bool viewIngredients = false;

    ShoppinlistFunctionality ListFunc = new ShoppinlistFunctionality("api/Storage");
    HttpResponseMessage responseMessage = new HttpResponseMessage();


    List<float> recipeAmount = new List<float>();
    List<Ingredient> ingredients = new List<Ingredient>();
    List<WeightedRecipies> recpies = new List<WeightedRecipies>();
    List<Recipe> _recpies = new List<Recipe>();
    List<string> ItemState = new List<string>() { "Full", "Almost Full", "Half Full", "Almost Empty" };

    private delegate bool compareWR(WeightedRecipies r1, WeightedRecipies r2);
    #endregion

    #region Storage_Methods
    //Storage functionalities

    public async void ChangeItemState(Product item, string state)
    {
        int index = FindIdex(item);
        item._state = state;

        await ListFunc.ChangeItem(ListFunc.CombinedList[index]);
    }

    public int FindIdex(Product item)
    {
        return ListFunc.CombinedList.FindIndex(ind => ind.Equals(item));
    }

    public void DeleteItem(Product item)
    {
        item._amountleft = 1;
        ChangeItemAmout(item);
    }

    public async void ChangeItemAmout(Product item)
    {
        int index = FindIdex(item);
        int left = ListFunc.CombinedList[index]._amountleft;

        if (left == 1)
        {
            ListFunc.CombinedList.RemoveAt(index);

        }
        item._amountleft--;

        await ListFunc.ChangeItem(item);

    }

    private async void AddProduct()
    {
        if (newProduct != null)
        {
            Product newItem = new Product()
            {
                _productName = newProduct,
                _amount = "",
                _state = "Full",
                _id = "2000000000045000",
                _amountleft = 1,
                _timeAdded = DateTime.Now.ToString()
            };

            newProduct = string.Empty;

            ListFunc.itemList.Add(newItem);
            //responseMessage = await ListFunc.AddProductItem(newItem, userId);
        }

    }
    #endregion

    #region OnInit_async_Method
    // On start up

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetLocalSession();
            localStorage.Changed += (sender, e) =>
            {
                Console.WriteLine($"Value for key {e.Key} changed from {e.OldValue} to {e.NewValue}");
            };

            //if (email != null)
            //{
            //    gottenData = await Http.GetStringAsync(connectionSettings.GetApiLink() + "api/Login/" + email + "S");
            //}
            userId = email;
            if(email != null)
            {
                responseMessage = await ListFunc.GetStorageOnStart(email);
            }


            StateHasChanged();
        }

    }

    async Task GetLocalSession()
    {
        email = await localStorage.GetItemAsync<string>("Email");
    }
    #endregion

    #region Recipe_Display_Methods
    void matchNotFound()
    {
        found = true;
    }

    void matchFound()
    {
        found = false;
    }

    void clear()
    {
        ingredients.Clear();
        recipeAmount.Clear();
    }

    void closeRecipies()
    {
        viewTitle = false;
        viewIngredients = false;
    }

    void retriveInfo(int ID)
    {
        Recipe show = _recpies.First(x => x._recipeID == ID);
        recipeDescription = show._description;
        recipeName = show._Name;
        recipePerPerson = show._PerPerson;

        found = true;
        if (show._ingredientList == null)
        {
            foreach (var item in show._ingredientList)
            {
                ingredients.Add(item);
                recipeAmount.Add(item._amount);
            }
        }
        else
        {
            clear();
            foreach (var item in show._ingredientList)
            {
                x++;
                ingredients.Add(item);
                recipeAmount.Add(item._amount);
            }
        }
        viewIngredients = true;
        //viewAddToshoppinglist = true;
    }

    void incrementRecipeAmount()
    {
        for (int i = 0; i < recipeAmount.Count; i++)
        {
            found = true;
            if (recipeAmount[i] != 0)
            {
                recipeAmount[i] = (recipeAmount[i] / recipePerPerson) * (recipePerPerson + 1F);
                value++;
            }
        }
        recipePerPerson += 1;
    }


    void decrementRecipeAmount()
    {
        if (recipePerPerson >= 2)
        {
            for (int i = 0; i < recipeAmount.Count; i++)
            {
                found = true;
                if (recipeAmount[i] != 0)
                {
                    recipeAmount[i] = (recipeAmount[i] / recipePerPerson) * (recipePerPerson - 1F);
                    value--;
                }
            }
            recipePerPerson -= 1;
        }
    }
    #endregion

    #region EmptyFridge_Methods


    private async Task<List<WeightedRecipies>> FindValidRecipies()
    {
        List<Recipe> ValidRecipies = new List<Recipe>();
        bool breakFlag;
        List<Product> storageInventory = ListFunc.CombinedList;
        foreach (Recipe r in _recpies)
        {
            breakFlag = false;
            //foreach (Product p in storageInventory)
            foreach (Product p in storageInventory)
            {
                foreach (Ingredient i in r._ingredientList)
                {
                    if (compareIngrdientAndProduct(i, p))//kan godt være man bliver nødtil at lave en eller anden form for kryds referance
                    {
                        ValidRecipies.Add(r);
                        breakFlag = true;
                        break;
                    }
                }
                if (breakFlag)
                {
                    break;
                }
            }

        }

        return GenerateWeightedRecepies(ValidRecipies, storageInventory); ;
    }

    private List<WeightedRecipies> GenerateWeightedRecepies(List<Recipe> recipes, List<Product> storageInventory)
    {
        List<WeightedRecipies> returnRecipies = new List<WeightedRecipies>();
        foreach (Recipe r in recipes)
        {
            returnRecipies.Add(new WeightedRecipies(r));
        }

        foreach (WeightedRecipies w in returnRecipies)
        {
            //foreach (Product p in storageInventory)
            foreach (Product p in storageInventory)
            {
                foreach (Ingredient i in w._recipie._ingredientList)
                {
                    if (compareIngrdientAndProduct(i, p))
                    {
                        w.MatchFound(i,p);
                    }
                }

            }
        }
        return returnRecipies;
    }

    private bool compareIngrdientAndProduct(Ingredient ingrdient, Product product)
    {
        List<String> searchterms = GetRefrencesFromCustomField(product._CustomReferenceField);
        foreach (string s in searchterms)
        {
            if (ingrdient._ingredientName.Contains(s))
            {
                return true;
            }
        }
        return false;
    }

    private List<string> GetRefrencesFromCustomField(string customfield)
    {
        return customfield.Split(",").ToList();
    }

    protected async Task Search()
    {
        string printRecipe;

        printRecipe = await Http.GetStringAsync("api/recipe?recipeTitle=" + " ");
        _recpies = JsonConvert.DeserializeObject<List<Recipe>>(printRecipe);

        //recpies = Sort(FindValidRecipies(ListFunc.itemList).Result, test1);
        recpies = FindValidRecipies().Result;
        foreach (WeightedRecipies wr in recpies)
        {
            testvalue = testvalue + wr._recipie._Name + " ? ";
        }
        viewTitle = true;
    }
    #endregion
}

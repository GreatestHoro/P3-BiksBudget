@page "/Register"
@using BBCollection.BBObjects;
@using BBCollection.DBConncetion;
@using Newtonsoft.Json;
@using  System.Text;
@using FrontEnd2.Data;
@using System.Diagnostics;
@using FrontEnd2.Authentication;
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage


@if (email == null)
{
    //sæt dem under hinanden
    <h1>Register</h1>
    @*<input class="SearchField SearchBar" placeholder="Username" @bind="@tempEmail" />
    <input class="SearchField SearchBar" type="password" placeholder="Password" @bind="@password" />
    <input class="SearchField SearchBar" type="password" placeholder="Repeat" @bind="@repPassword" />
    <button class="btn btn-rounded btn-outline-success" @onclick="CheckInputs">Register</button>
    <label>@verificationText</label>*@
    <div class="d-flex flex-column bd-highlight mb-3">
        <div class="p-2">
            <input class="SearchField SearchBar" placeholder="Username" @bind="@tempEmail" />
        </div>
        <div class="p-2">
            <input class="SearchField SearchBar" type="password" placeholder="Password" @bind="@password" />
        </div>
        <div class="p-2">
            <input class="SearchField SearchBar" type="password" placeholder="Repeat password" @bind="@repPassword" />
        </div>
        <div class="p-2">
            <button class="btn btn-rounded btn-outline-success" @onclick="CheckInputs">Register</button>
        </div>
    </div>
    <label>@verificationText</label>
}
else
{
}

@code {
    private string email;
    private string tempEmail;
    private string password;
    private string repPassword;
    private string userString;
    private string verificationText = "";
    ConnectionSettings connectionSettings = new ConnectionSettings();

    ////protected async override Task OnInitializedAsync()
    //protected async void doStuff()
    //{
    //    if (email != null)
    //    {
    //        gottenData = await Http.GetStringAsync(connectionSettings.GetApiLink() + "api/Login/" + email);
    //    }
    //}

    protected void CheckInputs()
    {
        Verification verify = new Verification();

        Tuple<bool, string> usernameCheck = verify.VerifyUsername(tempEmail);
        Tuple<bool, string> passwordCheck = verify.VerifyPassword(password, repPassword);

        if (!usernameCheck.Item1)
        {
            verificationText = usernameCheck.Item2;
        }
        else if (!passwordCheck.Item1)
        {
            verificationText = passwordCheck.Item2;
        }

        if (usernameCheck.Item1 && passwordCheck.Item1)
        {
            RegisterUser(tempEmail);
        }
    }

    protected async void RegisterUser(string addEmail)
    {
        var response = new HttpResponseMessage();

        User user = new User(addEmail, password);

        List<Product> shoppingList = new List<Product>();
        Product[] shoppinglistArray = new Product[10];

        string ShopString = JsonConvert.SerializeObject(shoppingList);

        userString = JsonConvert.SerializeObject(user);

        var content = new StringContent(userString, Encoding.UTF8, "application/json");

        response = await Http.PostAsync(connectionSettings.GetApiLink() + "User/Register", content);

        if (response.IsSuccessStatusCode)
        {

            await localStorage.SetItemAsync("Email", addEmail);
            await localStorage.SetItemAsync("Shoppinglist", shoppingList);
            await localStorage.SetItemAsync("ProductString", ShopString);
            StateHasChanged();
            NavigationManager.NavigateTo("shoppinglist");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetLocalSession();

            if (email != null)
            {
                NavigationManager.NavigateTo("");

            }

            StateHasChanged();
        }

    }



    async Task GetLocalSession()
    {
        email = await localStorage.GetItemAsync<string>("Email");
    }


}
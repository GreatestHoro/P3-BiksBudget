@page "/Register"

@using BBCollection.BBObjects;
@using BBCollection.DBConncetion;
@using BBCollection.DBHandling;
@using  System.Text;
@using FrontEnd2.Authentication;
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<Row Class="justify-content-center">
    <Column ColumnSize="ColumnSize.IsAuto">
        <Card Margin="Margin.Is2.OnY">
            <CardHeader>
                <CardSubtitle Class="text-center">Create Account</CardSubtitle>
            </CardHeader>
            <CardBody>
                <Validations @ref="validations" Mode="ValidationMode.Manual">
                    <Field IsHorizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.Is12" Class="text-left">Username</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is12">
                            <Validation Validator="@ValidateUsername">
                                <Tooltip IsMultiline="true" Text="Please use 6 or more characters.
                                                                  Please refrain from using a 'space'.
                                                                  Please refrain from using symbols."
                                         Placement="Placement.Top">
                                    <TextEdit Placeholder="Username" @bind-Text="@username" @onkeyup="OnKeyPress">
                                        <Feedback>
                                            <ValidationError>@checkUsername.Item2</ValidationError>
                                        </Feedback>
                                    </TextEdit>
                                </Tooltip>
                            </Validation>
                        </FieldBody>
                    </Field>
                    <Field IsHorizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.Is12" Class="text-left">Password</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is12">
                            <Validation Validator="@ValidatePassword">
                                <Tooltip IsMultiline="true" Text="Please use 6 or more characters.
                                                                      Please refrain from using a 'space'.
                                                                      Please refrain from using symbols (æ,ø,å is also considered a symbol)"
                                         Placement="Placement.Top   ">
                                    <TextEdit Role="TextRole.Password" Placeholder="Enter Password" @bind-Text="@password" @onkeyup="OnKeyPress">
                                        <Feedback>
                                            <ValidationError>@checkPassword.Item2</ValidationError>
                                        </Feedback>
                                    </TextEdit>
                                </Tooltip>
                            </Validation>
                        </FieldBody>
                    </Field>
                    <Field IsHorizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.Is12" Class="text-left">Re Password</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is12">
                            <Validation Validator="@ValidateRepPassword">
                                <TextEdit Role="TextRole.Password" Placeholder="Re-enter password" @bind-Text="@repPassword" @onkeyup="OnKeyPress">
                                    <Feedback>
                                        <ValidationError>@checkRepPassword.Item2</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </FieldBody>
                    </Field>
                    <Field IsHorizontal="true" JustifyContent="JustifyContent.End">
                        <FieldLabel ColumnSize="ColumnSize.Is2"></FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is12" Class="text-center">
                            <Validation Validator="@ValidateTermsAndConditions">
                                <CheckEdit>
                                    <ChildContent>
                                        Accept terms and conditions.
                                        <Button Size="ButtonSize.Small" Clicked="@(()=>showTermsModal( ModalSize.Default, 30, true ))" Color="Color.Link">@readTerms</Button>
                                    </ChildContent>
                                    <Feedback>
                                        <ValidationError>You have to read accept Terms and Conditoins</ValidationError>
                                    </Feedback>
                                </CheckEdit>
                            </Validation>
                        </FieldBody>
                    </Field>
                    <Field IsHorizontal="true" JustifyContent="JustifyContent.End">
                        <FieldLabel ColumnSize="ColumnSize.IsFull"></FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull">
                            <Button IsBlock="true" Color="Color.Success" Clicked="@RegisterAccount" IsLoading="@isLoading"><i class="oi oi-person"></i> Register</Button>
                        </FieldBody>
                    </Field>
                    <Field IsHorizontal="true" JustifyContent="JustifyContent.End" Class="text-center">
                        <Button IsBlock="true" Size="ButtonSize.Small" Color="Color.Link" Clicked="SendToLogin"> Have an account? Log in here!</Button>
                    </Field>
                </Validations>
            </CardBody>
        </Card>
    </Column>
</Row>

<Accordion>
    <Modal @ref="termsAndConditions">
        <ModalBackdrop />
        <ModalContent Size="@modalSize" IsCentered="@isCentered">
            <ModalHeader>
                <ModalTitle>
                    <Icon Name="@(FontAwesomeIcons.BalanceScaleLeft)" />
                    Terms and Conditions
                </ModalTitle>
                <CloseButton Clicked="@hideModal" />
            </ModalHeader>
            <ModalBody MaxHeight="@maxHeight">
                <p>
                    <font size="+2"> <b>Terms and conditions</b></font><br /><br />
                    <i>Last updated: December 13, 2019</i><br /><br />
                    Please read these Terms and Conditions carefully before using the application BiksBudget.<br /><br />
                    Your access to and use of the service is conditioned on your own acceptance of and compliance with these Terms.<br /><br />
                    By accessing or using the service you agree to be bound by these Terms. If you disagree with any part of the terms then you may not access the service.<br /><br /><br />

                    <b>Accounts</b> <br /><br />
                    When you create an account with us, you must provide us information that is accurate, complete, and current at all times.
                    Failure to do so constitutes a breach of the terms, which may result in immediate termination of your account on our Service.<br /><br />
                    You are responsible for safeguarding the password that you use to access the Service and for any activities or actions under your password, whether your password is with our Service or a third-party service.<br /><br />
                    You agree not to disclose your password to any third-party. You must notify us immediately upon becoming aware of any breach of security or unauthorized use of your account.<br /><br />
                    By creating an account with us, you agree that we save information about your grocery shopping.<br /><br /><br />

                    <b>Changes</b><br /><br />
                    We reverse the right, at our sole discretion, to modify or replace these Terms at any time. If a revision is material we will try to provide at least 30 days notice prior to ant new terms taking effect. What constitutes a material change will be determined at our sole discretion. <br /><br />
                    By continuing to access or use our service after those revisions become effective, you agree to be bound by the revised terms. If you do no agree to the new terms, please stop using the service.<br /><br /><br />

                    <b>Contact us</b><br /><br />
                    If you have any questions about these Terms, please contact us.
                </p>
            </ModalBody>
            <ModalFooter>
                <Button IsBlock="true" Color="Color.Secondary" IsOutline="true" Clicked="@hideModal">Close</Button>
            </ModalFooter>
        </ModalContent>
        <ModalBackdrop />
    </Modal>
</Accordion>

@code {
    bool isLoading = false;
    bool goodPassword = false;
    bool goodRePassword = false;
    bool goodUsername = false;
    bool isAccepted = false;
    bool termsRead = true;

    private Modal termsAndConditions;

    Verification verification = new Verification();
    ConnectionSettings connectionSettings = new ConnectionSettings();
    LoginRegister acount = new LoginRegister();
    Validations validations;

    Validations annotationsValidations;

    Tuple<bool, string> checkPassword;
    Tuple<bool, string> checkRepPassword;
    Tuple<bool, string> checkUsername;

    string password;
    string repPassword;
    string username;
    string verifiedUsername;
    string email;
    string readTerms = "Click here to read";

    bool isCentered;
    ModalSize modalSize;
    int? maxHeight;

    private void showModal()
    {
        termsAndConditions.Show();
    }

    private void showTermsModal(ModalSize modalSize, int? maxHeight = null, bool isCentered = false)
    {
        this.isCentered = isCentered;
        this.modalSize = modalSize;
        this.maxHeight = maxHeight;

        termsAndConditions.Show();
    }

    private void hideModal()
    {
        termsAndConditions.Hide();
    }

    public void SendToLogin()
    {
        NavigationManager.NavigateTo("Login");
    }

    void ValidatePassword(ValidatorEventArgs e)
    {
        password = e.Value.ToString();

        checkPassword = verification.VerifyPassword(password);

        if (checkPassword.Item1 == true)
        {
            e.Status = ValidationStatus.Success;
        }
        else
        {
            e.Status = ValidationStatus.Error;
        }
    }

    void ValidateTermsAndConditions(ValidatorEventArgs e)
    {
        e.Status = Convert.ToBoolean(e.Value) ? ValidationStatus.Success : ValidationStatus.Error;
    }

    void ValidateRepPassword(ValidatorEventArgs e)
    {
        repPassword = e.Value.ToString();

        checkRepPassword = verification.VerifyRepPassword(password, repPassword);

        if (checkPassword.Item1 == true)
        {
            e.Status = ValidationStatus.Success;
        }
        else
        {
            e.Status = ValidationStatus.Error;
        }
    }

    void ValidateUsername(ValidatorEventArgs e)
    {
        username = e.Value.ToString();

        checkUsername = verification.VerifyUsername(username, verifiedUsername);

        if (checkUsername.Item1 == true)
        {
            e.Status = ValidationStatus.Success;
        }
        else
        {
            e.Status = ValidationStatus.Error;
        }
    }

    async Task RegisterAccount()
    {
        isLoading = true;
        if (!String.IsNullOrEmpty(username) && !String.IsNullOrEmpty(password) && !String.IsNullOrEmpty(repPassword))
        {
            validations.ClearAll();

            if (validations.ValidateAll())
            {
                await RegisterUser(username);
            }
        }
        isLoading = false;
    }

    async Task GetLocalSession()
    {
        email = await localStorage.GetItemAsync<string>("Email");
    }

    private async void OnKeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await RegisterAccount();
        }
    }

    protected async Task RegisterUser(string addEmail)
    {
        var response = new HttpResponseMessage();

        User user = new User(addEmail, password);

        List<Product> shoppingList = new List<Product>();

        response = await acount.Register(user);

        if (response.IsSuccessStatusCode)
        {
            await SetupWhenRegistered(addEmail);
            NavigationManager.NavigateTo("shoppinglist");
            validations.ClearAll();
        }
        else
        {
            verifiedUsername = username;

            if (validations.ValidateAll())
            {
                validations.ClearAll();
            }
        }
    }

    public async Task SetupWhenRegistered(string email)
    {
        await localStorage.RemoveItemAsync("Email");
        await localStorage.RemoveItemAsync("ProductString");
        await localStorage.SetItemAsync("Email", email);
    }
}
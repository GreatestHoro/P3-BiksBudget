@page "/Register"

@using BBCollection.BBObjects;
@using BBCollection.DBConncetion;
@using BBCollection.DBHandling;
@using Newtonsoft.Json;
@using  System.Text;
@using FrontEnd2.Data;
@using System.Diagnostics;
@using FrontEnd2.Authentication;
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<Row Class="justify-content-center">
    <Column ColumnSize="ColumnSize.IsAuto">
        <Card Margin="Margin.Is2.OnY">
            <CardHeader>
                <CardSubtitle Class="text-center">Create Account</CardSubtitle>
            </CardHeader>
            <CardBody>
                <Validations @ref="validations" Mode="ValidationMode.Manual">
                    <Field IsHorizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.Is12" Class="text-left">Username</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is12">
                            <Validation Validator="@ValidateUsername">
                                <TextEdit Placeholder="Username" @bind-Text="@username" @onkeyup="OnKeyPress">
                                    <Feedback>
                                        <ValidationError>@checkUsername.Item2</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </FieldBody>
                    </Field>
                    <Field IsHorizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.Is12" Class="text-left">Password</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is12">
                            <Validation Validator="@ValidatePassword">
                                <TextEdit Role="TextRole.Password" Placeholder="Enter Password" @bind-Text="@password" @onkeyup="OnKeyPress">
                                    <Feedback>
                                        <ValidationError>@checkPassword.Item2</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </FieldBody>
                    </Field>
                    <Field IsHorizontal="true">
                        <FieldLabel ColumnSize="ColumnSize.Is12" Class="text-left">Re Password</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is12">
                            <Validation Validator="@ValidateRepPassword">
                                <TextEdit Role="TextRole.Password" Placeholder="Re-enter password" @bind-Text="@repPassword" @onkeyup="OnKeyPress">
                                    <Feedback>
                                        <ValidationError>@checkRepPassword.Item2</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </FieldBody>
                    </Field>
                    <Field IsHorizontal="true" JustifyContent="JustifyContent.End">
                        <FieldLabel ColumnSize="ColumnSize.IsFull"></FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.IsFull">
                            <Button IsBlock="true" Color="Color.Success" Clicked="@RegisterAccount" IsLoading="@isLoading"><i class="oi oi-person"></i> Register</Button>
                        </FieldBody>
                    </Field>
                </Validations>
            </CardBody>
        </Card>
    </Column>
</Row>
@code{
    bool isLoading = false;
    bool goodPassword = false;
    bool goodRePassword = false;
    bool goodUsername = false;

    Verification verification = new Verification();
    ConnectionSettings connectionSettings = new ConnectionSettings();
    LoginRegister acount = new LoginRegister();
    Validations validations;

    Validations annotationsValidations;

    Tuple<bool, string> checkPassword;
    Tuple<bool, string> checkRepPassword;
    Tuple<bool, string> checkUsername;

    string password;
    string repPassword;
    string username;
    string email;


    void ValidatePassword(ValidatorEventArgs e)
    {
        password = e.Value.ToString();

        checkPassword = verification.VerifyPassword(password);

        if (checkPassword.Item1 == true)
        {
            e.Status = ValidationStatus.Success;
        }
        else
        {
            e.Status = ValidationStatus.Error;
        }
    }

    void ValidateRepPassword(ValidatorEventArgs e)
    {
        repPassword = e.Value.ToString();

        checkRepPassword = verification.VerifyRepPassword(password, repPassword);

        if (checkPassword.Item1 == true)
        {
            e.Status = ValidationStatus.Success;
        }
        else
        {
            e.Status = ValidationStatus.Error;
        }
    }

    void ValidateUsername(ValidatorEventArgs e)
    {
        username = e.Value.ToString();

        checkUsername = verification.VerifyUsername(username);

        if (checkUsername.Item1 == true)
        {
            e.Status = ValidationStatus.Success;
        }
        else
        {
            e.Status = ValidationStatus.Error;
        }
    }

    async Task RegisterAccount()
    {
        isLoading = true;
        if (!String.IsNullOrEmpty(username) && !String.IsNullOrEmpty(password) && !String.IsNullOrEmpty(repPassword))
        {
            if (validations.ValidateAll())
            {
                await RegisterUser(username);
                validations.ClearAll();
            }
        }
        isLoading = false;
    }

    async Task GetLocalSession()
    {
        email = await localStorage.GetItemAsync<string>("Email");
    }

    private async void OnKeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await RegisterAccount();
        }
    }

    protected async Task RegisterUser(string addEmail)
    {
        var response = new HttpResponseMessage();

        User user = new User(addEmail, password);

        List<Product> shoppingList = new List<Product>();

        response = await acount.Register(user);

        if (response.IsSuccessStatusCode)
        {
            await SetupWhenRegistered(addEmail);
            NavigationManager.NavigateTo("shoppinglist");
        }
    }

    public async Task SetupWhenRegistered(string email)
    {
        await localStorage.RemoveItemAsync("Email");
        await localStorage.RemoveItemAsync("ProductString");
        await localStorage.SetItemAsync("Email", email);
    }
}
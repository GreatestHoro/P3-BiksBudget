@page "/recipe"

@using BBCollection.BBObjects;
@using Newtonsoft.Json;
@using FrontEnd2.Data;
@using System.Diagnostics;
@using BBGatherer.Queries;
@using B3_BiksBudget.BBGatherer.Queries;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthenticationFunctionallity uf


@inject HttpClient Http

<div class="container-fluid">
    <div class="row">
        <div class="col-sm-6 stackComponents">
            <input class="form-check-input" placeholder="Search..." @bind="searchTerm" @onkeyup="OnKeyPress" />
        </div>
        <div class="col-sm-3 stackComponents">
            <button type="button" class="btn-success" @onclick="(() => Search())"> Find recipe </button>
        </div>
        <div class="col-sm-3 stackComponents">
            <span class="text-muted">
                Showing @recipeData.Count out of 15953
            </span>
        </div>
    </div>
</div>

<div class="container-fluid top-margin">
    <div class="row">
        <div class="col-3">
            @if (viewRecipeTitle == true)
            {
                <h3> @searchTerm Recipes:</h3>
                <ul class="recipeListDisplay">
                    @foreach (var rep in recipeData)
                    {
                        <li class="no-bullets"> <button type="button" class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() => retriveInfo(rep._recipeID))"> @rep._Name </button> </li>
                    }
                </ul>
            }
        </div>
        <div class="col-2">
            @if (viewIngredients == true)
            {
                <table class="table-bordered ingredientsTable">
                    <colgroup>
                        <col style="width: 100px" />
                        <col style="width: 150px" />
                    </colgroup>
                    <thead>
                        <tr>
                            <th> Amount </th>
                            <th> Name </th>
                        </tr>
                    </thead>
                    <tbody>


                        @foreach (Ingredient ing in ingredients)
                        {
                            <tr>
                                <td>@ing._amount @ing._unit</td>
                                <td><button class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() => retriveIngredient(ing))">@ing._ingredientName</button></td>
                            </tr>
                        }
                        <tr>
                            <td colspan="2" class="text-sm-center">
                                <div class="value-button" @onclick="incrementRecipeAmount" value="Increase @value"> + </div>
                                <input type="number" id="number" value="@recipePerPerson" />
                                <div class="value-button" @onclick="decrementRecipeAmount" value="Decrease @value"> - </div>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2"> <button type="button" class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() => QuickAddToShoppinglist(ingredients))"> Quick add </button></td>
                        </tr>
                    </tbody>
                </table>
            }
        </div>

        <div class="col-2">
            @if (viewProducts)
            {
                <div style="width:250px; max-height:400px; min-height:40px; overflow:auto">
                    <table class="table-bordered ">
                        <colgroup>
                            <col style="width:200%" />
                            <col style="width:50%" />
                        </colgroup>
                        <thead>
                            <tr>
                                <th> Choose a product</th>
                                <th> <i class="oi oi-basket"></i></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (Product p in products)
                            {
                                <tr>
                                    @if (products.Count == 0)
                                    {
                                        <td>no products found</td>
                                        <td></td>
                                    }
                                    else
                                    {
                                        <td>@p._productName</td>
                                        <td>
                                            <button class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() => AddProductToSL(p))">
                                                <i class="oi oi-arrow-circle-right"></i>
                                            </button>
                                        </td>
                                    }

                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
        @if (false)
        {
            <div class="col-4">
                <h3> @recipeName </h3>
                <p> @recipeDescription </p>
            </div>
        }

    </div>
</div>


@code{
    #region Fields


    string recipeDescription = " ";
    string recipeName = " ";
    string printRecipe = " ";
    string searchTerm;
    string email;
    int i = 0;
    int scalar = 1;

    float recipePerPerson;

    int value;

    string tempIngredientName = " ";

    bool viewRecipeTitle = false;
    bool viewIngredients = false;
    bool isSearching = false;
    bool viewProducts = false;

    //bool viewAddToshoppinglist = false;

    List<float> recipeAmount = new List<float>();
    List<Ingredient> ingredients = new List<Ingredient>();
    List<Recipe> recipeData = new List<Recipe>();
    List<ComplexRecipe> complexRecipes = new List<ComplexRecipe>();
    List<Product> products = new List<Product>();
    List<int> sum = new List<int>();
    List<string> values = new List<string>();

    //exsperimental
    List<Product> ToShoppinglist = new List<Product>();
    List<Product> QuickList = new List<Product>();
    List<List<Product>> returnList = new List<List<Product>>();
    string shopString;

    HttpResponseMessage responseMessage = new HttpResponseMessage();
    ShoppinlistFunctionality ShopList = new ShoppinlistFunctionality("api/Shoppinglist");
    #endregion

    #region Recipe_Methods
    void addtoMiniBasket()
    {

    }

    void retriveIngredient(Ingredient ID)
    {
        viewProducts = true;
        Ingredient ing = ingredients.First(x => x._ingredientName == ID._ingredientName);
        tempIngredientName = ing._ingredientName;
        getIngredientProducts();
    }

    void getIngredientProducts()
    {
        if (products == null)
        {
            foreach (ComplexRecipe com in complexRecipes)
            {
                foreach (string s in com._complexRecipeComponent._products.Keys)
                {
                    if (s.Contains(tempIngredientName))
                    {
                        foreach (List<Product> pro in com._complexRecipeComponent._products.Values)
                        {
                            foreach (Product p in pro)
                            {
                                if (p._productName.Contains(tempIngredientName) && !products.Contains(p))
                                {
                                    products.Add(p);
                                    QuickList.Add(p);
                                }
                            }
                        }
                    }
                }
            }
        }
        else
        {
            products.Clear();
            foreach (ComplexRecipe com in complexRecipes)
            {
                foreach (string s in com._complexRecipeComponent._products.Keys)
                {
                    if (s.Contains(tempIngredientName))
                    {
                        foreach (List<Product> pro in com._complexRecipeComponent._products.Values)
                        {
                            foreach (Product p in pro)
                            {
                                if (p._productName.Contains(tempIngredientName) && !products.Contains(p))
                                {
                                    products.Add(p);
                                    QuickList.Add(p);
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    //async void AddToShoppinglist()
    //{
    //    List<Product> listToSend = new List<Product>();

    //    foreach (var item in ingredients)
    //    {
    //        listToSend.Add(new Product() { _id = item._id.ToString(), _amount = item._amount + item._unit, _productName = item._ingredientName });
    //    }

    //    await ShopList.AddListToShoppinglist(listToSend);
    //}

    public async void AddProductToSL(Product AddedItem)
    {
        AddedItem._amountleft = 1;

        ToShoppinglist.Add(AddedItem);

        //await localStorage.RemoveItemAsync("Shoppinglist");

        shopString = JsonConvert.SerializeObject(ToShoppinglist);

        await localStorage.SetItemAsync("ProductString", shopString);
        //await localStorage.SetItemAsync("Shoppinglist", ToShoppinglist);
    }

    public async void QuickAddToShoppinglist(List<Ingredient> ingredient)
    {
        bool firstRun;
        Product temp = new Product();
        List<Product> productsToAddSL = new List<Product>();
        GetProductLists(ingredient);
        foreach (List<Product> pro in returnList)
        {
            if (pro.Count != 0) 
            {
                firstRun = true;
                foreach (Product p in pro)
                {
                    if (temp._price > p._price || firstRun)
                    {
                        temp = p;
                        firstRun = false;
                    }
                }
                productsToAddSL.Add(temp);
            }

        }
        foreach (Product pMin in productsToAddSL)
        {
            AddProductToSL(pMin);
        }

    }
    public void GetProductLists(List<Ingredient> ingredients)
    {
        //List<Product> test = new List<Product>();
        foreach (Ingredient ind in ingredients)
        {
            retriveIngredient(ind);

            returnList.Add(new List<Product>(QuickList));
            QuickList.Clear();
        }

    }

    void incrementRecipeAmount()//aventuel optimering brug en scalar værdi
    {
        for (int i = 0; i < ingredients.Count; i++)
        {
            if (ingredients[i]._amount != 0)
            {
                ingredients[i]._amount = (ingredients[i]._amount / recipePerPerson) * (recipePerPerson + 1F);
                value++;
            }
        }
        recipePerPerson += 1;
    }


    void decrementRecipeAmount()
    {
        if (recipePerPerson >= 2)
        {

            for (int i = 0; i < ingredients.Count; i++)
            {
                if (ingredients[i]._amount != 0)
                {
                    ingredients[i]._amount = (ingredients[i]._amount / recipePerPerson) * (recipePerPerson - 1F);
                    value--;
                }
            }
            recipePerPerson -= 1;
        }
    }


    void clear()
    {
        ingredients.Clear();
    }

    void retriveInfo(int ID)
    {
        Recipe show = recipeData.First(x => x._recipeID == ID);
        recipeDescription = show._description;
        recipeName = show._Name;
        recipePerPerson = show._PerPerson;

        if (show._ingredientList == null)
        {
            foreach (var item in show._ingredientList)
            {
                ingredients.Add(item);
                recipeAmount.Add(item._amount);
            }
        }
        else
        {
            clear();
            foreach (var item in show._ingredientList)
            {
                ingredients.Add(item);
                recipeAmount.Add(item._amount);
            }
        }
        viewIngredients = true;
        viewProducts = false;
        //viewAddToshoppinglist = true;
    }


    #endregion

    #region Recipe_async_Methods
    public async Task Search()
    {
        printRecipe = await Http.GetStringAsync("https://localhost:44325/api/recipe?recipeTitle=" + searchTerm);
        recipeData = JsonConvert.DeserializeObject<List<Recipe>>(printRecipe);
        viewRecipeTitle = true;
        RecipeQuery recipeQuery = new RecipeQuery();
        complexRecipes = recipeQuery.CheapestCRecipes(searchTerm);
    }

    private async void OnKeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await Search();
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Debug.WriteLine("User: -> " + await localStorage.GetItemAsync<string>("Email"));
            await GetLocalSession();
            localStorage.Changed += (sender, e) =>
            {
                Console.WriteLine($"Value for key {e.Key} changed from {e.OldValue} to {e.NewValue}");
            };
            responseMessage = await ShopList.GetStorageOnStart(email);
            StateHasChanged();
        }
    }

    async Task GetLocalSession()
    {
        email = await localStorage.GetItemAsync<string>("Email");
    }
    #endregion
}

@page "/oldRecipe"

@using BBCollection.BBObjects;
@using BBCollection.DBConncetion;
@using Newtonsoft.Json;
@using FrontEnd2.Data;
@using System.Diagnostics;
@using BBGatherer.Queries;
@inject Blazored.LocalStorage.ILocalStorageService localStorage


@inject HttpClient Http
<h3>Search for a recipe</h3>
<input class="SearchField SearchBar" placeholder="Search for a recipe" @bind="searchTerm" @onkeyup="OnKeyPress" />
<button type="button" class="btn btn-rounded btn-outline-success" @onclick="(() => Search())">Search</button>
<span class="text-muted">
    Showing @recipeData.Count out of 15953
</span>

<div class="container-fluid top-margin">
    <div class="row">
        <div class="col-3">
            @if (viewRecipeTitle == true)
            {
                <h3> @searchTerm Recipes:</h3>
                <ul class="recipeListDisplay">
                    @foreach (var rep in recipeData)
                    {
                        <li class="no-bullets"> <button type="button" class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() => retriveInfo(rep._recipeID))"> @rep._Name </button> </li>
                    }
                </ul>
            }
        </div>
        <div class="col-2">
            @if (viewIngredients == true)
            {
                <table class="table-bordered ingredientsTable">
                    <colgroup>
                        <col style="width: 100px" />
                        <col style="width: 150px" />
                    </colgroup>
                    <thead>
                        <tr>
                            <th> Amount </th>
                            <th> Name </th>
                        </tr>
                    </thead>
                    <tbody>


                        @foreach (Ingredient ing in ingredients)
                        {
                            if (runCounter <= ingredients.Count) //comback and fix
                            {
                                runCounter++;
                                scalar = recipePerPerson;
                            }

                            <tr>
                                <td>@(String.Format("{0:0.0}", (ing._amount/recipePerPerson)*scalar)) @ing._unit</td>
                                <td><button class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() => retriveIngredient(ing))">@ing._ingredientName</button></td>
                            </tr>
                        }
                        <tr>
                            <td colspan="2" class="text-sm-center">
                                <div class="value-button" @onclick="incrementRecipeAmount" value="Increase @value"> + </div>
                                <input type="number" id="number" value="@(scalar)" />
                                <div class="value-button" @onclick="decrementRecipeAmount" value="Decrease @value"> - </div>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2"> <button type="button" class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() => QuickAddToShoppinglist(ingredients))"> Quick add </button></td>
                        </tr>
                    </tbody>
                </table>
            }
        </div>

        <div class="col-2">
            @if (viewProducts)
            {
                <div style="width:250px; max-height:400px; min-height:40px; overflow:auto">
                    <table class="table-bordered ">
                        <colgroup>
                            <col style="width:200%" />
                            <col style="width:50%" />
                        </colgroup>
                        <thead>
                            <tr>
                                <th> Choose a product</th>
                                <th> <i class="oi oi-box"></i></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (Product p in products)
                            {
                                <tr>
                                    @if (products.Count == 0)
                                    {
                                        <td>no products found</td>
                                        <td></td>
                                    }
                                    else
                                    {
                                        <td>@p._productName</td>
                                        <td>
                                            <button class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() => AddProductToSL(p))">
                                                <i class="oi oi-arrow-circle-right"></i>
                                            </button>
                                        </td>
                                    }

                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
        <div class="col-4">
            <h3> @recipeName </h3>
            <p> @recipeDescription </p>
        </div>
    </div>
</div>


@code{
        #region Fields

    ConnectionSettings connectionSettings = new ConnectionSettings();
    string recipeDescription = " ";
    string recipeName = " ";
    string printRecipe = " ";
    string searchTerm;
    string email;
    int scalar = 1;
    int runCounter = 0;

        int recipePerPerson;

        int value;

        string tempIngredientName = " ";

        bool viewRecipeTitle = false;
        bool viewIngredients = false;
        bool viewProducts = false;

        //bool viewAddToshoppinglist = false;

        List<float> recipeAmount = new List<float>();
        List<Ingredient> ingredients = new List<Ingredient>();
        List<Recipe> recipeData = new List<Recipe>();
        List<ComplexRecipe> complexRecipes = new List<ComplexRecipe>();
        List<Product> products = new List<Product>();
        List<int> sum = new List<int>();
        List<string> values = new List<string>();

        //exsperimental
        List<Product> ToShoppinglist = new List<Product>();
        List<Product> QuickList = new List<Product>();
        List<List<Product>> returnList = new List<List<Product>>();
        string shopString;

        HttpResponseMessage responseMessage = new HttpResponseMessage();
        ShoppinlistFunctionality ShopList = new ShoppinlistFunctionality("api/Shoppinglist");
        #endregion

        #region Recipe_Methods
        void addtoMinibox()
        {

        }

        void retriveIngredient(Ingredient ID)
        {
            viewProducts = true;
            Ingredient ing = ingredients.First(x => x._ingredientName == ID._ingredientName);
            tempIngredientName = ing._ingredientName;
            getIngredientProducts();
        }

        void getIngredientProducts()
        {
            if (products == null)
            {
                foreach (ComplexRecipe com in complexRecipes)
                {
                    foreach (string s in com._complexRecipeComponent._products.Keys)
                    {
                        if (s.Contains(tempIngredientName))
                        {
                            foreach (List<Product> pro in com._complexRecipeComponent._products.Values)
                            {
                                foreach (Product p in pro)
                                {
                                    if (p._productName.Contains(tempIngredientName) && !products.Contains(p))
                                    {
                                        products.Add(p);
                                        QuickList.Add(p);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                products.Clear();
                foreach (ComplexRecipe com in complexRecipes)
                {
                    foreach (string s in com._complexRecipeComponent._products.Keys)
                    {
                        if (s.Contains(tempIngredientName))
                        {
                            foreach (List<Product> pro in com._complexRecipeComponent._products.Values)
                            {
                                foreach (Product p in pro)
                                {
                                    if (p._productName.Contains(tempIngredientName) && !products.Contains(p))
                                    {
                                        products.Add(p);
                                        QuickList.Add(p);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        //async void AddToShoppinglist()
        //{
        //    List<Product> listToSend = new List<Product>();

        //    foreach (var item in ingredients)
        //    {
        //        listToSend.Add(new Product() { _id = item._id.ToString(), _amount = item._amount + item._unit, _productName = item._ingredientName });
        //    }

        //    await ShopList.AddListToShoppinglist(listToSend);
        //}

        public async void AddProductToSL(Product AddedItem)
        {
            int actualAmount = AddedItem._amountleft;

            if (String.IsNullOrEmpty(email))
            {
                AddedItem._amountleft = 1;

                ToShoppinglist.Add(AddedItem);

                shopString = JsonConvert.SerializeObject(ToShoppinglist);

                await localStorage.SetItemAsync("ProductString", shopString);
            }
            else
            {
                AddedItem._amountleft = 1;
                await ShopList.QuickaddItemToShoppinglist(AddedItem, actualAmount);
            }
        }

        public void QuickAddToShoppinglist(List<Ingredient> ingredient)
        {
            bool firstRun;
            Product temp = new Product();
            List<Product> productsToAddSL = new List<Product>();
            GetProductLists(ingredient);

            foreach (List<Product> pro in returnList)
            {
                if (pro.Count != 0)
                {
                    firstRun = true;
                    foreach (Product p in pro)
                    {
                        if (temp._price > p._price || firstRun)
                        {
                            temp = p;
                            firstRun = false;
                        }
                    }
                    productsToAddSL.Add(temp);
                }
            }

            if (String.IsNullOrEmpty(email))
            {
                QuickaddListToLocalStorage(productsToAddSL);
            }
            else
            {
                QuickAddListToSL(productsToAddSL);
            }
            returnList.Clear();
        }

        public async void QuickAddListToSL(List<Product> ingredientList)
        {
            if (!String.IsNullOrEmpty(email))
            {
                foreach (Product p in ingredientList)
                {
                    p._amountleft = 1;
                }
                await ShopList.QuickaddListToShoppinglist(ingredientList);
            }
        }

        public async void QuickaddListToLocalStorage(List<Product> ingredientList)
        {
            foreach (Product p in ingredientList)
            {
                p._amountleft = 1;
                ToShoppinglist.Add(p);
            }

            await localStorage.RemoveItemAsync("ProductString");

            shopString = JsonConvert.SerializeObject(ToShoppinglist);

            await localStorage.SetItemAsync("ProductString", shopString);
        }

        public void GetProductLists(List<Ingredient> ingredients)
        {
            //List<Product> test = new List<Product>();
            foreach (Ingredient ind in ingredients)
            {
                retriveIngredient(ind);

                returnList.Add(new List<Product>(QuickList));
                QuickList.Clear();
            }

        }

        void incrementRecipeAmount()
        {
            scalar++;
        }


        void decrementRecipeAmount()
        {
            scalar--;
        }


        void clear()
        {
            ingredients.Clear();
        }

        void retriveInfo(int ID)
        {
            scalar = 1;
            runCounter = 0;
            Recipe show = recipeData.First(x => x._recipeID == ID);
            recipeDescription = show._description;
            recipeName = show._Name;
            recipePerPerson = (int)show._PerPerson;

            if (show._ingredientList == null)
            {
                foreach (var item in show._ingredientList)
                {
                    ingredients.Add(item);
                    recipeAmount.Add(item._amount);
                }
            }
            else
            {
                clear();
                foreach (var item in show._ingredientList)
                {
                    ingredients.Add(item);
                    recipeAmount.Add(item._amount);
                }
            }
            viewIngredients = true;
            viewProducts = false;
            //viewAddToshoppinglist = true;
        }


        #endregion

        #region Recipe_async_Methods
        public async Task Search()
        {
        printRecipe = await Http.GetStringAsync(connectionSettings.GetApiLink() + "api/recipe?recipeTitle=" + searchTerm);
        recipeData = JsonConvert.DeserializeObject<List<Recipe>>(printRecipe);
        viewRecipeTitle = true;
        RecipeQuery recipeQuery = new RecipeQuery();
        complexRecipes = await recipeQuery.CheapestCRecipes(searchTerm);
        }

        private async void OnKeyPress(KeyboardEventArgs args)
        {
            if (args.Key == "Enter")
            {
                await Search();
                StateHasChanged();
            }
        }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Debug.WriteLine("User: -> " + await localStorage.GetItemAsync<string>("Email"));
            await GetLocalSession();
            localStorage.Changed += (sender, e) =>
            {
                Console.WriteLine($"Value for key {e.Key} changed from {e.OldValue} to {e.NewValue}");
            };

            if(!String.IsNullOrEmpty(email))
            {
                responseMessage = await ShopList.GetShoppinglistOnStart(email);
            }

            StateHasChanged();
        }
    }

    async Task GetLocalSession()
    {
        email = await localStorage.GetItemAsync<string>("Email");

        if (String.IsNullOrEmpty(email))
        {
            shopString = await localStorage.GetItemAsync<string>("ProductString");
            if (!String.IsNullOrEmpty(shopString))
            {
                ToShoppinglist = JsonConvert.DeserializeObject<List<Product>>(shopString);
            }
        }
    }
    #endregion
}

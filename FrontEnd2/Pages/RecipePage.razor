@page "/recipe"
@using BBGatherer.Queries;
@using BBCollection.BBObjects;
@inject IJSRuntime JsRuntime

    <div class="container-fluid">
        <!-- #region Recipe search bar -->
        <div class="row d-flex justify-content-center">
            <div class="col-sm-10 col-md-8 col-lg-7 col-xl-5">
                <div class="form-check-inline center_div recipe-search-bar mb-2">
                    <input type="text" @bind="searchTerm" @onkeyup="OnKeyPress" class="form-control recipe-search-input" id="recipeSearchInput" placeholder="Search" />
                    <button class="btn btn-success recipe-search-button" @onclick="(() => Search())">
            <i class="fa fa-search"></i>
        </button>
                </div>
                @if (isSearching == true)
                {
                    <div class="center_div lds-roller">
                        <div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
                    </div>
                }
            </div>
        </div>
        <!-- #endregion -->
        <!-- #region Recipe card lists -->
        @if (viewRecipeList == true)
        {
            <div class="row d-flex justify-content-center top-margin">
                <div class="col-sm-10 col-md-8 col-lg-7 col-xl-5">
                    @foreach (ComplexRecipe complexRecipe in complexRecipes)
                    {
                        <div class="card w-100 " style="transform:rotate(0); margin-top:10px;">
                            <a @onclick="(() => retriveRecipe(complexRecipe._recipeID))" class="stretched-link"></a>
                            <div class="card-header" style="padding-bottom: 0.25rem;">
                                <div class="card-title w-100">
                                    <h6 style="font-weight:bold;">
                                        @complexRecipe._Name
                                    </h6>
                                </div>
                            </div>
                            <div class="card-body" style="padding-bottom: 0.25rem; padding-top: 0.60rem;">
                                <div class="justify-content-between">
                                    <button class="rounded btn-success">
                                        @for (int i = 0; i < complexRecipe._PerPerson; i++)
                                        {
                                            if (i < 4)
                                            {
                                                <i class="oi oi-person"> </i>
                                            }
                                        }
                                        @if (complexRecipe._PerPerson >= 4)
                                        {
                                            <i class="oi oi-plus"> </i>
                                        }
                                    </button>
                                    <p class="d-inline-block float-right"> @complexRecipe._complexRecipeComponent.RecipeCost kr.</p>
                                </div>
                            </div>
                        </div>
                    }
                    @if (complexRecipes.Count() % recipeQuery._productsPerLoad == 0)
                    {
                        <button class="btn btn-warning mb-5" @onclick="LoadMore" id="LoadMore">Load More</button>
                    }

                </div>
            </div>
        }
        <!-- #endregion -->
        @if (viewRecipes == true)
        {
            <div class="row d-flex justify-content-center">
                <!-- #region Recipe view -->
                <div class="col-sm-10 col-md-7 col-lg-8 col-xl-6 miniBasket mx-auto">
                    <div class="miniBasketHeader justify-content-center">
                        <button class="close float-right" @onclick="(() => toggle())"><i class="oi oi-x"></i> </button>
                        <h2 class="text-center recipeTitle">@recipeName</h2> <hr />
                    </div>
                    <div class="miniBasketBody">
                        <div class="mr-auto" >
                        <h4 class="recipeTitle"> Description</h4>
                        <p class="recipeDescription">@recipeDescription</p>
                        </div>
                        <div class="mr-auto">
                            <table class="table-hover table-bordered ingredientsTable">
                                <colgroup>
                                    <col style="width:150px" />
                                    <col style="width:150px" />
                                </colgroup>
                               <thead>
                                   <tr>
                                       <td style="font-weight:bold;"> Amount </td>
                                       <td style="font-weight:bold;"> Name </td>
                                   </tr>
                               </thead>
                               <tbody>
                                   @foreach (Ingredient ing in ingredients)
                                   {
                                       if (runCounter <= ingredients.Count) //comback and fix
                                       {
                                           runCounter++;
                                           scalar = recipePerPerson;
                                       }

                                       <tr>
                                           <td>@(String.Format("{0:0.0}", (ing._amount / recipePerPerson) * scalar)) @ing._unit</td>
                                           <td>@ing._ingredientName</td>
                                       </tr>
                                   }
                                   <tr>
                                       <td colspan="2" class="text-sm-center">
                                           <div class="value-button" @onclick="incrementAmount" value="Increase @value"> + </div>
                                           <input type="number" id="number" value="@(scalar)" />
                                           <div class="value-button" @onclick="decrementAmount" value="Decrease @value"> - </div>
                                       </td>
                                   </tr>
                               </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="miniBasketFooter justify-content-between">

                    </div>
                </div>
                <!-- #endregion -->
            </div>
        }
    </div>

@code {
    #region fields
    string searchTerm;
    string recipeDescription = " ";
    string recipeName = " ";
    string tempIngredientName = " ";

    int recipePerPerson;
    int scalar = 1;
    int runCounter = 0;
    int value;

    bool isSearching = false;
    bool viewRecipes = false;
    bool viewRecipeList = false;
    bool viewProducts = false;

    List<ComplexRecipe> complexRecipes = new List<ComplexRecipe>();
    List<Ingredient> ingredients = new List<Ingredient>();
    List<Product> products = new List<Product>();
    RecipeQuery recipeQuery = new RecipeQuery();
    #endregion

    #region Recipe Methods

    private void incrementAmount()
    {
        scalar++;
    }

    private void decrementAmount()
    {
        if (recipePerPerson >= 2)
        {
            scalar--;
        }
    }

    /// <summary>
    /// toggles different bools, this is used to show/hide
    /// elements without using JS
    /// </summary>
    private void toggle()
    {
        viewRecipes = !viewRecipes;
        viewRecipeList = !viewRecipeList;
    }

    /// <summary>
    /// Clears lists
    /// </summary>
    private void clear()
    {
        // clear ingredient list
        ingredients.Clear();
    }

    /// <summary>
    /// This method gets triggered when an ingredient is clicked.
    /// It initializes different ingredient propperties.
    /// </summary>
    /// <param name="ID"></param>
    void retriveIngredient(Ingredient ID)
    {
        viewProducts = true;
        Ingredient ing = ingredients.First(x => x._ingredientName == ID._ingredientName);
        tempIngredientName = ing._ingredientName;
    }

    /// <summary>
    /// This method gets triggered when a recipe card body is clicked.
    /// It initializes different recipe propperties.
    /// </summary>
    /// <param name="ID"></param>
    void retriveRecipe(int ID)
    {
        // get the first element that satisfies the condition
        ComplexRecipe cr = complexRecipes.First(x => x._recipeID == ID);

        //Set properties
        recipeDescription = cr._description;
        recipeName = cr._Name;
        recipePerPerson = (int)cr._PerPerson;

        //fill ingredient list
        if (cr._ingredientList == null)
        {
            foreach (var item in cr._ingredientList)
            {
                ingredients.Add(item);
                //recipeAmount.Add(item._amount);
            }
        }
        else
        {
            clear();
            foreach (var item in cr._ingredientList)
            {
                ingredients.Add(item);
                //recipeAmount.Add(item._amount);
            }
        }
        viewRecipes = true;
        viewRecipeList = false;
        //viewIngredients = true;
        //viewProducts = false;
        //viewAddToshoppinglist = true;
    }
    #endregion

    #region Search and load items
    /// <summary>
    /// Calls search method when keyboard event is
    /// triggered (when you press "Enter")
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    private async Task OnKeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            //await RemoveElementFocus("recipeSearchInput");
            complexRecipes.Clear();
            await Search();
        }
    }

    private async Task Search()
    {
        isSearching = true;
        StateHasChanged();
        recipeQuery._loadCount = -1;
        complexRecipes = await recipeQuery.CheapestCRecipes(searchTerm);

        viewRecipeList = true;
        isSearching = false;
        StateHasChanged();
    }

    private async Task LoadMore()
    {
        complexRecipes.AddRange(await recipeQuery.CheapestCRecipes(searchTerm));
    }
    #endregion
}

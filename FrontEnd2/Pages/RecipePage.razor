@page "/recipe"
@using BBCollection.Queries;
@using BBCollection.BBObjects;
@using BBCollection.DBHandling;
@using FiftyOne.Foundation.Mobile.Detection.Factories
@using Newtonsoft.Json;
@using FrontEnd2.Data;
@using System.Diagnostics;
@inject IJSRuntime JsRuntime





<div class="container-fluid">
    <!-- #region Recipe search bar -->
    <div class="row d-flex justify-content-center">
        <div class="col-sm-10 col-md-8 col-lg-7 col-xl-5" id="recipeSearchBox">
            <div class="form-check-inline center_div recipe-search-bar mb-2">
                <input type="text" @bind="searchTerm" @onkeyup="OnKeyPress" class="form-control recipe-search-input" id="recipeSearchInput" placeholder="Search recipe" />
                <button class="btn btn-success recipe-search-button" @onclick="(() => Search())">
                    <i class="fa fa-search"></i>
                </button>
            </div>
        </div>
        <!--Scroll to top button   -->
        <button id="myBtn" class="btn btn-rounded btn-success"><a href="recipe" style="color: white; font-size:12px;">Top</a></button>
    </div>
    @if (isSearching == true)
    {
        <div class="row d-flex justify-content-center top-margin">
            <div class="col-sm-10 col-md-8 col-lg-7 col-xl-5">
                <div class="center_div lds-roller">
                    <div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
                </div>
            </div>
        </div>
    }
    <!-- #endregion -->
    <!-- #region Recipe card lists -->
    @if (viewRecipeList == true)
    {
        <div class="row d-flex justify-content-center top-margin">
            <div class="col-sm-10 col-md-8 col-lg-7 col-xl-5">
                @foreach (ComplexRecipe complexRecipe in complexRecipes)
                {
                    <div class="center_div card w-100" id="recipeCard">
                        <a @onclick="(() => retriveRecipe(complexRecipe._recipeID))" class="stretched-link"></a>
                        <div class="card-header" style="padding-bottom: 0.25rem;">
                            <div class="card-title w-100">
                                <h6 style="font-weight:bold;">
                                    @complexRecipe._Name
                                </h6>
                            </div>
                        </div>
                        <div class="card-body" style="padding-bottom: 0.25rem; padding-top: 0.60rem;">
                            <div class="justify-content-between">
                                <button class="rounded btn-success">
                                    @for (int i = 0; i < complexRecipe._PerPerson; i++)
                                    {
                                        if (i < 4)
                                        {
                                            <i class="oi oi-person"> </i>
                                        }
                                    }
                                    @if (complexRecipe._PerPerson >= 4)
                                    {
                                        <i class="oi oi-plus"> </i>
                                    }
                                </button>
                                <p class="d-inline-block float-right"> @complexRecipe._complexRecipeComponent.RecipeCost kr.</p>
                            </div>
                        </div>
                    </div>
                }
                @if (_viewLoadMoreSpinner == true)
                {
                    <div class="center_div lds-roller">
                        <div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
                    </div>
                }
                @if (complexRecipes.Count() % recipeQuery._productsPerLoad == 0 && complexRecipes.Count() != 0 && _viewLoadMore == true)
                {
                    <div class="row mt-4 d-flex justify-content-center">
                        <button class="btn btn-warning mb-4" @onclick="LoadMore" id="LoadMore">Load More</button>
                    </div>
                }
            </div>
        </div>
    }
    <!-- #endregion -->
</div>
<!-- #region Recipe view -->
<Accordion>
    <Modal @ref="recipeRef">
        <ModalBackdrop />
        <ModalContent IsCentered="true" Size="ModalSize.Large">
            <ModalHeader>
                <ModalTitle Size="1" Style="font-weight:bolder"> @recipeName </ModalTitle>
                <CloseButton Clicked="hideModal" />
            </ModalHeader>
            <Card>
                <CardHeader>
                    <Heading Size="HeadingSize.Is5" Class="text-center">
                        <Button Clicked="@(()=>isOpen1 = !isOpen1)" style="font-weight:bold">Description</Button>
                    </Heading>
                </CardHeader>
                <Collapse IsOpen="@isOpen1">
                    <CardBody>
                        <p style="text-align:center; padding: 4px 7px 2px 4px;"> @recipeDescription </p>
                    </CardBody>
                </Collapse>
            </Card>
            <Card>
                <CardHeader>
                    <Heading Size="HeadingSize.Is5" Class="text-center">
                        <Button Clicked="@(()=>isOpen2 = !isOpen2)" Style="font-weight:bold">Ingrediens</Button>
                    </Heading>
                </CardHeader>
                <Collapse IsOpen="@isOpen2">
                    <CardBody>
                        <div class="input-group mb-3">
                            <div class="input-group-prepend">
                                <label class="input-group-text" for="inputGroupSelect01"> For:</label>
                            </div>
                            <SelectEdit TValue="int" SelectedValue="selectedValue" SelectedValueChanged="@OnSelectedValueChanged" Style="max-width:100px;">
                                @{
                                    int numb = 0;
                                    @for (int i = 0; i < 100; i++)
                                    {
                                        <SelectItem Value="TempScalar">@(numb++)</SelectItem>
                                    }
                                }
                            </SelectEdit>
                        </div>
                        <Table Theme="Theme.Light" IsStriped="false" IsHoverable="true" IsFullWidth="true" IsBorderless="true">
                            <TableHeader>
                                <TableRow>
                                    <TableHeaderCell></TableHeaderCell>
                                    <Tooltip IsAlwaysActive="true" Text="Click on an ingredient to find a product">
                                        <TableHeaderCell></TableHeaderCell>
                                    </Tooltip>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                @foreach (Ingredient ing in ingredients)
                                {
                                    <TableRow>
                                        @if (runCounter <= ingredients.Count) //comback and fix
                                        {
                                            runCounter++;
                                            scalar = recipePerPerson;
                                        }
                                        <TableRowCell Style="width:50px">@(String.Format("{0:0.0}", (ing._amount / recipePerPerson) * scalar)) @ing._unit</TableRowCell>
                                        <TableRowCell Style="width:150px"><Button Class="btn btn-block btn-light" @onclick="(() => retriveIngredient(ing))">@ing._ingredientName</Button></TableRowCell>
                                    </TableRow>
                                }
                                <TableRowCell ColumnSpan="2"> <Button Class="btn btn-block btn-outline-success" Clicked="()=>QuickAddToShoppinglist(ingredients)"> <Icon Name="@(FontAwesomeIcons.ShoppingCart)"></Icon></Button> </TableRowCell>
                            </TableBody>
                        </Table>
                    </CardBody>
                </Collapse>
            </Card>
            <Card>
                <CardHeader>
                    <Heading Size="HeadingSize.Is5" Class="text-center">
                        <Button Clicked="@(()=>isOpen3 = !isOpen3)" Style="font-weight:bold">Products</Button>
                    </Heading>
                </CardHeader>
                <Collapse IsOpen="@isOpen3">
                    <CardBody>
                        @if (products.Count == 0)
                        {
                            <p> Choose an ingredient</p>
                        }
                        else
                        {
                            @foreach (Product p in products)
                            {
                                <Table Theme="Theme.Light" IsBordered="true">
                                    <TableBody>
                                        <TableRowHeader Style="width:5%"><Button Class="btn btn-block btn-outline-success" Clicked="()=>AddProductToSL(p)"> <Icon Name="@(FontAwesomeIcons.ShoppingCart)"></Icon></Button> </TableRowHeader>
                                        <TableRowCell Style="width:25%">@p._price Kr.</TableRowCell>
                                        <TableRowCell Style="width:70%">@p._productName</TableRowCell>
                                    </TableBody>
                                </Table>
                            }
                        }
                    </CardBody>
                </Collapse>
            </Card>
            <Snackbar @ref="snackbar" IsMultiline="true">
                <SnackbarBody>
                    @tempProductName added to your shopping list. Your total is @String.Format("{0:0.00}", (ShopList.CompletePrice() + tempTotalCost)) DKK.
                </SnackbarBody>
            </Snackbar>

            <Snackbar @ref="snackbar2" IsMultiline="true">
                <SnackbarBody>
                    You've added @amountOfProducts items to your shopping list. Your total cost is now @String.Format("{0:0.00}", (ShopList.CompletePrice() + tempTotalCostQuickList)) DKK.
                </SnackbarBody>
            </Snackbar>
        </ModalContent>
    </Modal>
</Accordion>
<!-- #endregion -->


@code {
    #region fields

    private Snackbar snackbar;
    private Snackbar snackbar2;
    private Modal recipeRef;

    string searchTerm;
    string recipeDescription = " ";
    string recipeName = " ";
    string tempIngredientName = " ";
    string email;
    string shopString;
    string tempProductName = " ";

    int amountOfProducts;
    int recipePerPerson;
    int scalar = 1;
    private int numb = 0;
    string TempScalar;
    int runCounter = 0;
    int value;
    int selectedValue;

    double tempTotalCostQuickList = 0; 
    double tempTotalCost = 0;

    bool isOpen1 = true;
    bool isOpen2 = true;
    bool isOpen3 = true;
    bool isSearching = false;
    bool viewRecipes = false;
    bool viewRecipeList = false;
    bool viewProducts = false;
    bool viewDescription = false;
    bool viewIngredients = false;
    bool _viewLoadMoreSpinner = false;
    bool _viewLoadMore = true;
    bool productSuggestions = true;
    bool disableButton = false;

    List<ComplexRecipe> complexRecipes = new List<ComplexRecipe>();
    List<Ingredient> ingredients = new List<Ingredient>();
    List<Product> products = new List<Product>();
    List<Product> ToShoppinglist = new List<Product>();
    List<Product> QuickList = new List<Product>();
    List<List<Product>> returnList = new List<List<Product>>();
    List<int> perpersonvalues = new List<int>();

    RecipeQuery recipeQuery = new RecipeQuery();

    HttpResponseMessage responseMessage = new HttpResponseMessage();
    ShoppinlistFunctionality ShopList = new ShoppinlistFunctionality("api/Shoppinglist");
    ControllerFuncionality features = new ControllerFuncionality();

    #endregion

    #region Get products and sent products

    public async void AddProductToSL(Product AddedItem)
    {
        disableButton = true;
        StateHasChanged();

        AddedItem._amountleft++;
        tempProductName = AddedItem._productName;
        tempTotalCost += AddedItem._price;

        int actualAmout = AddedItem._amountleft;

        AddedItem._amountleft = 1;

        AddedItem._image = features.SetOnePicture(AddedItem._image);

        if (String.IsNullOrEmpty(email))
        {
            await GetAndSetLocalStorage(AddedItem);
        }
        else
        {
            await ShopList.QuickaddItemToShoppinglist(AddedItem);
        }

        AddedItem._amountleft = actualAmout;

        disableButton = await AwaitButton();
        snackbar.Show();
        StateHasChanged();
    }

    public async Task<bool> AwaitButton()
    {
        await Task.Delay(40);
        return false;
    }

    public async Task GetAndSetLocalStorage(Product product)
    {
        ToShoppinglist = await GetLocalStorage();

        ToShoppinglist.Add(product);

        ToShoppinglist = features.HandleDublicats(ToShoppinglist);

        await localStorage.RemoveItemAsync("ProductString");

        shopString = JsonConvert.SerializeObject(ToShoppinglist);

        await localStorage.SetItemAsync("ProductString", shopString);
    }

    public void QuickAddToShoppinglist(List<Ingredient> ingredient)
    {
        bool firstRun;
        Product temp = new Product();
        List<Product> productsToAddSL = new List<Product>();
        GetProductLists(ingredient);

        foreach (List<Product> pro in returnList)
        {
            if (pro.Count != 0)
            {
                firstRun = true;
                foreach (Product p in pro)
                {
                    if (temp._price > p._price || firstRun)
                    {
                        temp = p;
                        firstRun = false;
                        tempTotalCostQuickList += temp._price;
                    }
                }
                productsToAddSL.Add(temp);
            }
        }
        amountOfProducts = productsToAddSL.Count;
        productsToAddSL = features.SetAllPicture(productsToAddSL);

        if (String.IsNullOrEmpty(email))
        {
            QuickaddListToLocalStorage(productsToAddSL);
        }
        else
        {
            QuickAddListToSL(productsToAddSL);
        }

        returnList.Clear();
        snackbar2.Show();
    }

    public async void QuickAddListToSL(List<Product> ingredientList)
    {
        foreach (Product p in ingredientList)
        {
            p._amountleft = 1;
        }
        await ShopList.QuickaddListToShoppinglist(ingredientList);
    }

    public async void QuickaddListToLocalStorage(List<Product> ingredientList)
    {
        ToShoppinglist = await GetLocalStorage();

        foreach (Product p in ingredientList)
        {
            p._amountleft = 1;
            ToShoppinglist.Add(p);
        }

        await localStorage.RemoveItemAsync("ProductString");

        shopString = JsonConvert.SerializeObject(ToShoppinglist);

        await localStorage.SetItemAsync("ProductString", shopString);
    }


    public async Task<List<Product>> GetLocalStorage()
    {
        shopString = await localStorage.GetItemAsync<string>("ProductString");

        if (!String.IsNullOrEmpty(shopString))
        {
            return JsonConvert.DeserializeObject<List<Product>>(shopString);
        }

        return new List<Product>();
    }

    public void GetProductLists(List<Ingredient> ingredients)
    {
        //List<Product> test = new List<Product>();
        foreach (Ingredient ind in ingredients)
        {
            retriveIngredient(ind);

            returnList.Add(new List<Product>(QuickList));
            QuickList.Clear();
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Debug.WriteLine("User: -> " + await localStorage.GetItemAsync<string>("Email"));
            await GetLocalSession();
            localStorage.Changed += (sender, e) =>
            {
                Console.WriteLine($"Value for key {e.Key} changed from {e.OldValue} to {e.NewValue}");
            };

            if (!String.IsNullOrEmpty(email))
            {
                responseMessage = await ShopList.GetShoppinglistOnStart(email);
            }

            StateHasChanged();
        }
    }

    async Task GetLocalSession()
    {
        email = await localStorage.GetItemAsync<string>("Email");

        if (String.IsNullOrEmpty(email))
        {
            shopString = await localStorage.GetItemAsync<string>("ProductString");
            if (!String.IsNullOrEmpty(shopString))
            {
                ToShoppinglist = JsonConvert.DeserializeObject<List<Product>>(shopString);
            }
        }
    }

    #endregion

    #region Recipe Methods

    private void OnSelectedValueChanged(int value)
    {
        selectedValue = value;
        scalar = selectedValue;
    }


    private void showModal()
    {
        recipeRef.Show();
    }

    private void hideModal()
    {
        recipeRef.Hide();
    }

    private void AssignScalar(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int result))
        {
            scalar = result;
        }
    }

    private void incrementAmount()
    {
        scalar++;
    }

    private void decrementAmount()
    {
        if (recipePerPerson >= 2)
        {
            scalar--;
        }
    }

    /// <summary>
    /// toggles different bools, this is used to show/hide
    /// elements without using JS
    /// </summary>
    private void toggle()
    {
        viewRecipes = !viewRecipes;
        viewRecipeList = !viewRecipeList;
    }

    /// <summary>
    /// Clears lists
    /// </summary>
    private void clear()
    {
        // clear ingredient list
        ingredients.Clear();
    }

    /// <summary>
    /// Step 1: go through all ComplexRecipies
    /// Step 2: go through all keys in list<Product> from ComplexRecipe
    /// Step 3: check if the selected ingredient matches with an key
    /// Step 4 - 5: if condition holds go through all values and match ingredient with products
    /// Step 6: add to products list
    /// </summary>
    private void retriveProduct()
    {
        if (products != null)
        {
            products.Clear();
        }
        foreach (ComplexRecipe com in complexRecipes)
        {
            foreach (string s in com._complexRecipeComponent._products.Keys)
            {
                if (s.Contains(tempIngredientName))
                {
                    foreach (var p in com._complexRecipeComponent._products[s])
                    {
                        if (p._productName.ToLower().Contains(tempIngredientName) && !products.Contains(p))
                        {
                            products.Add(p);
                            QuickList.Add(p);
                        }
                        else if (p._CustomReferenceField != null && p._CustomReferenceField.ToLower().Contains("*"))
                        {
                            products.Add(p);
                            QuickList.Add(p);
                        }
                    }
                }
            }
        }
    }

    /// <summary>
    /// This method gets triggered when an ingredient is clicked.
    /// It initializes different ingredient propperties.
    /// </summary>
    /// <param name="ID"></param>
    private void retriveIngredient(Ingredient ID)
    {
        viewProducts = true;
        Ingredient ing = ingredients.First(x => x._ingredientName == ID._ingredientName);
        tempIngredientName = ing._ingredientName;
        retriveProduct();
    }

    /// <summary>
    /// This method gets triggered when a recipe card body is clicked.
    /// It initializes different recipe propperties.
    /// </summary>
    /// <param name="ID"></param>
    private async void retriveRecipe(int ID)
    {

        // get the first element that satisfies the condition
        ComplexRecipe cr = complexRecipes.First(x => x._recipeID == ID);
        cr._complexRecipeComponent._products = await recipeQuery.GetProductsForRecipe(cr._recipeID, complexRecipes);
        //Set properties
        recipeDescription = cr._description;
        recipeName = cr._Name;
        recipePerPerson = (int)cr._PerPerson;
        selectedValue = recipePerPerson;
        //fill ingredient list
        if (cr._ingredientList == null)
        {
            foreach (var item in cr._ingredientList)
            {
                ingredients.Add(item);
                //recipeAmount.Add(item._amount);
            }
        }
        else
        {
            clear();
            foreach (var item in cr._ingredientList)
            {
                ingredients.Add(item);
                //recipeAmount.Add(item._amount);
            }
        }
        showModal();
        viewRecipes = true;
        //viewRecipeList = false;
    }
    #endregion

    #region Search and load items
    /// <summary>
    /// Calls search method when keyboard event is
    /// triggered (when you press "Enter")
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    private async Task OnKeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            //await RemoveElementFocus("recipeSearchInput");
            complexRecipes.Clear();
            await Search();
        }
    }

    private async Task Search()
    {
        isSearching = true;
        StateHasChanged();
        recipeQuery._loadCount = 0;
        complexRecipes = await recipeQuery.CheapestRecipeDB(searchTerm);

        viewRecipeList = true;
        isSearching = false;
        StateHasChanged();
    }

    private async Task LoadMore()
    {
        _viewLoadMoreSpinner = true;
        _viewLoadMore = false;
        this.StateHasChanged();
        complexRecipes.AddRange(await recipeQuery.CheapestRecipeDB(searchTerm));
        _viewLoadMoreSpinner = false;
        _viewLoadMore = true;
        this.StateHasChanged();
    }
    #endregion
}

@page "/recipeDevelop"
@using BBGatherer.Queries;
@inject IJSRuntime JsRuntime


<div class="container-fluid">
    <div class="row d-flex justify-content-center">
        <div class="col-sm-10 col-md-8 col-lg-7 col-xl-5">
            <div id="recipeSearchZone"> 
                <div class="form-check-inline center_div recipe-search-bar mb-2">
                    <input type="text" @bind="searchTerm" @onkeyup="OnKeyPress" class="form-control recipe-search-input" id="recipeSearchInput" placeholder="Search" />

                    <button class="btn btn-success recipe-search-button" @onclick="(() => Search())">
                        <i class="fa fa-search"></i>
                    </button>
                </div>
            </div>
            <div id="recipeListZone mt-5">
                <div id="unloaded-roller" class="center_div">
                    <div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
                </div>
                <div id="recipeListOverview">
                    @foreach (var recipe in complexRecipes)
                    {
                        <div class="recipeBar">
                            <div class="recipeTitleBar">
                                <p>@recipe._Name</p>
                            </div>
                        </div>
                    }
                    <button class="btn btn-warning mb-5" style="display:none;" @onclick="LoadMore" id="LoadMore">Load More</button>
                    <div id="loadMore-roller" style="display:none;" class="center_div">
                        <div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    string searchTerm;
    List<ComplexRecipe> complexRecipes = new List<ComplexRecipe>();
    RecipeQuery recipeQuery = new RecipeQuery();


    private async void OnKeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await RemoveElementFocus("recipeSearchInput");
            Search();
        }
    }

    private async void Search()
    {
        complexRecipes.Clear();
        recipeQuery._loadCount = -1;
        await MakeInvisible("recipeListOverview");
        await MakeInvisible("LoadMore");
        await MakeVisible("unloaded-roller");
        complexRecipes = recipeQuery.CheapestCRecipes(searchTerm);
        await MakeInvisible("unloaded-roller");
        await MakeVisible("recipeListOverview");
        if (complexRecipes.Count() % recipeQuery._productsPerLoad == 0)
        {
            await MakeVisible("LoadMore");
        }
        this.StateHasChanged();
    }

    private async void LoadMore()
    {
        MakeVisible("loadMore-roller");
        complexRecipes.AddRange(recipeQuery.CheapestCRecipes(searchTerm));
        MakeInvisible("loadMore-roller");
        if (complexRecipes.Count() % recipeQuery._productsPerLoad != 0)
        {
            await MakeInvisible("LoadMore");
        }
    }

    async Task RemoveElementFocus(string idStr)
    {
        await JsRuntime.InvokeVoidAsync(identifier: "onElementFocused",idStr);
    }

    async Task MakeVisible(string idStr)
    {
        await JsRuntime.InvokeVoidAsync(identifier: "makeVisible", idStr);
    }

    async Task MakeInvisible(string idStr)
    {
        await JsRuntime.InvokeVoidAsync(identifier: "makeInvisible", idStr);
    }


}

@page "/Emptyfridge"
@using Newtonsoft.Json;
@inject HttpClient Http
@using FrontEnd2.Data;
@using System.Text;
@using System.Globalization;
@using BBCollection.BBObjects;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthenticationFunctionallity uf

<h3>Emptyfridge</h3>

@code {
    ShoppinlistFunctionality ListFunc = new ShoppinlistFunctionality("api/Storage");
    HttpResponseMessage responseMessage = new HttpResponseMessage();
    List<WeightedRecipies> recpies = new List<WeightedRecipies>();
    String email;
    String userId;
    private delegate bool compareWR(WeightedRecipies r1, WeightedRecipies r2);
    //public delegate int PerformCalculation(int x, int y);

    protected async override Task OnInitializedAsync()
    {
        userId = email;
        responseMessage = await ListFunc.GetStorageOnStart(userId);

        FindValidRecipies(ListFunc.itemList);
    }

    private List<WeightedRecipies> FindValidRecipies(List<Product> storageInventory)
    {
        List<Recipe> Recepies = GetRecipes();
        List<Recipe> ValidRecipies = new List<Recipe>();
        bool breakFlag;

        foreach (Recipe r in Recepies)
        {
            breakFlag = false;
            foreach (Product p in storageInventory)
            {
                foreach (Ingredient i in r._ingredientList)
                {
                    if (compareIngrdientAndProduct(i,p))//kan godt være man bliver nødtil at lave en eller anden form for kryds referance
                    {
                        ValidRecipies.Add(r);
                        breakFlag = true;
                        break;
                    }
                }
                if (breakFlag)
                {
                    break;
                }
            }

        }

        return GenerateWeightedRecepies(ValidRecipies, storageInventory);;
    }

    private List<WeightedRecipies> GenerateWeightedRecepies(List<Recipe> recipes,List<Product> storageInventory)
    {
        //WeightedRecipies[] returnRecipies = new WeightedRecipies[recipes.Count()];
        List<WeightedRecipies> returnRecipies = new List<WeightedRecipies>();
        foreach (Recipe r in recipes)
        {
            returnRecipies.Add(new WeightedRecipies(r));
        }

        foreach(WeightedRecipies w in returnRecipies)
        {
            foreach (Product p in storageInventory)
            {
                foreach (Ingredient i in w._recipie._ingredientList)
                {
                    if (compareIngrdientAndProduct(i,p))
                    {
                        w.MatchFound(i);
                    }
                }

            }
        }
        return null;
    }

    private bool compareIngrdientAndProduct(Ingredient ingrdient, Product product)
    {
        return ingrdient._ingredientName == product._productName ? true : false;
    }

    private List<Recipe> GetRecipes()
    {
        //return new List<Recipe>() { new Recipe(1,"yeet","yoot",); }
        return null;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetLocalSession();
            localStorage.Changed += (sender, e) =>
            {
                Console.WriteLine($"Value for key {e.Key} changed from {e.OldValue} to {e.NewValue}");
            };

            //if (email != null)
            //{
            //    gottenData = await Http.GetStringAsync("https://localhost:44325/api/Login/" + email + "S");
            //}
            StateHasChanged();
        }

    }

    async Task GetLocalSession()
    {
        email = await localStorage.GetItemAsync<string>("Email");
    }

    public class WeightedRecipies
    {
        public Recipe _recipie{get;}
        private int complexity{get;}
        private int matchingIngrdientsNum { get; set; }
        private List<Ingredient> matchingIngrdient{get;}

        public WeightedRecipies(Recipe _recipie)
        {
            this._recipie = _recipie;
            complexity = _recipie._ingredientList.Count();
        }

        public void MatchFound(Ingredient ingrdient)
        {
            matchingIngrdient.Add(ingrdient);
            matchingIngrdientsNum = matchingIngrdient.Count();
        }
    }

    /*public static List<WeightedRecipies> Sort(List<WeightedRecipies> recipies,compareWR CompareWR)
    {
        WeightedRecipies[] arr = recipies.ToArray();

        int i, j,
        WeightedRecipies temp = new WeightedRecipies()½;
        bool swapped; 
        for (i = 0; i < arr.Length - 1; i++)  
        { 
            swapped = false; 
            for (j = 0; j < arr.Length - i - 1; j++)  
            { 
                if (CompareWR(arr[j], arr[j + 1]) arr[j] > arr[j + 1])  
                {
            swap arr[j] and arr[j + 1]
            temp = arr[j];
            arr[j] = arr[j + 1];
            arr[j + 1] = temp;
            swapped = true;
        }
    }

    // IF no two elements were  
    // swapped by inner loop, then break 
    //if (swapped == false) 
    //break; *
        } 

        return null;
    }*/
}

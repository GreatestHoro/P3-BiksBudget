@page "/search"

@using BBCollection.BBObjects;
@using FrontEnd2.Data
@using Newtonsoft.Json

@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h1> Find a product</h1>

<div class="form-inline md-form mr-auto mb-4">
    <input type="text" class="form-control oi-underline" placeholder="Enter a product name.." @onkeyup="@KeyPressed" @bind="searchBox" />
    <button class="btn btn-rounded btn-outline-success" @onclick="(() => SearchForProducts())">Search</button>
</div>
<div class="form-inline md-form mr-auto mb-4">
    <label class="text-muted">
        Advanced search
        <input type="checkbox" value="viewAdvancedSearch" @onclick="toggleAdvancedCheckBox"/>
    </label>
</div>
@*<button id="myBtn"><a href="search" style="color: white">Top</a></button>*@

@if (viewAdvancedSearch)
{
    <h4> Select options:</h4>
    <div class="d-flex flex-sm-row flex-column">
        <div class="p-2">
            <div class="btn-group show-on-hover">
                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                    <h5>Sort By</h5>
                    <span clasusergeolos="caret"></span>
                </button>
                <ul class="dropdown-menu" role="menu">
                    @foreach (Options item in optionsList)
                    {
                        if (item.isEnabled)
                        {
                            <li><button style="color:green" class="btn btn-block bg-light dropdownListStrorage rounded-0" @onclick="(() => ChangeState(item.filterName, optionsList))">@item.filterName</button></li>
                        }
                        else
                        {
                            <li><button style="color:red" class="btn btn-block bg-light dropdownListStrorage rounded-0" @onclick="(() => ChangeState(item.filterName, optionsList))">@item.filterName</button></li>
                        }
                    }
                </ul>
            </div>
        </div>
        <div class="p-2">
            <div class="btn-group show-on-hover">
                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                    <h5>Select Stores </h5>
                    <span clasusergeolos="caret"></span>
                </button>
                <ul class="dropdown-menu" role="menu">
                    @foreach (FilterItem item in storeList)
                    {
                        if (item.IsEnabled == true)
                        {
                            <li><button style="color:green" class="btn btn-block bg-light dropdownListStrorage rounded-0" @onclick="(() => ChangeState(item.FilterName, storeList))">@item.FilterName</button></li>
                        }
                        else
                        {
                            <li><button style="color:red" class="btn btn-block bg-light dropdownListStrorage rounded-0" @onclick="(() => ChangeState(item.FilterName, storeList))">@item.FilterName</button></li>
                        }
                    }
                    <li><button class="btn btn-block bg-light dropdownListStrorage rounded-0" @onclick="(()=>SelectAll(storeList))">Select All</button></li>
                </ul>
            </div>
        </div>
        <div class="p-2">
            <div class="btn-group show-on-hover">
                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                    <h5>Select filters</h5> <span class="caret"></span>
                </button>
                <ul class="dropdown-menu" role="menu">
                    @foreach (var item in wordList)
                    {
                        if (item.IsEnabled == true)
                        {
                            <li><button style="color:green" class="btn btn-block bg-light dropdownListStrorage rounded-0" @onclick="(() => ChangeState(item.FilterName, wordList))">@item.FilterName</button></li>
                        }
                        else
                        {
                            <li><button style="color:red" class="btn btn-block bg-light dropdownListStrorage rounded-0" @onclick="(() => ChangeState(item.FilterName, wordList))">@item.FilterName</button></li>
                        }
                    }
                </ul>
            </div>
        </div>
        <div class="p-2">
            <h5>Distance @(radius / 1000) Km</h5>
            <input type="range" min="0" max="5000" @bind="radius" step="1000" />
        </div>
        <div class="p-2">
            <label for="minPriceB">Minimum Price</label>
            <input type="number" class="form-control" placeholder="Min Price" @bind="minPrice" />
        </div>
        <div class="p-2">
            <label for="maxPriceB">Maximum Price</label>
            <input type="number" class="form-control" placeholder="Max Price" @bind="maxPrice" />
        </div>
    </div>
}

@if (_viewProducts == true)
{
<div class="container">
    <div class="row top-margin">
        @foreach (Product p in itemList)
        {
            if (p._price > minPrice && p._price < maxPrice)
            {
                <div class="col-12 col-sm-8 col-md-6 col-lg-4 top-margin">
                    <div class="card w-100 h-100">
                        <div class="card-header h-50 bg-white mx-auto text-center">
                            @if (p._image.Length == 0)
                            {
                                <img style="width:280px; height:auto; " class="card-img-top " src="https://cdn.discordapp.com/attachments/509313911229513740/647326558813421637/normark-2009.png">
                            }
                            else
                            {
                                <img style="width: auto; height: auto; max-height:280px; max-width: 280px;"
                                     class="card-img-top" src="@ProductImage(p._image)">
                            }
                        </div>
                        <div class="card-body h-50 w-100 bg-light rounded mx-auto">
                            <h5 class="card-title w-100">@p._productName</h5>
                            <p class="card-text ">
                                From @p._storeName <hr />
                                @p._amount
                            </p>
                            <div class="buy d-flex justify-content-between align-items-center">
                                <div class="price"><h5 class="mt-4">@p._price kr.</h5></div>
                                <div class="amount">
                                    <div class="valueClass text-center">
                                        <p>@p._amountleft</p>
                                    </div>
                                </div>
                                <button @onclick="(() => AddProductToSL(p))" class="btn btn-success mt-3"><i class="oi oi-basket"></i> Add to cart</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div> 
    <!--Scroll to top button   -->
    <button  id="myBtn" class="btn btn-rounded btn-success"><a href="search" style="color: white">Top</a></button>
</div>
}
else
{
    <p>@messageToUser</p>
}

@code{
        #region fields
        static TaskCompletionSource<GeoCoordinate> tcsUserLocation = new TaskCompletionSource<GeoCoordinate>();
        static GeoCoordinate userGeoLocation = new GeoCoordinate(0, 0);

        SortoptionsList sortOptions = new SortoptionsList();
        StoreFilterList storeFilters = new StoreFilterList();
        WordFilterList wordFIlters = new WordFilterList();
        FindCloseStores closeStore;
        ShoppinlistFunctionality SLFunc = new ShoppinlistFunctionality("api/Shoppinglist");

        List<FilterItem> storeList = new List<FilterItem>();
        List<FilterItem> wordList = new List<FilterItem>();
        List<UnifiedAPIStore> allStoresUnified = new List<UnifiedAPIStore>();
        List<Product> itemList = new List<Product>();
        List<Product> ToShoppinglist = new List<Product>();
        List<Options> optionsList = new List<Options>();


        bool[] EnabledStores;
        bool[] EnabledKeywords;

        Product[] slArray = new Product[10];
        string shopString;

        bool viewAdvancedSearch = false;
        bool storeBoolSetTo = true;
        bool wordBoolSetTo = true;
        bool _viewProducts = false;
        bool IsLocationEnabled = false;
        bool FatalFalure = false;

        int value = 1;
        int radius = 1000;
        int amountAddedToSL = 1;

        double _minPrice = 0;
        double _maxPrice = 5000;
        double priceLimit = 10000;

        string searchBox;
        string email;
        string messageToUser = "Apply filters and press search to find products";
        string productString;
        #endregion

        #region Page_Methods
        // Function to get salling products in high resolution
        private string ProductImage(string prod_image)
        {
            return prod_image + "&imgSize=1080x1080";
        }


        protected void IncrementAmount(string id)
        {
            foreach (var item in itemList)
            {
                if (item._id == id && item._amountleft != 0)
                {
                    item._amountleft++;
                    value++;
                }
            }
        }

        protected void DecrementAmount(string id)
        {
            foreach (var item in itemList)
            {

                if (item._id == id && item._amountleft > 1)
                {
                    item._amountleft--;
                    value--;
                }
            }
        }

        void toggleAdvancedCheckBox()
        {
            viewAdvancedSearch = !viewAdvancedSearch;
        }

    public double minPrice
    {
        get => _minPrice;
        set
        {
            if (value < 0)
            {
                _minPrice = 0;
            }
            else if (value > maxPrice)
            {
                _minPrice = maxPrice;
            }
            else
            {
                _minPrice = value;
            }
        }
    }

    public double maxPrice
    {
        get => _maxPrice;
        set
        {
            if (value < 0)
            {
                _maxPrice = 0;
            }
            else if (value > priceLimit)
            {
                _maxPrice = priceLimit;
            }
            else if (value < minPrice)
            {
                _maxPrice = minPrice;
            }
            else
            {
                _maxPrice = value;
            }
        }
    }


    public void ChangeState(string name, List<FilterItem> list)
    {
        foreach (var item in list)
        {
            if (item.FilterName == name)
            {
                item.IsEnabled = !item.IsEnabled;

                break;
            }
        }

    }

    public void ChangeState(string name, List<Options> optionList)
    {
        foreach (Options o in optionList)
        {
            if (o.filterName == name)
            {
                o.isEnabled = true;

                DecideOrderFilter(o.filterName);
            }
            else
            {
                o.isEnabled = false;
            }
        }

    }

    public void DecideOrderFilter(string filterName)
    {
        switch (filterName)
        {
            case "Most relevant":
                SortByMostRelevant();
                break;
            case "Price (Low to High)":
                SortByPriceLH();
                break;
            case "Price (High to Low)":
                SortBypriceHL();
                break;
            case "Alphabetical order (A - Z)":
                SortByNameAZ();
                break;
            case "Alphabetical order (Z - A)":
                SortByNameZA();
                break;
            case "Store (A - Z)":
                SortByStoreAZ();
                break;
            case "Store (Z - A":
                SortByStoreZA();
                break;

        }
    }

    public async void SortByMostRelevant()
    {
        await SearchForProducts();
    }

    public void SortByPriceLH()
    {
        itemList.Sort((a, b) =>  a._price.CompareTo(b._price));
    }

    public void SortBypriceHL()
    {
        itemList.Sort((a, b) =>  b._price.CompareTo(a._price));
    }

    public void SortByStoreAZ()
    {
        itemList.Sort((a, b) =>  a._storeName.CompareTo(b._storeName));
    }

    public void SortByStoreZA()
    {
        itemList.Sort((a, b) =>  b._storeName.CompareTo(a._storeName));
    }

    public void SortByNameAZ()
    {
        itemList.Sort((a, b) =>  a._productName.CompareTo(b._productName));
    }

    public void SortByNameZA()
    {
        itemList.Sort((a, b) =>  b._productName.CompareTo(a._productName));
    }

    void toggle()
    {
        IsLocationEnabled = !IsLocationEnabled;
    }

    public void FindStoreFunc()
    {
        closeStore = new FindCloseStores(userGeoLocation, radius);
        allStoresUnified = closeStore.GetStore();
    }

    public void SelectAll(List<FilterItem> list)
    {
        foreach (var item in list)
        {
            item.IsEnabled = true;
        }
    }
    #endregion

    #region Async_Methods


    public async void AddProductToSL(Product AddedItem)
    {
        AddedItem._amountleft++;

        int actualAmout = AddedItem._amountleft;

        ToShoppinglist.Add(AddedItem);

        ToShoppinglist = HandleDublicats(ToShoppinglist);

        await localStorage.RemoveItemAsync("Shoppinglist");

        shopString = JsonConvert.SerializeObject(ToShoppinglist);

        await localStorage.SetItemAsync("ProductString", shopString);

        //await localStorage.SetItemAsync("Shoppinglist", ToShoppinglist);
    }

    public List<Product> HandleDublicats(List<Product> inputList)
    {
        bool isFound = false;
        List<Product> uniqueList = new List<Product>();
        List<Product> dublicateList = new List<Product>();

        foreach (Product i in inputList)
        {
            isFound = false;
            foreach (Product u in uniqueList)
            {
                if (i._id == u._id)
                {
                    dublicateList.Add(i);
                    isFound = true;
                    break;
                }
            }
            if (isFound == false)
            {
                uniqueList.Add(i);
            }
        }
        return uniqueList;
    }

    private async Task KeyPressed(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchForProducts();
            StateHasChanged();
        }
    }

    private async Task SearchForProducts()
    {

        if (!String.IsNullOrEmpty(searchBox) && !String.IsNullOrWhiteSpace(searchBox))
        {
            updateFilters();

            ProductSearchLinkConstructer link = new ProductSearchLinkConstructer(searchBox, ConvertBoolArrToStr(EnabledKeywords), ConvertBoolArrToStr(EnabledStores));

            productString = await Http.GetStringAsync(link.GetURL());

            if (!(FindActiveSortFilter() == "Most relevant"))
            {
                DecideOrderFilter(FindActiveSortFilter());
            }

            itemList = JsonConvert.DeserializeObject<List<Product>>(productString);
            StateHasChanged();

            if (itemList.Count != 0)
            {
                _viewProducts = true;
            }
        }
        else
        {
            messageToUser = "You Need To Write A Searhcword";
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        optionsList = sortOptions.GetList();

        if (firstRender)
        {
            await GetLocalSession();
            localStorage.Changed += (sender, e) =>
            {
                Console.WriteLine($"Value for key {e.Key} changed from {e.OldValue} to {e.NewValue}");
            };

            storeList = storeFilters.GetStoreList();
            wordList = wordFIlters.GetStoreList();
            InitializeBoolArrays(storeList.Count, wordList.Count);
            if (email != null)
            {
                await SLFunc.GetShoppinglistOnStart(email, ToShoppinglist);
            }

            this.StateHasChanged();
        }

    }


    async Task GetLocalSession()
    {
        email = await localStorage.GetItemAsync<string>("Email");
        shopString = await localStorage.GetItemAsync<string>("ProductString");

        if (!String.IsNullOrEmpty(shopString))
        {
            ToShoppinglist = JsonConvert.DeserializeObject<List<Product>>(shopString);
        }
    }
    #endregion


    #region Filter_Methods
    public string FindActiveSortFilter()
    {
        foreach (Options o in optionsList)
        {
            if (o.isEnabled)
            {
                return o.filterName;
            }
        }
        return "Price (Low to High)";
    }

    public void updateFilters()
    {
        if (IsLocationEnabled)
        {
            try
            {
                FindStoreFunc();
            }
            catch (System.Exception)
            {
                FatalFalure = true;
            }

            if (!FatalFalure)
            {
                EnabledStores = updateEachFilter(storeFilters.GetStoreArray());
                EnabledKeywords = updateEachFilter(wordFIlters.GetWordArray());


                bool[] closeStoreBool = new bool[EnabledStores.Length];


                closeStoreBool = SetAllFilters(closeStoreBool, false);
                closeStoreBool = CompareBoolArr();

                EnabledStores = closeStoreBool;
            }
        }

    }

    public bool[] updateEachFilter(FilterItem[] filterArray)
    {
        bool[] resultFilterArr = new bool[filterArray.Length];
        for (int i = 0; i < filterArray.Length; i++)
        {
            resultFilterArr[i] = filterArray[i].IsEnabled;
        }

        return resultFilterArr;
    }

    public bool[] CompareBoolArr()
    {
        bool[] arr = new bool[EnabledStores.Length];
        arr = SetAllFilters(arr, false);

        foreach (var item in allStoresUnified)
        {
            for (int i = 0; i < storeFilters.GetStoreArray().Length; i++)
            {
                if (item._brand.ToLower().Equals(storeFilters.GetStoreArray()[i].FilterName.ToLower()) && EnabledStores[i])
                {
                    arr[i] = true;
                    break;
                }
            }

        }
        return arr;
    }

    public void InitializeBoolArrays(int stores, int words)
    {
        EnabledStores = new bool[stores];
        EnabledKeywords = new bool[words];

        EnabledStores = SetAllFilters(EnabledStores, true);
        EnabledKeywords = SetAllFilters(EnabledKeywords, false);
    }

    public bool[] SetAllFilters(bool[] arr, bool setTo)
    {
        for (int i = 0; i < arr.Length; i++)
        {
            arr[i] = setTo;
        }
        return arr;
    }

    public string ConvertBoolArrToStr(bool[] arr)
    {
        char[] returnChar = new char[arr.Length];
        for (int i = 0; i < arr.Length; i++)
        {
            returnChar[i] = arr[i] ? '1' : '0';
        }
        return new string(returnChar);
    }
    #endregion
}

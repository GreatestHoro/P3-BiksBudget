@page "/search"

@using BBCollection.BBObjects;
@using FrontEnd2.Data
@using Newtonsoft.Json

@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthenticationFunctionallity uf
<h1> Find a product</h1>

<div class="form-inline md-form mr-auto mb-4">
    <input type="text" class="form-control oi-underline" placeholder="Enter a product name.." @onkeyup="@KeyPressed" @bind="searchBox" />
    <button class="btn btn-rounded btn-outline-success" @onclick="(() => SearchForProducts())">Search</button>
</div>
<div class="form-inline md-form mr-auto mb-4">
    <label class="text-muted">
        Advanced search
        <input type="checkbox" value="viewAdvancedSearch" @onclick="toggleAdvancedCheckBox"/>
    </label>
</div>
@if (viewAdvancedSearch)
{
    <h4> Select options:</h4>
    <div class="d-flex flex-sm-row flex-column">
        <div class="p-2">
            <div class="btn-group show-on-hover">
                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                    <h5>Select Stores </h5>
                    <span clasusergeolos="caret"></span>
                </button>
                <ul class="dropdown-menu" role="menu">
                    @foreach (FilterItem item in storeList)
                    {
                        if (item.IsEnabled == true)
                        {
                            <li><button style="color:green" class="btn btn-block bg-light dropdownListStrorage rounded-0" @onclick="(() => ChangeState(item.FilterName, storeList))">@item.FilterName</button></li>
                        }
                        else
                        {
                            <li><button style="color:red" class="btn btn-block bg-light dropdownListStrorage rounded-0" @onclick="(() => ChangeState(item.FilterName, storeList))">@item.FilterName</button></li>
                        }
                    }
                    <li><button class="btn btn-block bg-light dropdownListStrorage rounded-0" @onclick="(()=>SelectAll(storeList))">Select All</button></li>
                </ul>
            </div>
        </div>
        <div class="p-2">
            <div class="btn-group show-on-hover">
                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                    <h5>Select filters</h5> <span class="caret"></span>
                </button>
                <ul class="dropdown-menu" role="menu">
                    @foreach (var item in wordList)
                    {
                        if (item.IsEnabled == true)
                        {
                            <li><button style="color:green" class="btn btn-block bg-light dropdownListStrorage rounded-0" @onclick="(() => ChangeState(item.FilterName, wordList))">@item.FilterName</button></li>
                        }
                        else
                        {
                            <li><button style="color:red" class="btn btn-block bg-light dropdownListStrorage rounded-0" @onclick="(() => ChangeState(item.FilterName, wordList))">@item.FilterName</button></li>
                        }
                    }
                </ul>
            </div>
        </div>
        <div class="p-2">
            <h5>Distance @(radius / 1000) Km</h5>
            <input type="range" min="0" max="5000" @bind="radius" step="1000" />
        </div>
    </div>
}

@if (_viewProducts == true)
{
<div class="container">
    <div class="row top-margin">
        @foreach (Product p in itemList)
        {
            <div class="col-12 col-sm-8 col-md-6 col-lg-4 top-margin">
                <div class="card w-100 h-100">
                    <div class="card-header h-50 bg-white mx-auto text-center">
                        @if (p._image.Length == 0)
                        {
                            <img style="width:auto; height:200px; " class="card-img-top " src="https://cdn.discordapp.com/attachments/509313911229513740/647326558813421637/normark-2009.png">
                        }
                        else
                        {
                        <img style="width:auto; height:200px; " class="card-img-top " src="@p._image">
                        }
                    </div>
                    <div class="card-body h-50 w-100 bg-secondary rounded mx-auto">
                        <h5 class="card-title w-100">@p._productName</h5>
                        <p class="card-text ">
                            From @p._storeName <hr />
                            @p._amount
                        </p>
                        <div class="buy d-flex justify-content-between align-items-center">
                            <div class="price"><h5 class="mt-4">@p._price kr.</h5></div>
                            <div class="amount">
                                <div class="valueClass text-center">
                                    <p>@p._amountleft</p>
                                </div>
                            </div>
                            <button @onclick="(() => AddProductToSL(p))" class="btn btn-danger mt-3"><i class="oi oi-basket"></i> Add to Cart</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
}
else
{
    <p>@messageToUser</p>
}
@code {
        static TaskCompletionSource<GeoCoordinate> tcsUserLocation = new TaskCompletionSource<GeoCoordinate>();
        static GeoCoordinate userGeoLocation = new GeoCoordinate(0, 0);
        StoreFilterList storeFilters = new StoreFilterList();
        WordFilterList wordFIlters = new WordFilterList();
        FindCloseStores closeStore;
        ShoppinlistFunctionality SLFunc = new ShoppinlistFunctionality("api/Shoppinglist");

        List<FilterItem> storeList = new List<FilterItem>();
        List<FilterItem> wordList = new List<FilterItem>();
        List<UnifiedAPIStore> allStoresUnified = new List<UnifiedAPIStore>();
        List<Product> itemList = new List<Product>();
        List<Product> ToShoppinglist = new List<Product>();

        bool[] EnabledStores;
        bool[] EnabledKeywords;

        Product[] slArray = new Product[10];
        string shopString;

        bool viewAdvancedSearch = false;
        bool storeBoolSetTo = true;
        bool wordBoolSetTo = true;
        bool _viewProducts = false;
        bool IsLocationEnabled = false;
        bool FatalFalure = false;

        int value = 1;
        int radius = 1000;
        int amountAddedToSL = 1;
        double _minPrice = 0;
        double _maxPrice = 5000;
        double priceLimit = 10000;

        protected void IncrementAmount(string id)
        {
            foreach (var item in itemList)
            {
                if (item._id == id && item._amountleft != 0)
                {
                    item._amountleft++;
                    value++;
                }
            }
        }

        protected void DecrementAmount(string id)
        {
            foreach (var item in itemList)
            {

                if (item._id == id && item._amountleft > 1)
                {
                    item._amountleft--;
                    value--;
                }
            }
        }




        void toggleAdvancedCheckBox()
        {
            viewAdvancedSearch = !viewAdvancedSearch;
        }

    public double minPrice
    {
        get => _minPrice;
        set
        {
            if (value < 0)
            {
                _minPrice = 0;
            }
            else if (value > maxPrice)
            {
                _minPrice = maxPrice;
            }
            else
            {
                _minPrice = value;
            }
        }
    }

    public double maxPrice
    {
        get => _maxPrice;
        set
        {
            if (value < 0)
            {
                _maxPrice = 0;
            }
            else if (value > priceLimit)
            {
                _maxPrice = priceLimit;
            }
            else if (value < minPrice)
            {
                _maxPrice = minPrice;
            }
            else
            {
                _maxPrice = value;
            }
        }
    }

    string searchBox;
    string email;
    string messageToUser = "Apply Filters And Press Search To Find Products";
    string productString;

    public void ChangeState(string name, List<FilterItem> list)
    {
        foreach (var item in list)
        {
            if (item.FilterName == name)
            {
                item.IsEnabled = !item.IsEnabled;

                break;
            }
        }

    }

    void toggle()
    {
        IsLocationEnabled = !IsLocationEnabled;
    }

    public void FindStoreFunc()
    {
        closeStore = new FindCloseStores(userGeoLocation, radius);
        allStoresUnified = closeStore.GetStore();
    }

    public void SelectAll(List<FilterItem> list)
    {
        foreach (var item in list)
        {
            item.IsEnabled = true;
        }
    }

    public async void AddProductToSL(Product AddedItem)
    {

        AddedItem._amountleft += 1;

        ToShoppinglist.Add(AddedItem);

        value = AddedItem._amountleft;

        AddedItem._amountleft = 1;

        //await localStorage.RemoveItemAsync("Shoppinglist");

        shopString = JsonConvert.SerializeObject(ToShoppinglist);

        await localStorage.SetItemAsync("ProductString", shopString);
        //await localStorage.SetItemAsync("Shoppinglist", ToShoppinglist);
    }

    private async Task KeyPressed(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchForProducts();
            StateHasChanged();
        }
    }

    private async Task SearchForProducts()
    {

        if (!String.IsNullOrEmpty(searchBox) && !String.IsNullOrWhiteSpace(searchBox))
        {


            updateFilters();

            ProductSearchLinkConstructer link = new ProductSearchLinkConstructer(searchBox, ConvertBoolArrToStr(EnabledKeywords), ConvertBoolArrToStr(EnabledStores));

            productString = await Http.GetStringAsync(link.GetURL());

            itemList = JsonConvert.DeserializeObject<List<Product>>(productString);

            if (itemList.Count != 0)
            {
                _viewProducts = true;
            }
        }
        else
        {
            messageToUser = "You Need To Write A Searhcword";
        }
    }
    public void updateFilters()
    {
        if (IsLocationEnabled)
        {
            try
            {
                FindStoreFunc();
            }
            catch (System.Exception)
            {
                FatalFalure = true;
            }

            if (!FatalFalure)
            {
                EnabledStores = updateEachFilter(storeFilters.GetStoreArray());
                EnabledKeywords = updateEachFilter(wordFIlters.GetWordArray());


                bool[] closeStoreBool = new bool[EnabledStores.Length];


                closeStoreBool = SetAllFilters(closeStoreBool, false);
                closeStoreBool = CompareBoolArr();

                EnabledStores = closeStoreBool;
            }
        }

    }

    public bool[] updateEachFilter(FilterItem[] filterArray)
    {
        bool[] resultFilterArr = new bool[filterArray.Length];
        for (int i = 0; i < filterArray.Length; i++)
        {
            resultFilterArr[i] = filterArray[i].IsEnabled;
        }

        return resultFilterArr;
    }

    public bool[] CompareBoolArr()
    {
        bool[] arr = new bool[EnabledStores.Length];
        arr = SetAllFilters(arr, false);

        foreach (var item in allStoresUnified)
        {
            for (int i = 0; i < storeFilters.GetStoreArray().Length; i++)
            {
                if (item._brand.ToLower().Equals(storeFilters.GetStoreArray()[i].FilterName.ToLower()) && EnabledStores[i])
                {
                    arr[i] = true;
                    break;
                }
            }

        }
        return arr;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetLocalSession();
            localStorage.Changed += (sender, e) =>
            {
                Console.WriteLine($"Value for key {e.Key} changed from {e.OldValue} to {e.NewValue}");
            };

            storeList = storeFilters.GetStoreList();
            wordList = wordFIlters.GetStoreList();
            InitializeBoolArrays(storeList.Count, wordList.Count);
            if (email != null)
            {
                await SLFunc.GetShoppinglistOnStart(email, ToShoppinglist);
            }

            this.StateHasChanged();
        }

    }
    public void InitializeBoolArrays(int stores, int words)
    {
        EnabledStores = new bool[stores];
        EnabledKeywords = new bool[words];

        EnabledStores = SetAllFilters(EnabledStores, true);
        EnabledKeywords = SetAllFilters(EnabledKeywords, false);
    }

    public bool[] SetAllFilters(bool[] arr, bool setTo)
    {
        for (int i = 0; i < arr.Length; i++)
        {
            arr[i] = setTo;
        }
        return arr;
    }

    public string ConvertBoolArrToStr(bool[] arr)
    {
        char[] returnChar = new char[arr.Length];
        for (int i = 0; i < arr.Length; i++)
        {
            returnChar[i] = arr[i] ? '1' : '0';
        }
        return new string(returnChar);
    }

    async Task GetLocalSession()
    {
        email = await localStorage.GetItemAsync<string>("Email");
        shopString = await localStorage.GetItemAsync<string>("ProductString");

        if (!String.IsNullOrEmpty(shopString))
        {
            ToShoppinglist = JsonConvert.DeserializeObject<List<Product>>(shopString);
        }
    }

}

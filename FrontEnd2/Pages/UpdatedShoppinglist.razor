@page "/shoppinglist"

@using Newtonsoft.Json;
@using BBCollection.BBObjects;
@using FrontEnd2.Data;

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient Http

    @if (ListFunc.CombinedList == null)
    {
        <p><em> Loading list .. </em></p>
    }
    else
    {
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <table id="cart" class="table table-hover table-condensed">
                        <thead>
                            <tr>
                                <th style="width:48%">Product</th>
                                <th style="width:10%">Price</th>
                                <th style="width:20%">Quantity</th>
                                <th style="width:10%" class="text-center">Subtotal</th>
                                <th style="width:12%"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (Product item in @*removeDublicates(*@ListFunc.CombinedList@*)*@)
                            {
                                    <tr>
                                        <td data-th="Product">
                                            <div class="row">
                                                @*<div class="col-sm-2 hidden-xs"><img src="@ProductImage(item._image)" class="img-responsive" /></div>*@
                                                <div class="col-sm-10">
                                                    <h4 class="nomargin">@item._productName</h4>
                                                    <p>@item._amount</p>
                                                </div>
                                            </div>
                                        </td>
                                    
                                    <td data-th="Price">@item._price kr</td>
                                    <td data-th="Quantity">
                                        <div class="valueClass text-center">
                                            <div class="value-button" id="increase" @onclick="(() => DecrementAmount(item))" value="Increase @value"> - </div>
                                            <input type="number" id="number" value="@item._amountleft" />
                                            <div class="value-button" id="decrease" @onclick="(() => IncrementAmount(item))" value="Decrease @value"> + </div>
                                        </div>
                                    </td>
                                    <td data-th="Subtotal" class="text-center">@String.Format("{0:0.0}", ListFunc.FindSubtotal(item))kr</td>
                                    <td class="actions" data-th="">
                                        @if (!String.IsNullOrEmpty(email))
                                        {
                                            <button class="btn btn-info btn-sm" title="Add one @item._productName to your Storage" @onclick="(() => AddOneItemToStorage(item))"><i class="oi oi-basket"></i></button>
                                        }
                                        else
                                        {
                                            <button disabled class="btn btn-info btn-sm invisibleBtn" title="Log in to access storage"><i class="oi oi-basket"></i></button>
                                        }

                                        @if (item._amountleft > 1 && !String.IsNullOrEmpty(email))
                                        {
                                            <button class="btn btn-info btn-sm addMore" title="Add @item._amountleft @item._productName to your Storage" @onclick="(() => AddItemToStorage(item))">
                                                <i class="oi oi-basket">(All)</i>
                                            </button>
                                        }
                                        else if (String.IsNullOrEmpty(email))
                                        {
                                            <button disabled class="btn btn-info btn-sm invisibleBtn" title="Log in to access storage"><i class="oi oi-basket">(All)</i></button>
                                        }
                                        else
                                        {
                                            <button disabled class="btn btn-info btn-sm invisibleBtn"><i class="oi oi-basket">(All)</i></button>
                                        }

                                        <button class="btn btn-danger btn-sm" title="Delete one @item._productName from your shoppinglist" @onclick="(() => ChangeAmount(item))"><i class="oi oi-trash"></i></button>
                                        @if (item._amountleft > 1)
                                        {
                                            <button class="btn btn-danger btn-sm" title="Delete @item._amountleft @item._productName from your shoppinglist" @onclick="(() => DeleteItem(item))"><i class="oi oi-trash"></i>(All)</button>
                                        }
                                        else
                                        {
                                            <button disabled class="btn btn-danger btn-sm addMore invisibleBtn"><i class="oi oi-trash"></i>(All)</button>
                                        }
                                    </td>
                                
                            </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr class="visible-xs">
                                <td class="text-center"><strong>Total @String.Format("{0:0.0}", ListFunc.CompletePrice())</strong></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-4">
                    @if (isLoggedIn)
                    {
                        <button class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() =>AddListToStorage())">Add to storage</button>
                    }
                    else
                    {
                        <button disabled class="btn btn-block btn-light recipeDivDisplay rounded-0" title="Log in to access storage">Add to storage</button>
                    }
                </div>
                <div class="col-sm-4">
                    @if (remindToSave)
                    {
                        <button class="btn btn-block btn-danger recipeDivDisplay rounded-0" @onclick="(() =>SaveShoppinglist())">Save shoppinlist</button>
                    }
                    else
                    {
                        <button class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() =>SaveShoppinglist())">Save shoppinlist</button>
                    }
                </div>
                <div class="col-sm-4">
                    <button class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() =>DeleteShoppinglist())">Delete shoppinglist</button>
                </div>
            </div>
        </div>
    }

@code {

    #region Fields
    ShoppinlistFunctionality ListFunc = new ShoppinlistFunctionality("api/Shoppinglist");
    HttpResponseMessage responseMessage = new HttpResponseMessage();

    List<Product> ToShoppinglist = new List<Product>();
    List<Product> ToStorageList = new List<Product>();

    bool remindToSave = false;
    bool isLoggedIn = false;

    int value = 1;

    string email;
    string shopString;
    string productString;
    string dest = "api/Storage";
    #endregion

    #region EditShoppintlistProducts
    protected void IncrementAmount(Product item)
    {
        remindToSave = true;
        item._amountleft++;
    }

    protected void DecrementAmount(Product item)
    {
        remindToSave = true;

        if (item._amountleft > 1)
        {
            item._amountleft--;
        }

    }

    public void DeleteItem(Product item)
    {
        item._amountleft = 1;
        ChangeAmount(item);
    }

    public void ChangeAmount(Product item)
    {
        remindToSave = true;
        if (item._amountleft == 1)
        {
            ListFunc.CombinedList.Remove(ListFunc.CombinedList.First(x => x._id == item._id));
        }
        else
        {
            item._amountleft--;
        }
    }

    #endregion

    #region LocalStorage
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetLocalSession();
            localStorage.Changed += (sender, e) =>
            {
                Console.WriteLine($"Value for key {e.Key} changed from {e.OldValue} to {e.NewValue}");
            };

            if(!String.IsNullOrEmpty(email))
            {
                isLoggedIn = true;
                responseMessage = await ListFunc.GetShoppinglistOnStart(email);
            }
            else if (!String.IsNullOrEmpty(shopString))
            {
                ToShoppinglist = JsonConvert.DeserializeObject<List<Product>>(shopString);
                ListFunc.GetShoppinglistWhileNotLoggedIn(ToShoppinglist);
            }

            StateHasChanged();
        }

    }

    async Task GetLocalSession()
    {
        email = await localStorage.GetItemAsync<string>("Email");

        if (String.IsNullOrEmpty(email))
        {
            shopString = await localStorage.GetItemAsync<string>("ProductString");
        }
    }
    #endregion

    #region Shoppinglist

    public async void SaveShoppinglist()
    {
        remindToSave = false;

        if (String.IsNullOrEmpty(email))
        {
            productString = JsonConvert.SerializeObject(ListFunc.CombinedList);

            await localStorage.RemoveItemAsync("ProductString");

            await localStorage.SetItemAsync("ProductString", productString);
        }
        else
        {
            ListFunc.SaveShoppinglist();
        }
    }

    #endregion

    #region Storage
    public void AddListToStorage()
    {
        remindToSave = true;
        ListFunc.AddShoppinlistToStorage(dest);
        ListFunc.CombinedList.Clear();
    }

    public void DeleteShoppinglist()
    {
        remindToSave = true;
        ListFunc.CombinedList.Clear();
    }

    public void AddItemToStorage(Product AddedItem)
    {
        remindToSave = true;
        ListFunc.AddItemToStorage(AddedItem, dest);

        DeleteItem(AddedItem);
    }

    public void AddOneItemToStorage(Product AddedItem)
    {
        remindToSave = true;
        if (AddedItem._amountleft > 1)
        {
            AddedItem._amountleft--;
            ListFunc.AddOneItemToStorage(AddedItem, dest);
        }
        else
        {
            AddItemToStorage(AddedItem);
        }
    }

    #endregion

    #region HandleDublicates
    public List<Product> removeDublicates(List<Product> shoppingList)
    {
        Dictionary<string, Product> dict = new Dictionary<string, Product>();

        foreach(Product p in shoppingList)
        {
            if (p._productName != null)
            {
                if (dict.ContainsKey(p._productName))
                {
                    dict[p._productName]._amountleft++;
                }
                else
                {
                    dict.Add(p._productName,p);
                }
            }
        }

        shoppingList.Clear();
        foreach (KeyValuePair<string, Product> item in dict)
        {
            shoppingList.Add(dict[item.Key]);
        }

        return shoppingList;
    }
    // Function to get salling products in high resolution
    private string ProductImage(string prod_image)
    {
        return prod_image + "&imgSize=1080x1080";
    }
    #endregion
}

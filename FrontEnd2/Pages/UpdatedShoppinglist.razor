@page "/shoppinglist"

@using Newtonsoft.Json;
@using BBCollection.BBObjects;
@using FrontEnd2.Data;

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthenticationFunctionallity uf
@inject HttpClient Http



@inject HttpClient Http

@if (email == null)
{
    <p> You need to be logged in to see shoppinglist</p>
}
else
{

    @if (ListFunc.CombinedList == null)
    {
        <p><em> Loading list .. </em></p>
    }
    else
    {
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <table id="cart" class="table table-hover table-condensed">
                        <thead>
                            <tr>
                                <th style="width:50%">Product</th>
                                <th style="width:10%">Price</th>
                                <th style="width:20%">Quantity</th>
                                <th style="width:10%" class="text-center">Subtotal</th>
                                <th style="width:10%"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (Product item in removeDublicates(ListFunc.CombinedList))
                            {
                                    <tr>
                                        <td data-th="Product">
                                            <div class="row">
                                                <div class="col-sm-2 hidden-xs"><img src="@ProductImage(item._image)" class="img-responsive" /></div>
                                                <div class="col-sm-10">
                                                    <h4 class="nomargin">@item._productName</h4>
                                                    <p>@item._amount</p>
                                                </div>
                                            </div>
                                        </td>

                                    <td data-th="Price">@item._price kr</td>
                                    <td data-th="Quantity">
                                        <div class="valueClass text-center">
                                            <div class="value-button" id="increase" @onclick="(() => DecrementAmount(item._id))" value="Increase @value"> - </div>
                                            <input type="number" id="number" value="@item._amountleft" />
                                            <div class="value-button" id="decrease" @onclick="(() => IncrementAmount(item._id))" value="Decrease @value"> + </div>
                                        </div>
                                    </td>
                                    <td data-th="Subtotal" class="text-center">@ListFunc.FindSubtotal(item) kr</td>
                                    <td class="actions" data-th="">
                                        <button class="btn btn-info btn-sm" @onclick="(() => AddItemToStorage(item))"><i class="oi oi-reload"></i></button>
                                        <button class="btn btn-danger btn-sm" @onclick="(() => ListFunc.DeleteItem(item._id))"><i class="oi oi-trash"></i></button>
                                    </td>
                                </tr>
                            }

                        </tbody>
                        <tfoot>
                            <tr class="visible-xs">
                                <td class="text-center"><strong>Total @ListFunc.CompletePrice()</strong></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-4">
                    <button class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() =>AddToStorage())">Add to strorage</button>
                </div>
                @*<div class="col-sm-4">
                    <button class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() =>ListFunc.AddFuncList())">Save shoppinlist</button>
                </div>*@
                <div class="col-sm-4">
                    <button class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() =>SaveShoppinglist())">Save shoppinlist</button>
                </div>
                <div class="col-sm-4">
                    <button class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() =>ListFunc.DeleteFuncList())">Delete shoppinglist</button>
                </div>
            </div>
        </div>
    }
}

@code {
    string productString;
    string newProduct;
    string dest = "api/Storage";
    ShoppinlistFunctionality ListFunc = new ShoppinlistFunctionality("api/Shoppinglist");
    HttpResponseMessage responseMessage = new HttpResponseMessage();
    int value = 1;
    int amount;
    int currentValue;
    bool test = false;
    string email;
    List<Product> ToShoppinglist = new List<Product>();
    List<Product> ToStorageList = new List<Product>();
    string shopString;
    string storageString;


    protected void IncrementAmount(string id)
    {
        foreach (var item in ListFunc.CombinedList)
        {
            if (item._id == id && item._amountleft != 0)
            {
                item._amountleft++;
                value++;
            }
        }
    }

    protected void DecrementAmount(string id)
    {
        foreach (var item in ListFunc.CombinedList)
        {

            if (item._id == id && item._amountleft > 1)
            {
                item._amountleft--;
                value--;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetLocalSession();
            localStorage.Changed += (sender, e) =>
            {
                Console.WriteLine($"Value for key {e.Key} changed from {e.OldValue} to {e.NewValue}");
            };

            if(email != null)
            {
            responseMessage = await ListFunc.GetShoppinglistOnStart(email, ToShoppinglist);
            }

            StateHasChanged();
        }

    }

    async Task GetLocalSession()
    {
        email = await localStorage.GetItemAsync<string>("Email");
        shopString = await localStorage.GetItemAsync<string>("ProductString");

        if (!String.IsNullOrEmpty(shopString))
        {
            ToShoppinglist = JsonConvert.DeserializeObject<List<Product>>(shopString);
        }
    }

    public async void SaveShoppinglist()
    {
        await localStorage.RemoveItemAsync("ProductString");

        ListFunc.AddFuncList();
    }

    public async void AddToStorage()
    {
        //await localStorage.RemoveItemAsync("StorageString");
        ListFunc.AddShoppinlistToStorage(dest);
    }

    public async void AddItemToStorage(Product AddedItem)
    {
        ListFunc.AddItemToStorage(AddedItem, dest);
        await ListFunc.DeleteItem(AddedItem._id);
    }
    public List<Product> removeDublicates(List<Product> shoppingList)
    {
        Dictionary<string, Product> dict = new Dictionary<string, Product>();

        foreach(Product p in shoppingList)
        {
            if (p._productName != null)
            {
                if (dict.ContainsKey(p._productName))
                {
                    dict[p._productName]._amountleft++;
                }
                else
                {
                    dict.Add(p._productName,p);
                }
            }

        }
        shoppingList.Clear();
        foreach (KeyValuePair<string, Product> item in dict)
        {
            shoppingList.Add(dict[item.Key]);
        }
        //ListFunc.CombinedList = shoppingList;
        return shoppingList;
        //List<Product> newList = new List<Product>();
        //newList.Add(shoppingList.Where(x => x != x._productName.Contains(newList.ForEach(x => x._productName))));


    }
        // Function to get salling products in high resolution
        private string ProductImage(string prod_image)
        {
            return prod_image + "&imgSize=1080x1080";
        }

}

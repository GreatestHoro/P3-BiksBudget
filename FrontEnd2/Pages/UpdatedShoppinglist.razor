@page "/shoppinglist"

@using Newtonsoft.Json;
@using BBCollection.BBObjects;
@using FrontEnd2.Data;

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthenticationFunctionallity uf
@inject HttpClient Http



@inject HttpClient Http

@if (email == null)
{
    <p> You need to be logged in to wieved in shoppinglist</p>
}
else
{

    @if (ListFunc.itemList == null)
    {
        <p><em> Loaging list .. </em></p>
    }
    else
    {
        <div class="container">
            <table id="cart" class="table table-hover table-condensed">
                <thead>
                    <tr>
                        <th style="width:50%">Product</th>
                        <th style="width:10%">Price</th>
                        <th style="width:8%">Quantity</th>
                        <th style="width:22%" class="text-center">Subtotal</th>
                        <th style="width:10%"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in ListFunc.itemList)
                    {

                        <tr>
                            <td data-th="Product">
                                <div class="row">
                                    <div class="col-sm-2 hidden-xs"><img src="@item._image" class="img-responsive" /></div>
                                    <div class="col-sm-10">
                                        <h4 class="nomargin">@item._productName</h4>
                                        <p> Description: @item._amount</p>
                                    </div>
                                </div>
                            </td>
                            <td data-th="Price">@item._price</td>
                            <td data-th="Quantity">
                                @*<input type="number" placeholder="@item._amountleft" class="form-control text-center" value="">*@
                                <div class="text-center">
                                    <button @onclick="(() => DecrementAmount(item._id))"><i class="oi oi-minus"></i></button>
                                    @item._amountleft
                                    <button @onclick="(() => IncrementAmount(item._id))"><i class="oi oi-plus"></i></button>
                                </div>
                            </td>
                            <td data-th="Subtotal" class="text-center">subtotal @ListFunc.FindSubtotal(item)</td>
                            <td class="actions" data-th="">
                                <button class="btn btn-info btn-sm" @onclick="(() => ListFunc.AddItemToStorage(item, email))"><i class="oi oi-reload"></i></button>
                                <button class="btn btn-danger btn-sm"@onclick="(() => ListFunc.DeleteItem(item._id, email))"><i class="oi oi-trash"></i></button>
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr class="visible-xs">
                        <td class="text-center"><strong>Total @ListFunc.CompletePrice()</strong></td>
                    </tr>
                    <tr>
                        <td colspan="2" class="hidden-xs"></td>
                        <td class="hidden-xs text-center"><strong>Total @ListFunc.CompletePrice()</strong></td>
                        @*<td><a href="#" class="btn btn-success btn-block">Save Shopping list </a></td>*@
                        <td class="actions" data-th="">
                            <button class="btn btn-success btn-block" @onclick="(() =>ListFunc.AddShoppinlistToStorage(dest, email))"><i>Add To Strorage</i></button>
                            <button class="btn btn-success btn-block" @onclick="(() =>ListFunc.AddFuncList(email))"><i>Save Shoppinlist</i></button>
                            <button class="btn btn-success btn-block" @onclick="(() =>ListFunc.DeleteFuncList(email))"><i>Delete Shoppinglist</i></button>
                        </td>
                    </tr>
                </tfoot>
            </table>
        </div>
    }
}

@code {
    string productString;
    string newProduct;
    string dest = "api/Storage";
    ShoppinlistFunctionality ListFunc = new ShoppinlistFunctionality("api/Shoppinglist");
    HttpResponseMessage responseMessage = new HttpResponseMessage();
    int ammount;
    string email;

    protected void IncrementAmount(string id)
    {
        foreach (var item in ListFunc.itemList)
        {
            if (item._id == id)
            {
                item._amountleft++;
            }
        }
    }

    protected void DecrementAmount(string id)
    {
        foreach (var item in ListFunc.itemList)
        {

            if (item._id == id && item._amountleft > 1)
            {
                item._amountleft--;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetLocalSession();
            localStorage.Changed += (sender, e) =>
            {
                Console.WriteLine($"Value for key {e.Key} changed from {e.OldValue} to {e.NewValue}");
            };

            responseMessage = await ListFunc.GetProductsOnStart(email);

            StateHasChanged();
        }

    }

    async Task GetLocalSession()
    {
        email = await localStorage.GetItemAsync<string>("Email");
    }

}

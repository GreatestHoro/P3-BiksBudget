@page "/shoppinglist"

@using Newtonsoft.Json;
@using BBCollection.BBObjects;
@using BBCollection.DBHandling;
@using FrontEnd2.Data;

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient Http

<h1>Shopping List</h1>
    @if (ListFunc.CombinedList == null)
    {
        <p><em> Loading list .. </em></p>
    }
    else
    {
<div class="container">
    <div class="row">
        <div class="col-sm-12">
            <table id="cart" class="table table-hover table-condensed">
                <thead>
                    <tr>
                        <th style="width:40%">Product</th>
                        <th style="width:18%" class="textForTable">Price</th>
                        <th style="width:20%" class="textForTable">Quantity</th>
                        <th style="width:10%" class="textForTable">Subtotal</th>
                        <th style="width:12%"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Product item in ListFunc.CombinedList)
                    {
                        <tr>
                            <td data-th="Product">
                                <div class="row">

                                    <div class="col-sm-10">
                                        @if (item._image.Length == 0)
                                        {
                                            <img style="width:100px; height:auto; " class="card-img-top " src="https://cdn.discordapp.com/attachments/519096261408718908/649685312083197973/coopdicoop.jpg">
                                        }
                                        else
                                        {
                                            <img style="width: auto; height: auto; max-height:100px; max-width: 100px;"
                                                 class="card-img-top" src="@ProductImage(item._image)">
                                        }
                                        <h6 class="nomargin">@item._productName</h6>
                                        <p>@item._amount</p>
                                    </div>
                                </div>
                            </td>

                            <td data-th="Price" class="textForTable">@item._price kr. per unit</td>
                            <td data-th="Quantity">
                                <div class="valueClass text-center">
                                    <div class="value-button" id="increase" @onclick="(() => DecrementAmount(item))" value="Increase @value"> - </div>
                                    <input type="number" id="number" value="@item._amountleft" />
                                    <div class="value-button" id="decrease" @onclick="(() => IncrementAmount(item))" value="Decrease @value"> + </div>
                                </div>
                            </td>
                            <td data-th="Subtotal" class="text-center">@String.Format("{0:0.00}", ListFunc.FindSubtotal(item)) kr.</td>
                            <td class="actions textForTable" data-th="">
                                @if (!String.IsNullOrEmpty(email))
                                {
                                    <button class="btn btn-rounded btn-success btn-padding btn-sm" title="Add one @item._productName to your Storage" @onclick="(() => AddOneItemToStorage(item))"><i class="oi oi-box"></i></button>
                                }
                                else
                                {
                                    <button disabled class="btn btn-rounded btn-success btn-padding btn-sm invisibleBtn" title="Log in to access storage"><i class="oi oi-box"></i></button>
                                }

                                @if (item._amountleft > 1 && !String.IsNullOrEmpty(email))
                                {
                                    <button class="btn btn-rounded btn-success btn-padding btn-sm addMore" title="Add @item._amountleft @item._productName to your Storage" @onclick="(() => AddItemToStorage(item))">
                                        <i class="oi oi-box"></i> (All)
                                    </button>
                                }
                                else if (String.IsNullOrEmpty(email))
                                {
                                    <button disabled class="btn btn-rounded btn-success btn-padding btn-sm invisibleBtn" title="Log in to access storage"><i class="oi oi-box"></i> (All)</button>
                                }
                                else
                                {
                                    <button disabled class="btn btn-rounded btn-success btn-padding btn-sm invisibleBtn"><i class="oi oi-box"></i> (All)</button>
                                }

                                <button class="btn btn-rounded btn-danger btn-padding btn-sm" title="Delete one @item._productName from your shopping list" @onclick="(() => ChangeAmount(item))"><i class="oi oi-trash"></i></button>
                                @if (item._amountleft > 1)
                                {
                                    <button class="btn btn-rounded btn-danger btn-padding btn-sm" title="Delete @item._amountleft @item._productName from your shopping list" @onclick="(() => DeleteItem(item))"><i class="oi oi-trash"></i> (All)</button>
                                }
                                else
                                {
                                    <button disabled class="btn btn-rounded btn-danger btn-padding btn-sm addMore invisibleBtn"><i class="oi oi-trash"></i> (All)</button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr class="visible-xs">
                        <td class="text-center"><strong>Total @String.Format("{0:0.0}", ListFunc.CompletePrice())</strong></td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-4">
            @if (ListFunc.CombinedList.Count == 0 && isLoggedIn)
            {
                <button disabled class="btn btn-block btn-light recipeDivDisplay rounded-0" title="You Cannot Add an Empty Shopping list to Storage">Add to storage</button>
            }
            else if (isLoggedIn)
            {
                <button class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() =>AddListToStorage())">Add to storage</button>
            }
            else
            {
                <button disabled class="btn btn-block btn-light recipeDivDisplay rounded-0" title="Log in to access storage">Add to storage</button>
            }
        </div>
        <div class="col-sm-4">
            @if (remindToSave)
            {
                <button class="btn btn-block btn-danger recipeDivDisplay rounded-0" @onclick="(() =>SaveShoppinglist())">Save shopping list</button>
            }
            else
            {
                <button class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() =>SaveShoppinglist())">Save shopping list</button>
            }
        </div>
        <div class="col-sm-4">
            @if (ListFunc.CombinedList.Count == 0)
            {
                <button class="btn btn-block btn-light recipeDivDisplay rounded-0" disabled title="You Cannot Delete an Empty Shopping list">Delete shopping list</button>

            }
            else
            {
                <button class="btn btn-block btn-light recipeDivDisplay rounded-0" @onclick="(() =>DeleteShoppinglist())">Delete shopping list</button>
            }
        </div>
    </div>
    <!--Scroll to top button   -->
    <button id="myBtn" class="btn btn-rounded btn-success"><a href="shoppinglist" style="color: white; font-size:12px;">Top</a></button>
</div>
    }

@code {

    #region Fields
    ShoppinlistFunctionality ListFunc = new ShoppinlistFunctionality("api/Shoppinglist");
    HttpResponseMessage responseMessage = new HttpResponseMessage();

    List<Product> ToShoppinglist = new List<Product>();
    List<Product> ToStorageList = new List<Product>();

    bool remindToSave = false;
    bool isLoggedIn = false;

    int value = 1;

    string email;
    string shopString;
    string productString;
    #endregion

    #region EditShoppintlistProducts
    protected void IncrementAmount(Product item)
    {
        remindToSave = true;
        item._amountleft++;
    }

    protected void DecrementAmount(Product item)
    {
        remindToSave = true;

        if (item._amountleft > 1)
        {
            item._amountleft--;
        }

    }

    public void DeleteItem(Product item)
    {
        item._amountleft = 1;
        ChangeAmount(item);
    }

    public void ChangeAmount(Product item)
    {
        remindToSave = true;
        if (item._amountleft == 1)
        {
            // If there is only one left, delete it
            ListFunc.CombinedList.Remove(ListFunc.CombinedList.First(x => x._id == item._id));
        }
        else
        {
            // Else count the amount left
            item._amountleft--;
        }
    }

    #endregion

    #region LocalStorage

    /// <summary>
    /// This method will check if the user is logged in.
    /// If he is, his data will be called from the api.
    /// If not the local storage will be used.
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetLocalSession();

            // If emain is found, the user is logged in
            if(!String.IsNullOrEmpty(email))
            {
                isLoggedIn = true;

                // THis means he has a shoppinglist, and this will be called throuhg the api
                responseMessage = await ListFunc.GetShoppinglistOnStart(email);
            }
            else if (!String.IsNullOrEmpty(shopString))
            {
                // If the user is not logged in, and there is products in the localstorage
                // this will be put into the shoppinglist
                ToShoppinglist = JsonConvert.DeserializeObject<List<Product>>(shopString);
                ListFunc.GetShoppinglistWhileNotLoggedIn(ToShoppinglist);
            }

            StateHasChanged();
        }
    }

    /// <summary>
    /// If the user is logged in, the user email is found.
    /// The email is used for storage and shoppinglist
    /// If the user is not logged in the local storage will be used to
    /// get a list of products instead. This list is the shoppinglist
    /// </summary>
    /// <returns></returns>
    async Task GetLocalSession()
    {
        email = await localStorage.GetItemAsync<string>("Email");

        if (String.IsNullOrEmpty(email))
        {
            shopString = await localStorage.GetItemAsync<string>("ProductString");
        }
    }
    #endregion

    #region Shoppinglist


    /// <summary>
    /// This method saves the shoppinglist.
    /// This is done differently if the user is or is not logged in.
    /// If he is logged in, the shoppinglist will be saved with the api
    /// If not logged in the shoppinglist will be saved in local storage
    /// </summary>
    public async void SaveShoppinglist()
    {
        remindToSave = false;

        if (String.IsNullOrEmpty(email))
        {
            productString = JsonConvert.SerializeObject(ListFunc.CombinedList);

            await localStorage.RemoveItemAsync("ProductString");

            await localStorage.SetItemAsync("ProductString", productString);
        }
        else
        {
            await ListFunc.SaveShoppinglist();
        }
    }

    #endregion

    #region Storage

    /// <summary>
    /// This method can only be called if logged in.
    /// It reminds the user to save the shoppinglist before moving on.
    /// Deletes the shoppinglist, and adds it to storage.
    /// </summary>
    public async void AddListToStorage()
    {
        remindToSave = true;
        await ListFunc.AddShoppinlistToStorage();
        ListFunc.CombinedList.Clear();
    }

    public void DeleteShoppinglist()
    {
        remindToSave = true;
        ListFunc.CombinedList.Clear();
    }

    public async void AddItemToStorage(Product AddedItem)
    {
        remindToSave = true;
        await ListFunc.AddItemToStorage(AddedItem);

        DeleteItem(AddedItem);
    }

    public async void AddOneItemToStorage(Product AddedItem)
    {
        remindToSave = true;
        if (AddedItem._amountleft > 1)
        {
            // If there is more than one left, the amount is decremented and one 
            // product is added
            AddedItem._amountleft--;
            await ListFunc.AddOneItemToStorage(AddedItem);
        }
        else
        {
            // If there is only one left, the product is deleted in shoppinglist
            // and added to storage.
            AddItemToStorage(AddedItem);
        }
    }

    #endregion

    #region Imagese
    // Function to get salling products in high resolution
    private string ProductImage(string prod_image)
    {
        return prod_image + "&imgSize=1080x1080";
    }
    #endregion
}

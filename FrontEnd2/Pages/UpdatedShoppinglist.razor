@page "/shoppinglist"

@using Newtonsoft.Json;
@using BBCollection.BBObjects;
@using FrontEnd2.Data;

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthenticationFunctionallity uf
@inject HttpClient Http



@inject HttpClient Http

@if (email == null)
{
    <p> You need to be logged in to wieved in shoppinglist</p>
}
else
{

    @if (ListFunc.itemList == null)
    {
        <p><em> Loaging list .. </em></p>
    }
    else
    {
        <div class="container">
            <table id="cart" class="table table-hover table-condensed">
                <thead>
                    <tr>
                        <th style="width:50%">Product</th>
                        <th style="width:10%">Price</th>
                        <th style="width:8%">Quantity</th>
                        <th style="width:22%" class="text-center">Subtotal</th>
                        <th style="width:10%"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in ListFunc.itemList)
                    {

                        <tr>
                            <td data-th="Product">
                                <div class="row">
                                    <div class="col-sm-2 hidden-xs"><img src="@item._image" class="img-responsive" /></div>
                                    <div class="col-sm-10">
                                        <h4 class="nomargin">@item._productName</h4>
                                        <p> Description</p>
                                    </div>
                                </div>
                            </td>
                            <td data-th="Price">@item._price</td>
                            <td data-th="Quantity">
                                <input type="number" class="form-control text-center" value="">
                            </td>
                            <td data-th="Subtotal" class="text-center">subtotal</td>
                            <td class="actions" data-th="">
                                <button class="btn btn-info btn-sm"><i class="oi oi-reload"></i></button>
                                <button class="btn btn-danger btn-sm"><i class="oi oi-trash"></i></button>
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr class="visible-xs">
                        <td class="text-center"><strong>Total 1.99</strong></td>
                    </tr>
                    <tr>
                        <td colspan="2" class="hidden-xs"></td>
                        <td class="hidden-xs text-center"><strong>Total $1.99</strong></td>
                        <td><a href="#" class="btn btn-success btn-block">Save Shopping list </a></td>
                    </tr>
                </tfoot>
            </table>
        </div>
    }
}

@code {
    string productString;
    string newProduct;
    ShoppinlistFunctionality ListFunc = new ShoppinlistFunctionality("api/Shoppinglist");
    HttpResponseMessage responseMessage = new HttpResponseMessage();
    int ammount;
    string email = "Test";

    protected void IncrementAmount(string id)
    {
        foreach (var item in ListFunc.itemList)
        {
            if (item._id == id)
            {
                item._amountleft++;
            }
        }
    }

    protected void DecrementAmount(string id)
    {
        foreach (var item in ListFunc.itemList)
        {

            if (item._id == id && item._amountleft > 1)
            {
                item._amountleft--;
            }
        }
    }

    //protected async override Task OnInitializedAsync()
    //{
    //    responseMessage = await ListFunc.GetProductsOnStart(email);
    //}

    private void AddAlltoStorage()
    {
        ListFunc.AddShoppinlistToStorage("api/Storage", email);
        ListFunc.itemList.Clear();
    }

    private void DeleteAll()
    {
        //ListFunc.DeleteList("Test");
        ListFunc.itemList.Clear();
    }

    private async void AddProduct()
    {
        if (newProduct != null)
        {
            //CoopProduct newItem = new CoopProduct() { Navn = newProduct, Navn2 = "", Pris = 0.00 };
            Product newItem = new Product()
            {
                _productName = newProduct,
                _amount = "",
                _price = 0.00,
                _id = "11123828382392",
                _amountleft = 1
            };

            newProduct = string.Empty;

            ListFunc.itemList.Add(newItem);
            //responseMessage = await ListFunc.AddProductItem(newItem, email);
        }


    }

    private async void DeleteProduct(string id)
    {
        ListFunc.itemList.Remove(ListFunc.itemList.First(x => x._id == id));

        //int i = 1;
        //foreach (var product in ListFunc.itemList)
        //{
        //    product._id = i;
        //    i++;
        //}

        //responseMessage = await ListFunc.DeleteItem(id, "Test");
    }

    private async void AddProductToStorage(string id)
    {
        ListFunc.AddItemToStorage(id, "api/Storage", email);
        responseMessage = await ListFunc.DeleteItem(id, email);
    }

    private void SaveList()
    {
        ListFunc.AddShoppinlistToStorage("api/Storage", email);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetLocalSession();
            localStorage.Changed += (sender, e) =>
            {
                Console.WriteLine($"Value for key {e.Key} changed from {e.OldValue} to {e.NewValue}");
            };

            //if (email != null)
            //{
            //    gottenData = await Http.GetStringAsync("https://localhost:44325/api/Login/" + email + "S");
            //}
            responseMessage = await ListFunc.GetProductsOnStart(email);

            StateHasChanged();
        }

    }

    async Task GetLocalSession()
    {
        email = await localStorage.GetItemAsync<string>("Email");
    }

}

@page "/search"

@using BBCollection.BBObjects;
@using BBCollection.DBHandling;
@using BBCollection.Queries;
@using FrontEnd2.Data
@using Newtonsoft.Json
@using FrontEnd2.Areas.Data
@using Blazorise.Components

@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<!-- #region Search Bar -->
<div class="container-fluid">
    <div class="row d-flex justify-content-center">
        <div class="col-sm-10 col-md-8 col-lg-7 col-xl-5">
            <div class="form-check-inline center_div" id="acSearchBar">
                <div class="center_div" id="adSearchBBox">
                    <Autocomplete Data="@prodData"
                                  TextField="@((item)=>item.textField)"
                                  ValueField="@((item)=>item.textField)"
                                  SelectedValue="@selectedSearchValue"
                                  SelectedValueChanged="@searchHandler"
                                  Placeholder="Enter a product name..."
                                  Filter="AutocompleteFilter.Contains"
                                  MinLength="2"
                                  IsDisabled="FindingAutocorrectlist" />
                    <button class="btn btn-success acSearchButton" @onclick="(async () => await SearchBar())">
                        <i class="fa fa-search"></i>
                    </button>
                </div>
            </div>
            <div class="center_div" id="filterBox">
                <Field IsHorizontal="true" JustifyContent="JustifyContent.Start">
                    <FieldBody ColumnSize="ColumnSize.Is1.OnDesktop.Is1.OnMobile">
                        <Button Clicked="showFilterModal" Color="Color.Success"> <Icon Name="@(FontAwesomeIcons.Filter)"> </Icon></Button>
                    </FieldBody>
                    <FieldLabel ColumnSize="ColumnSize.Is3.OnDesktop.Is3.OnMobile">Advanced</FieldLabel>
                </Field>
            </div>
        </div>
    </div>
</div>

<Row>
    <Column ColumnSize="ColumnSize.Is5.OnDesktop.Is8.OnMobile">
    </Column>
</Row>
<!-- #endregion -->
<!-- #region Filters -->
<Modal @ref="filterModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true" Size="ModalSize.ExtraLarge">
        <ModalHeader>
            <ModalTitle Style="font-weight:bolder"> Advanced Filters</ModalTitle>
            <CloseButton Clicked="hideFilterModal" />
        </ModalHeader>
        <ModalBody>
            <Row>
                @foreach (AdvancedFilterList af in filterLists)
                {
                    <Column ColumnSize="ColumnSize.Is2.OnDesktop.Is1.OnMobile">
                        <Field>
                            <FieldLabel Style="font-weight:bolder"> @af.optionsname</FieldLabel>
                        </Field>
                        <Field ColumnSize="ColumnSize.IsAuto.OnDesktop">
                            @foreach (FilterItem fi in af.optionsList)
                            {
                                if (fi.IsSortable)
                                {
                                    <CheckEdit ColumnSize="ColumnSize.IsAuto" IsInline="false" RadioGroup="StoreRadioGroup" @onchange="(() => AssignFilter(fi.FilterName, af.optionsList, af.label))" Checked="@fi.IsEnabled"> @fi.FilterName</CheckEdit>
                                }
                                else
                                {
                                    <CheckEdit IsInline="false" @onchange="(() => AssignFilter(fi.FilterName, af.optionsList, af.label))" Checked="@fi.IsEnabled"> @fi.FilterName</CheckEdit>
                                }
                            }
                        </Field>
                    </Column>
                }
                <Column ColumnSize="ColumnSize.Is3.OnDesktop">
                    <Field>
                        <FieldBody>
                            <FieldLabel> Finde stores near you</FieldLabel>
                            <Button Clicked="@OpenStoreModal" Color="Color.Info"> <Icon Name="@(FontAwesomeIcons.LocationArrow)" /> Use my location</Button>
                            <FieldHelp>When applied, you only get results from theese stores </FieldHelp>
                        </FieldBody>
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3.OnDesktop">
                    <Field>
                        <FieldBody>
                            <FieldLabel> Maximum price: @tempMaxprice kr</FieldLabel>
                            <input type="range" min="0" max="3000" @bind="tempMaxprice" step="10" />
                            <FieldHelp> Slide to change</FieldHelp>
                        </FieldBody>
                    </Field>
                </Column>
            </Row>
            <Row>
                <Column ColumnSize="ColumnSize.Is12.OnDesktop">
                    <Field JustifyContent="JustifyContent.Center">
                        <Button @onclick="(()=>ApplyChanges())" Color="Color.Info"><Icon Name="@(FontAwesomeIcons.Adjust)"></Icon> Apply changes</Button>
                    </Field>
                </Column>
            </Row>
        </ModalBody>
    </ModalContent>
</Modal>
<!-- #endregion -->
<!-- #region User location accordion -->
<Accordion>
    <Modal @ref="storeModal">
        <ModalBackdrop />
        <ModalContent Size="@modalSize" IsCentered="@isCentered">
            <ModalHeader>
                <ModalTitle>
                    <Icon Name="@(FontAwesomeIcons.Store)" />
                    Close Stores
                </ModalTitle>
                <CloseButton Clicked="@hideStoreModal" />
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldBody>
                        <FieldLabel> Maximum radius: @(radius / 1000) km </FieldLabel>
                        <input type="range" min="0" max="10000" @bind="radius" step="1000" />
                        <Button IsBlock="true" IsOutline="true" IsDisabled="@FindStoreButton" Color="Color.Success" @onclick="async ()=> await FindStroresInModal()">Apply new radius</Button>
                    </FieldBody>
                </Field>
            </ModalBody>
            <ModalBody MaxHeight="@maxHeight">
                <ListGroup IsFlush="true">
                    <Column ColumnSize="ColumnSize.Is12">
                        <Container>
                            <Alert Color="Color.Success" IsShow="allStoresUnified.Count == 0" Class="overflow-hidden">
                                @storeError 
                            </Alert>
                        </Container>
                    </Column>
                    @foreach (UnifiedAPIStore s in allStoresUnified)
                    {
                        <ListGroupItem>
                            <p>
                                Storename: @s._storeName <br />
                                Adress: @s._address <br />
                                City @s._city <br />
                            </p>
                        </ListGroupItem>
                    }
                </ListGroup>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@hideStoreModal">Close</Button>
            </ModalFooter>
        </ModalContent>
        <ModalBackdrop />
    </Modal>
</Accordion>
<!-- #endregion -->
<!-- #region Product Cards -->
<Row>
    @if (_viewProducts)
    {
        @foreach (Product p in productsToPrint)
        {
            <Column ColumnSize="ColumnSize.IsThird.OnDesktop.IsFull.OnMobile.IsThird.OnTablet" Margin="Margin.Is4.FromBottom">
                <Card Background="Background.White">
                    <CardHeader Margin="Margin.IsAuto" Class="card-headerProduct">
                        <CardImage Source="@p._image" Class="card-imgProduct" />
                    </CardHeader>
                    <CardBody Class="card-bodyProduct">
                        <Field>
                            <FieldLabel>
                                <CardTitle Size="5" Style="width:100%" Float="Float.Left">@p._productName</CardTitle>
                            </FieldLabel>
                            <FieldBody>
                                <ListGroup IsFlush="true">
                                    <ListGroupItem><CardSubtitle>@p._storeName</CardSubtitle></ListGroupItem>
                                    <ListGroupItem><CardText>@p._amount</CardText></ListGroupItem>
                                    <ListGroupItem><CardText>@p._price DKK</CardText></ListGroupItem>
                                </ListGroup>
                            </FieldBody>
                        </Field>
                    </CardBody>
                    <CardFooter Class="card-footerProduct text-center">
                        <Button IsDisabled="disableButton" Margin="Margin.IsAuto.FromLeft" Color="Color.Success" @onclick="(async() => await AddProductToSL(p))"><Icon Name="@(FontAwesomeIcons.ShoppingCart)" /> Add to shopping list</Button>
                        @if (p._amountleft != 0)
                        {
                            <FieldBody Class="text-center">
                                <Text Alignment="TextAlignment.Center" Color="TextColor.Muted" Style="vertical-align:sub; text-align:center; width:300px;">
                                        @p._amountleft Added in <Icon Name="@(FontAwesomeIcons.ShoppingCart)"></Icon>
                                </Text>
                            </FieldBody>
                        }
                    </CardFooter>
                </Card>
            </Column>
        }
    }
    <!--Scroll to top button   -->
    <Button id="myBtn" Class="btn btn-rounded btn-success"><a href="search" style="color: white; font-size:12px;">To top</a></Button>
</Row>

<Row Class="text-align: center">
    <Column ColumnSize="ColumnSize.Is6.Is3.WithOffset" >
        <Container Class="columnWidth:500px">
            <Alert Color="Color.Success" IsShow="ShowMessageToUser()" Class="overflow-hidden">
                @messageToUser
            </Alert>
        </Container>
    </Column>
</Row>

<Snackbar @ref="snackbar">
    <SnackbarBody>
        @tempProductName added to your shopping list. your total is @string.Format("{0:0.00}", (tempCompleteCost + tempTotalCost)) dkk.
    </SnackbarBody>
</Snackbar>
<!-- #endregion -->
<Row Margin="Margin.Is2.FromTop">
    @if (_viewProducts)
    {
        <Column ColumnSize="ColumnSize.Is6.Is3.WithOffset">
            <Text Class="text-center">You have seen @productsToPrint.Count out of @itemList.Count() products</Text>
            <Progress Margin="Margin.Is3.FromBottom" Size="Size.Small">
                <ProgressBar Background="Background.Success" Value="@LoadMoreProgressbar" />
            </Progress>
        </Column>
    }
</Row>
<!-- #region Loadmore -->
<Row Margin="Margin.Is2.FromTop">
    <Column ColumnSize="ColumnSize.Is6.Is3.WithOffset">
        @if (_viewLoadMore)
        {
            <Field Class="card-footerProduct text-center">
                <Button Color="Color.Success" Clicked="LoadMoreProducts" Visibility="Visibility.Default"><Icon Float="Float.Left"></Icon> load more products</Button>
            </Field>
        }
    </Column>
</Row>
<!-- #endregion -->

@code{
    #region fields
    private Snackbar snackbar;
    private Modal storeModal;
    private Modal filterModal;
    private bool locationBox;

    static TaskCompletionSource<GeoCoordinate> tcsUserLocation = new TaskCompletionSource<GeoCoordinate>();
    static GeoCoordinate userGeoLocation = new GeoCoordinate(0, 0);
    ProductHandling ph = new ProductHandling();

    SortoptionsList sortOptions = new SortoptionsList();
    StoreFilterList storeFilters = new StoreFilterList();
    WordFilterList wordFIlters = new WordFilterList();
    FindCloseStores closeStore;
    ControllerFuncionality features = new ControllerFuncionality();

    List<FilterItem> optionsList = new List<FilterItem>();
    List<UnifiedAPIStore> allStoresUnified = new List<UnifiedAPIStore>();
    List<Product> itemList = new List<Product>();
    List<Product> ToShoppinglist = new List<Product>();
    List<Product> productsToPrint = new List<Product>();
    List<Product> tempProductList = new List<Product>();
    List<AdvancedFilterList> filterLists = new List<AdvancedFilterList>();
    List<Product> AutocompleteList = new List<Product>();
    List<FilterItem> tempFilterlist = new List<FilterItem>();
    SortBy sort = new SortBy();
    SortNames sortBy = new SortNames();
    List<Product> tempToShowList = new List<Product>();
    ProductSearchHandling search = new ProductSearchHandling();
    Product tempProduct = new Product();

    UserData user;

    bool isCentered = false;
    ModalSize modalSize = ModalSize.Default;
    int? maxHeight = null;


    FilterItem tempFilteritem = new FilterItem();

    string[] prodName;
    IEnumerable<AutocompleteSearch> prodData;
    object selectedSearchValue { get; set; }

    bool[] EnabledStores;
    bool[] EnabledKeywords;

    Product[] slArray = new Product[10];
    string shopString;
    string tempProductName = " ";

    bool viewAdvancedSearch = false;
    bool _viewProducts = false;
    bool IsLocationEnabled = false;
    bool FatalFalure = false;
    bool isSearching = false;
    bool _viewLoadMore = false;
    bool _viewLoadMoreSpinner = false;
    bool disableButton = false;
    bool viewAutoComplete = false;
    bool isFindingList = false;
    bool FindingAutocorrectlist = true;
    bool FindStoreButton = false;

    FilterItem filter = new FilterItem();

    int value = 1;
    int radius = 1000;
    int lastRadius = 0;
    int _productsToMatch = int.MaxValue;
    int _loadCount = 0;
    int printCount = 12;
    int printStartIndex = 0;
    int availabelProducts;
    int LoadMoreProgressbar;
    int productShown = 0;

    double tempTotalCost;
    double tempCompleteCost;
    double _minPrice = 0;
    double _maxPrice = 5000;
    double priceLimit = 10000;

    string searchBox;
    string email;
    string messageToUser;
    string productString;
    string tempSearchword = "";
    string wordLabel = "word";
    string storeLabel = "store";
    string optionLabel = "option";
    string imageUrl;
    string oldSearchterm;
    string storeError = "No stores were found with current radius";
    string replacementUlr = "https://cdn.discordapp.com/attachments/519096261408718908/649685312083197973/coopdicoop.jpg";

    double tempMaxprice
    {
        get => _maxPrice;
        set
        {
            if (value < 0)
            {
                _maxPrice = 0;
            }
            else if (value > priceLimit)
            {
                _maxPrice = priceLimit;
            }
            else
            {
                _maxPrice = value;
            }
        }
    }

    public double maxPrice
    {
        get => _maxPrice;
        set
        {
            if (value < 0)
            {
                _maxPrice = 0;
            }
            else if (value > priceLimit)
            {
                _maxPrice = priceLimit;
            }
            else
            {
                _maxPrice = value;
            }
        }
    }

    #endregion

    #region Modal
    private void showFilterModal()
    {
        filterModal.Show();
    }

    private void hideFilterModal()
    {
        filterModal.Hide();
    }

    private void showStoreModal(ModalSize modalSize, int? maxHeight = null, bool isCentered = false)
    {
        this.isCentered = isCentered;
        this.modalSize = modalSize;
        this.maxHeight = maxHeight;

        storeModal.Show();
    }

    private void hideStoreModal()
    {
        storeModal.Hide();
    }
    #endregion

    #region ChangeFilterControl

    private void AssignFilter(ChangeEventArgs e, List<FilterItem> filterList, string label)
    {
        string test = e.Value.ToString();

        if (test.Equals("all"))
        {
            SelectAll(filterList);
        }
        else
        {
            ChangeState(test, filterList, label);
        }
    }

    private void AssignFilter(string e, List<FilterItem> filterList, string label)
    {
        if (e.Equals("all"))
        {
            SelectAll(filterList);
        }
        else
        {
            ChangeState(e, filterList, label);
        }
    }

    void toggleAdvancedCheckBox()
    {
        viewAdvancedSearch = !viewAdvancedSearch;
    }

    void toggleAutocomplete()
    {
        viewAutoComplete = !viewAutoComplete;
    }

    public void ChangeState(string name, List<FilterItem> list, string label)
    {
        tempFilteritem = FindFilteritem(list, name);

        if (tempFilteritem.IsSortable)
        {
            list = AssignNewBools(list, tempFilteritem.FilterName);
            itemList = search.DecideOrderFilter(tempFilteritem.SortOption, itemList);
        }
        else
        {
            tempFilteritem.IsEnabled = !tempFilteritem.IsEnabled;
        }
    }

    private List<FilterItem> AssignNewBools(List<FilterItem> list, string name)
    {
        foreach (FilterItem f in list)
        {
            if (f.FilterName.Equals(name))
            {
                f.IsEnabled = true;
            }
            else
            {
                f.IsEnabled = false;
            }
        }
        return list;
    }

    void toggle()
    {
        IsLocationEnabled = !IsLocationEnabled;
    }

    public void SelectAll(List<FilterItem> list)
    {
        foreach (var item in list)
        {
            item.IsEnabled = true;
        }
    }

    #endregion

    #region ProductToShoppinglistMethod

    /// <summary>
    /// When a product is added to shoppinglist, there are two ways of doing so.
    /// One is if the user is logged in, and it is sent to the database.
    /// The other is when the user is not logged in, and the product is saved
    /// in the local storage.
    /// </summary>
    /// <param name="AddedItem"></param>
    public async Task AddProductToSL(Product p)
    {
        disableButton = true;
        StateHasChanged();

        p._amountleft++;
        tempProductName = p._productName;
        tempTotalCost += p._price;

        if (String.IsNullOrEmpty(email))
        {
            await GetAndSetLocalStorage(p);
        }
        else
        {
            await user.shoppinglist.AddProduct(p);
        }

        disableButton = await AwaitButton();
        snackbar.Show();
        StateHasChanged();
    }

    public async Task<bool> AwaitButton()
    {
        await Task.Delay(30);
        return false;
    }

    public async Task GetAndSetLocalStorage(Product AddedItem)
    {
        ToShoppinglist = await GetLocalStorage();

        ToShoppinglist.Add(AddedItem);

        ToShoppinglist = features.HandleDublicats(ToShoppinglist);

        await localStorage.RemoveItemAsync("ProductString");

        shopString = JsonConvert.SerializeObject(ToShoppinglist);

        await localStorage.SetItemAsync("ProductString", shopString);
    }

    #endregion

    #region SearchMethods

    public int AssignAmout(Product p)
    {
        if (user.shoppinglist.shoppinglist.Any(x=> x._id == p._id))
        {
            return user.shoppinglist.shoppinglist.First(x=> x._id == p._id)._amountleft++;
        }

        return p._amountleft;
    }

    public async Task ApplyChanges()
    {
        hideFilterModal();

        maxPrice = tempMaxprice;
        SetIndexesToReload();

        await SetFiltersToSearch();
    }

    public async Task SearchBar()
    {
        ResetIndexes();

        await SetFiltersToSearch();
    }

    public async Task SetAmoutOnProducts()
    {
        if (!String.IsNullOrEmpty(email))
        {
            await user.shoppinglist.GetWhenLoggedIn();
        }
        else
        {
            await GetLocalStorageString();
            user.shoppinglist.GetWhenNotLoggedIn(shopString);
        }

        if (itemList.Count != 0 && user.shoppinglist.shoppinglist.Count != 0)
        {
            user.shoppinglist.shoppinglist.ForEach(x=> SetItemlistAmount(x));
        }
    }

    public void SetItemlistAmount(Product p)
    {
        tempProduct = itemList.FirstOrDefault(x=> x._id == p._id);

        if (tempProduct != null)
        {
            tempProduct._amountleft = p._amountleft;
            tempProduct = null;

        }
    }

    private async Task SetFiltersToSearch()
    {
        productsToPrint.Clear();
        printStartIndex = 0;

        _viewProducts = false;
        _viewLoadMore = false;
        isSearching = true;
        this.StateHasChanged();

        _loadCount = 0;
        itemList = await SearchForProducts();
        itemList = features.SetAllPicture(itemList);
        itemList = FindViableProducts();
        await SetAmoutOnProducts();

        if (itemList.Count == 0)
        {
            messageToUser = "No Products Found With These Filters. Concider enabeling stores or disabeling keywords.";
        }
        else
        {
            OrderResulsts();

            ExpandProductsToPrintList();

            _viewProducts = true;
        }

        isSearching = false;
        this.StateHasChanged();
    }

    public List<Product> FindViableProducts()
    {
        return itemList.FindAll(x=> ConfirmPrice(x));
    }

    public void SetLoadmore()
    {
        if (availabelProducts > printStartIndex)
        {
            _viewLoadMore = true;
        }
        else
        {
            _viewLoadMore = false;
        }
    }

    public void ResetIndexes()
    {
        productShown = 0;
        printStartIndex = 0;
    }

    public void SetIndexesToReload()
    {
        printStartIndex = 0;
    }

    public void OrderResulsts()
    {
        tempFilterlist = FindFilterList(optionLabel);

        itemList = search.DecideOrderFilter(FindActiveSortFilter(tempFilterlist), itemList);
    }

    public List<FilterItem> FindFilterList(string label)
    {
        return filterLists[StoreIndex(label)].optionsList;
    }

    public int StoreIndex(string label)
    {
        return filterLists.FindIndex(x => x.label == label);
    }

    private void LoadMoreProducts()
    {
        _viewLoadMoreSpinner = true;
        this.StateHasChanged();
        _loadCount++;

        productsToPrint.AddRange(GetAndUpdateRange());
        productShown = productsToPrint.Count();
        LoadMoreProgressbar = UpdateLoadMore();

        _viewLoadMoreSpinner = false;
        this.StateHasChanged();
    }

    public int UpdateLoadMore()
    {
        return (int)Math.Round(((double)productShown / (double)availabelProducts) * 100, 1);
    }

    public void ExpandProductsToPrintList()
    {
        availabelProducts = itemList.Count;
        productsToPrint.AddRange(GetAndUpdateRange());
        productShown = productsToPrint.Count();
        LoadMoreProgressbar = UpdateLoadMore();
    }

    public List<Product> GetAndUpdateRange()
    {
        if (availabelProducts >= productShown + printCount)
        {
            tempProductList = itemList.GetRange(printStartIndex, printCount);
            printStartIndex += printCount;
        }
        else
        {
            int i = availabelProducts - printStartIndex;
            tempProductList = itemList.GetRange(printStartIndex, i);
            printStartIndex += i;
        }

        SetLoadmore();
        return tempProductList;
    }

    public bool ConfirmPrice(Product p)
    {
        return p._price < maxPrice;
    }

    /// <summary>
    /// This method applies the different filters, and sends a request to the database
    /// for the relevant products.
    /// </summary>
    /// <returns></returns>

    private async Task<List<Product>> SearchForProducts()
    {
        if (!String.IsNullOrEmpty(searchBox) && !String.IsNullOrWhiteSpace(searchBox))
        {
            updateFilters();
            return await search.CallApiForProducts(searchBox, EnabledKeywords, EnabledStores);
        }
        else
        {
            messageToUser = "You Need To Write A Searhcword";
            return new List<Product>();
        }
    }

    /// <summary>
    /// Returns a list of all stores close based on geo location and radius
    /// </summary>

    public async Task FindStroresInModal()
    {
        FindStoreButton = true;
        FindStoreFunc();
        FindStoreButton = await AwaitLongButton();

    }

    public void OpenStoreModal()
    {
        FindStoreFunc();
        showStoreModal(ModalSize.Default, 30, true);
    }

    /// <summary>
    /// Find close stores based on location and radius
    /// </summary>
    public void FindStoreFunc()
    {
        closeStore = new FindCloseStores(userGeoLocation, radius);
        allStoresUnified = closeStore.GetStore();
        lastRadius = radius;
    }

    public async Task<bool> AwaitLongButton()
    {
        await Task.Delay(4000);
        return false;
    }

    private async Task KeyPressed(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchBar();
        }
    }
    #endregion

    #region OnStart

    /// <summary>
    /// On first render the getolocation is set, and it is decided whether or not the user
    /// is logged in, to find out where to put products if they go to the shoppinglist.
    /// The different filters are also initialized.
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetLocalSession();

            InitializeFilters();
            await InitializeLocation();
            await InitializeUser();
            await InitializeAutocorrect();
            tempCompleteCost = user.shoppinglist.CompletePrice();

            this.StateHasChanged();
        }

    }

    public bool ShowMessageToUser()
    {
        return !_viewProducts && !String.IsNullOrEmpty(messageToUser);
    }

    public async Task InitializeAutocorrect()
    {
        prodName = await search.InitializeAutocorrect();
        prodData = search.InitializeRecommender(prodName);

        FindingAutocorrectlist = false;
    }

    public void InitializeFilters()
    {
        filterLists.Add(new AdvancedFilterList(storeLabel, "Find Store", storeFilters.GetStoreList(), "all"));
        filterLists.Add(new AdvancedFilterList(wordLabel, "Word Filter", wordFIlters.GetWordList(), "all"));
        filterLists.Add(new AdvancedFilterList(optionLabel, "Sort By", sortOptions.GetSortList()));

        InitializeBoolArrays(FindListAmount(storeLabel), FindListAmount(wordLabel));
    }

    public async Task InitializeLocation()
    {
        if (userGeoLocation._latitude == 0 && userGeoLocation._longitude == 0)
        {
            await GetUserLocation();
            await tcsUserLocation.Task;
        }
    }

    public async Task InitializeUser()
    {
        if (!String.IsNullOrEmpty(email))
        {
            user = new UserData(email);
            await user.shoppinglist.GetWhenLoggedIn();
        }
        else
        {
            ToShoppinglist = await GetLocalStorage();
            user = new UserData();

            user.shoppinglist.GetWhenNotLoggedIn(shopString);

        }
    }

    public async Task GetLocalStorageString()
    {
        shopString = await localStorage.GetItemAsync<string>("ProductString");
    }

    public async Task<List<Product>> GetLocalStorage()
    {
        await GetLocalStorageString();

        if (!String.IsNullOrEmpty(shopString))
        {
            return JsonConvert.DeserializeObject<List<Product>>(shopString);
        }

        return new List<Product>();
    }

    public int FindListAmount(string label)
    {
        return filterLists.Find(x => x.label.Equals(label)).optionsList.Count;
    }

    public int FindListIndex(string label)
    {
        return filterLists.FindIndex(x => x.label.Equals(label));
    }

    public FilterItem FindFilteritem(List<FilterItem> list, string name)
    {
        tempFilteritem = list.Find(x => x.FilterName.Equals(name));

        return tempFilteritem;
    }

    /// <summary>
    /// email (if logged in) and shopString (if not logged in) is requested
    /// to find out whether or not the user is logged in.
    /// </summary>
    /// <returns></returns>

    async Task GetLocalSession()
    {
        email = await localStorage.GetItemAsync<string>("Email");
        shopString = await localStorage.GetItemAsync<string>("ProductString");

        if (!String.IsNullOrEmpty(shopString))
        {
            ToShoppinglist = JsonConvert.DeserializeObject<List<Product>>(shopString);
        }
    }
    #endregion

    #region Autocomplete_Search

    private async void searchHandler(object newValue)
    {
        try
        {
            selectedSearchValue = newValue;
            searchBox = newValue.ToString();
            await SearchBar();
        }
        catch (System.NullReferenceException)
        {
            Console.WriteLine("The searh was empty. Pls do not press ESC");
        }
    }

    #endregion

    #region BoolArrayMethods

    /// <summary>
    /// Finds out which sorting filter is active
    /// Returns the "most relecant" if none are active
    /// (although that is not possible) since that is how they
    /// come from the database
    /// </summary>
    /// <returns></returns>
    public int FindActiveSortFilter(List<FilterItem> filterList)
    {
        foreach (FilterItem o in filterList)
        {
            if (o.IsEnabled)
            {
                return o.SortOption;
            }
        }
        return (int)SortNames.Relevance;
    }

    /// <summary>
    /// When searching the filters are updated
    /// The store filter is also compared to the stores which are
    /// actually located close, if geo location is activated.
    /// </summary>
    public void updateFilters()
    {
        EnabledStores = updateEachFilter(storeFilters.GetStoreArray());
        EnabledKeywords = updateEachFilter(wordFIlters.GetWordArray());

        if (IsLocationEnabled)
        {
            // If the radius is the same as the last time there was a search
            // the stores close are the same as before.
            if (radius != lastRadius)
            {
                try
                {
                    FindStoreFunc();
                }
                catch (System.Exception)
                {
                    FatalFalure = true;
                }

                lastRadius = radius;
            }

            // If the stores close cannot be found nothing this step is skipped.
            if (!FatalFalure)
            {
                bool[] closeStoreBool = new bool[EnabledStores.Length];

                closeStoreBool = SetAllFilters(closeStoreBool, false);
                closeStoreBool = CompareBoolArr();

                EnabledStores = closeStoreBool;
            }
        }

    }

    /// <summary>
    /// The filters are updated to how the user set them, and is returned.
    /// This is done because we only need the boolean value when requesting the api,
    /// and the filtername is irelevant.
    /// </summary>
    /// <param name="filterArray"></param>
    /// <returns></returns>

    public bool[] updateEachFilter(FilterItem[] filterArray)
    {
        bool[] resultFilterArr = new bool[filterArray.Length];
        for (int i = 0; i < filterArray.Length; i++)
        {
            resultFilterArr[i] = filterArray[i].IsEnabled;
        }

        return resultFilterArr;
    }

    /// <summary>
    /// This compares the stores the users wanted to see, and the stores actually
    /// located close enought the the user (based on set radius) and returns
    /// a bool array of cases where the close was close enough, and the user wanted
    /// to see it.
    /// </summary>
    /// <returns></returns>

    public bool[] CompareBoolArr()
    {
        bool[] arr = new bool[EnabledStores.Length];
        arr = SetAllFilters(arr, false);

        foreach (var item in allStoresUnified)
        {
            for (int i = 0; i < storeFilters.GetStoreArray().Length; i++)
            {
                if (item._brand.ToLower().Equals(storeFilters.GetStoreArray()[i].FilterName.ToLower()) && EnabledStores[i])
                {
                    arr[i] = true;
                    break;
                }
            }

        }
        return arr;
    }

    /// <summary>
    /// This method initializes the two different bool arrays, one for stores and one for keywords.
    /// The input shows how long the arrays are.
    /// At last all stores are set to true, and all keywords set to false.
    /// </summary>
    /// <param name="stores"></param>
    /// <param name="words"></param>

    public void InitializeBoolArrays(int stores, int words)
    {
        EnabledStores = new bool[stores];
        EnabledKeywords = new bool[words];

        EnabledStores = SetAllFilters(EnabledStores, true);
        EnabledKeywords = SetAllFilters(EnabledKeywords, false);
    }

    /// <summary>
    /// Sets all indexes in an array to the input bool value.
    /// </summary>
    /// <param name="arr">The array to set</param>
    /// <param name="setTo">The bool all indexes should have</param>
    /// <returns></returns>

    public bool[] SetAllFilters(bool[] arr, bool setTo)
    {
        for (int i = 0; i < arr.Length; i++)
        {
            arr[i] = setTo;
        }
        return arr;
    }

    #endregion

    #region UserLocation
    async Task GetUserLocation()
    {
        await JsRuntime.InvokeVoidAsync(identifier: "getCoordinates");
    }

    [JSInvokable]
    public static void UpdateUserLocation(double latitude, double longitude)
    {
        userGeoLocation._latitude = latitude;
        userGeoLocation._longitude = longitude;
        if (!tcsUserLocation.Task.IsCompleted)
        {
            // This ensures the page waits to continue before the userlocation is set.
            // It is only run on the first render.
            tcsUserLocation.SetResult(userGeoLocation);
        }
    }
    #endregion

    #region Price

    public void getShoppinglistPrice(Product p)
    {
        tempCompleteCost += p._price;
    }

    public List<Product> FindNewProducts()
    {
        tempToShowList.Clear();
        int i = 0;
        i = printStartIndex;

        double price;
        while (tempToShowList.Count < printCount)
        {
            price = itemList[i]._price;

            if (maxPrice > price)
            {
                tempToShowList.Add(itemList[i]);
            }

            if (i > itemList.Count)
            {
                break;
            }

            i++;

        }

        return tempToShowList;
    }

    public bool ListExists(List<Product> list)
    {
        return list.Count > 0;
    }

    public int CountAvailableProducts()
    {
        int i = 0;
        foreach (Product p in itemList)
        {
            if (maxPrice > p._price)
            {
                availabelProducts++;
            }
        }
        return i;
    }
    #endregion
}

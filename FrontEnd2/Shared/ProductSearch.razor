@page "/yoot"
@using BBCollection.BBObjects;
@using FrontEnd2.Data
@inject IJSRuntime JsRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthenticationFunctionallity uf

<h3>Search A Product</h3>
<div class="container-fluid">
    <div class="row">
        <div class="col-sm-6">
            <label for="search">Søg Efter En Råvare!</label>
            <input type="text" id="search" class="form-control" placeholder="Råvare.." @onkeyup="@((e) => KeyPressed(e))" @bind="searchBox" />
        </div>
        <div class="col-sm-3">
            <button type="button" class="btn btn-success" @onclick="@(() => SearchForProducts())">Search</button>
            <button type="button" class="btn btn-warning" @onclick="GetUserLocation">What Is My Location?</button>
        </div>
    </div>
    <div class="row top-margin">
        <div class="btn-group show-on-hover">
            <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                Select Stores <span class="caret"></span>
            </button>
            <ul class="dropdown-menu" role="menu">
                @foreach (var item in storeList)
                {
                    if (item.IsEnabled == true)
                    {
                        <li><button style="color:green" class="btn btn-block bg-light dropdownListStrorage rounded-0" @onclick="(() => ChangeState(item.FilterName, storeList))">@item.FilterName</button></li>

                    }
                    else
                    {
                        <li><button style="color:red" class="btn btn-block bg-light dropdownListStrorage rounded-0" @onclick="(() => ChangeState(item.FilterName, storeList))">@item.FilterName</button></li>

                    }
                }
                <li><button class="btn btn-block bg-light dropdownListStrorage rounded-0" @onclick="(()=>SelectAll(storeList))">@storelistAllSelected</button></li>
            </ul>
        </div>

        <div class="btn-group show-on-hover">
            <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                Select Stores <span class="caret"></span>
            </button>
            <ul class="dropdown-menu" role="menu">
                @foreach (var item in wordList)
                {
                    <li><button class="btn btn-block bg-light dropdownListStrorage rounded-0" @onclick="(() => ChangeState(item.FilterName, wordList))">@item.FilterName</button></li>

                }
                <li><button class="btn btn-block bg-light dropdownListStrorage rounded-0" @onclick="(()=>SelectAll(wordList))">@storelistAllSelected</button></li>
            </ul>
        </div>
        <input type="range" name="Yeet" min="0" max="10000" @bind="radius" />
        <p>@radius</p>

        @*<input id="ex7" type="text" data-slider-min="0" data-slider-max="20" data-slider-step="1" data-slider-value="5" data-slider-enabled="false" />
        <input id="ex7-enabled" type="checkbox" /> Enabled*@

    </div>
      
    @*<div class="form-group" col-md-6>
            <label for="minPriceB">Minimum Price</label>
            <input type="number" class="form-control" placeholder="Min Price" @bind="minPrice" />
        </div>*@
    @*<div class="form-group" col-md-6>
            <label for="maxPriceB">Maximum Price</label>
            <input type="number" class="form-control" placeholder="Max Price" @bind="maxPrice" />


        </div>*@


</div>


@code {
    StoreFilterList storeFilters = new StoreFilterList();
    WordFilterList wordFIlters = new WordFilterList();
    static GeoCoordinate userGeoLocation = new GeoCoordinate(0, 0);
    String searchBox;
    String email;
    string storelistAllSelected = "Select All";
    string wordlistAllSelected = "Select All";
    bool storeBoolSetTo = true;
    bool wordBoolSetTo = true;
    int radius;

    List<FilterItem> storeList = new List<FilterItem>();
    List<FilterItem> wordList = new List<FilterItem>();
    static TaskCompletionSource<GeoCoordinate> tcsUserLocation = new TaskCompletionSource<GeoCoordinate>();

    public void ChangeState(string name, List<FilterItem> list)
    {
        foreach (var item in list)
        {
            if (item.FilterName == name)
            {
                item.IsEnabled = !item.IsEnabled;
                break;
            }
        }
    }

    public void SelectAll(List<FilterItem> list)
    {
        foreach (var item in list)
        {
            item.IsEnabled = true;
        }
    }

    private void KeyPressed(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SearchForProducts();
        }
    }

    private void SearchForProducts()
    {
        //save = searchBox;

        if (searchBox != "")
        {

        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetLocalSession();
            localStorage.Changed += (sender, e) =>
            {
                Console.WriteLine($"Value for key {e.Key} changed from {e.OldValue} to {e.NewValue}");
            };

            //responseMessage = await ListFunc.GetStorageOnStart(email);
            storeList = storeFilters.GetStoreList();
            wordList = wordFIlters.GetStoreList();

            if (userGeoLocation._latitude == 0 && userGeoLocation._longitude == 0)
            {
                await GetUserLocation();
                await tcsUserLocation.Task;
            }

            this.StateHasChanged();
        }

    }

    async Task GetLocalSession()
    {
        email = await localStorage.GetItemAsync<string>("Email");
    }

    async Task GetUserLocation()
    {
        await JsRuntime.InvokeVoidAsync(identifier: "getCoordinates");
    }

    [JSInvokable]
    public static void UpdateUserLocation(double latitude, double longitude)
    {
        userGeoLocation._latitude = latitude;
        userGeoLocation._longitude = longitude;
        if (!tcsUserLocation.Task.IsCompleted)
        {
            tcsUserLocation.SetResult(userGeoLocation);
        }
    }
}

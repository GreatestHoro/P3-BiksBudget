@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager

@if (email != null)
{
    @*<div class="container-fluid">
        <div class="row no-gutters">
            <div class="col-sm-8">

            </div>
            <div class="col-sm-2 fontColor">
                
                <p>Hello, @email!</p>
            </div>
        </div>
        <div class="row no-gutters">
            <div class="col-sm-8">

            </div>
            <div class="col-sm-2">
                <button class="btn btn-rounded btn-outline-success" @onclick="logout">Log out</button>
            </div>
        </div>
    </div>*@
    <div class="d-flex flex-sm-row-reverse flex-column">
        <div class="p-2">
            <button class="btn btn-rounded btn-success Log-btn-design" @onclick="logout">Log out</button>
        </div>
        @*<div class="p-2 fontColor">
            <p>Hello @email</p>
        </div>*@
    </div>
}
else
{
    @*<div class="container-fluid">
        <div class="row no-gutters">
            <div class="col-sm-8">

            </div>
            <div class="col-sm-2">
                <a class="LogIn btn-block" href="Register">Register</a>
            </div>
        </div>
        <div class="row no-gutters">
            <div class="col-sm-8">

            </div>
            <div class="col-sm-2">
                <a class="LogIn btn-block" href="Login">Log in</a>
            </div>
        </div>
    </div>*@
    @*<a class="LogIn btn-block" href="Register">Register</a>
        <a class="LogIn btn-block" href="Login">Log in</a>*@
    <div class="d-flex flex-sm-row-reverse flex-column">
        <div class="p-2">
            <a class="btn btn-rounded btn-success Log-btn-design" href="Register">Register</a>
        </div>
        <div class="p-2">
            <a class="btn btn-rounded btn-success Log-btn-design" href="Login">Log in</a>
        </div>
    </div>
   
}

@code{
    string email;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await GetLocalSession();
        StateHasChanged();
    }

    async Task GetLocalSession()
    {
        email = await localStorage.GetItemAsync<string>("Email");
    }

    private async void logout()
    {
        await localStorage.RemoveItemAsync("Email");
        await localStorage.RemoveItemAsync("Shoppinglist");
        await localStorage.RemoveItemAsync("ProductString");
        NavigationManager.NavigateTo("Login");
    }
}

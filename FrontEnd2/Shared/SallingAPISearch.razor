@using System.Globalization
@using FrontEnd2.StoreApi.ApiNeeds
@using FrontEnd2.Data

<h3>Search A Product</h3>
<div class="form-row">
    <div class="form-group col-md-6">
        <label for="search">Søg Efter En Råvare!</label>
        <input type="text" id="search" class="form-control" placeholder="Råvare.." @onkeyup="@((e) => KeyPressed(e))" @bind="searchBox"/>
    </div>
    <div class="form-group" col-md-6>
        <label for="minPriceB">Minimum Price</label>
        <input type="number" class="form-control" placeholder="Min Price" @bind="minPrice" />
    </div>
    <div class="form-group" col-md-6>
        <label for="maxPriceB">Maximum Price</label>
        <input type="number" class="form-control" placeholder="Max Price" @bind="maxPrice" />
    </div>
    <button type="button" class="btn btn-success" @onclick="@(() => SearchForProducts())">Find Mig En Spise!</button>

</div>

    @if (_viewProducts == true)
    {
        <p>hej 2: @counter</p>
        <p>you want: @searchBox</p>
        foreach (var product in resultProductQuery)
        {
            <div class="flex-sm-row">
                <img src="@product.img" class="img-thumbnail" alt="billede af @product.title">
                <div class="card-body">
                    <h5 class="card-title" style="font-weight:bold">@product.title</h5>
                    <p class="btn btn-warning">@product.price DKK</p>
                    <button @onclick="(()=>AddToShoppinglist(product))" class="btn btn-success">Læg Til Shoppinglisten</button>
                </div>
            </div>
        }
    }

@code {
    ShoppinlistFunctionality func = new ShoppinlistFunctionality("api/Shoppinglist");
    HttpResponseMessage response = new HttpResponseMessage();

    string searchBox;
    string written;
    double minPrice;
    double maxPrice;
    double MaxPrice {
        get
        {
            if (maxPrice <= 0)
            {
                maxPrice = double.MaxValue;
            }
            return maxPrice;
        }
        set
        {
            if (value <= 0)
            {
                maxPrice = double.MaxValue;
            } else
            {
                maxPrice = value;
            }
        }
    }
    BearerAccessToken bearerAccessToken = new BearerAccessToken("fc5aefca-c70f-4e59-aaaa-1c4603607df8");
    SallingAPILink linkMaker = new SallingAPILink();
    bool _viewProducts = false;
    int counter = 0;
    string save;

    SallingAPIProductSuggestions productSuggestions = new SallingAPIProductSuggestions();
    List<SallingAPIProduct> resultProductQuery = new List<SallingAPIProduct>();
    Filter<SallingAPIProduct> productFilter = new Filter<SallingAPIProduct>();

    async void AddToShoppinglist(SallingAPIProduct item)
    {
        response = await func.AddProductToList(item.title, item.description, item.price);
    }


    private void KeyPressed(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SearchForProducts();
        }
    }

    private void SaveInput(string input) {
        searchBox = input;
    }


    private void SearchForProducts()
    {
        save = searchBox;

        if (searchBox != "")
        {
            string apiLink = linkMaker.GetProductAPILink(searchBox);

            OpenHttp<SallingAPIProductSuggestions> openHttp = new OpenHttp<SallingAPIProductSuggestions>(apiLink, bearerAccessToken.GetBearerToken());

            productSuggestions = openHttp.ReadAndParseAPISingle();

            productSuggestions.Suggestions.Sort((a, b) => a.price.CompareTo(b.price));

            resultProductQuery = productFilter.GetFiltered(productSuggestions.Suggestions, p => p.price > minPrice & p.price < MaxPrice);

            _viewProducts = true;
            Console.WriteLine(counter);
            counter++;
        }
    }

}
